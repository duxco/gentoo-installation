{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Disclaimer This installation guide, called \"guide\" in the following , builds upon the official Gentoo Linux installation handbook . It's written with great care. Nevertheless, you are expected not to blindly copy&paste commands! Please, understand what you are going to do and adjust commands if required ! Developer Information You can contact me under \"duxsco\" at Libera Chat or OFTC . I am also on . Information on my GnuPG public key can be found in my GitHub profile page . 1.1. System Requirements \u00b6 Beside official hardware requirements , the guide has additional ones: Secure Boot and TPM 2.0: It builds heavily on \"secure boot\" and requires \"TPM 2.0\" not only for \"secure boot\" but also for \"measured boot\" to function. Make sure that the system is in \"setup mode\" in order to be able to add your custom \"secure boot\" keys. You can, however, boot without \"setup mode\" and import the keys later on depending on the hardware in use. For this, you can follow the instructions in section 12.2. Secure Boot Setup at that point in time. systemd and Measured Boot: The guide requires the use of systemd for \"measured boot\" to work without restrictions. Clevis may be an option if you want to stay with OpenRC. But, I haven't tested this. Alternatively, you can take a look at my older documentation which, however, doesn't support \"measured boot\" and isn't maintained by me anymore. x86_64 Architecture: To keep things simple, the guide presumes that you intend to install on a x86_64 system. This is the only architecture that has been tested by me! And, it's the only architecture still actively supported by SystemRescue . SystemRescue is used for the rescue system with its custom chroot.sh script . 1.2. Technologies \u00b6 The guide results in a system that is/uses: Secure Boot : All EFI binaries and unified kernel images are signed. Measured Boot : systemd-cryptenroll or clevis is used to check the system for manipulations via TPM 2.0 PCRs. Fully encrypted : Except for ESP(s), all partitions are LUKS encrypted. RAID : Except for ESP(s), btrfs and mdadm based RAID are used for all partitions if the number of disks is \u22652. Rescue system : A customised SystemRescue supports optional SSH logins and provides a convenient chroot.sh script. Hardened Gentoo Linux (optional) for a highly secure, high stability production environment ( link ). SELinux (optional) provides Mandatory Access Control using type enforcement and role-based access control ( link ). 1.3. SSH Connectivity \u00b6 After completion of this guide, optional SSH connections will be possible to the following systems using SSH public key authentication: Gentoo Linux installation Rescue System ssh -p 50022 david@<IP address> ssh -p 50023 root@<IP address> 1.4. Disk Layout \u00b6 Independent ESPs are created one for each disk to provide for redundancy, because there is the risk of data corruption with the redundancy provided by mdadm RAID (further info: 5.1 ESP on software RAID1 ). Except for ESPs, btrfs or mdadm based RAID 1 is used for all other partitions on a dual- or multi-disk setup with RAID 5, RAID 6 and RAID 10 being further options for the swap device. The 2nd partition doesn't make use of btrfs RAID due to limitations of SystemRescue . four disks three disks two disks single disk 1.5. LUKS Key Slots \u00b6 On the \"rescue\" partition, LUKS key slots are set as follows: 0: Rescue password On all other LUKS volumes, LUKS key slots are set as follows: 0: Fallback password for emergency 1: Measured Boot Option A: TPM 2.0 with optional pin to unlock with systemd-cryptenroll Option B: Shamir Secret Sharing combining TPM 2.0 and Tang pin ( Tang project ) to automatically unlock with Clevis","title":"1. Introduction"},{"location":"#11-system-requirements","text":"Beside official hardware requirements , the guide has additional ones: Secure Boot and TPM 2.0: It builds heavily on \"secure boot\" and requires \"TPM 2.0\" not only for \"secure boot\" but also for \"measured boot\" to function. Make sure that the system is in \"setup mode\" in order to be able to add your custom \"secure boot\" keys. You can, however, boot without \"setup mode\" and import the keys later on depending on the hardware in use. For this, you can follow the instructions in section 12.2. Secure Boot Setup at that point in time. systemd and Measured Boot: The guide requires the use of systemd for \"measured boot\" to work without restrictions. Clevis may be an option if you want to stay with OpenRC. But, I haven't tested this. Alternatively, you can take a look at my older documentation which, however, doesn't support \"measured boot\" and isn't maintained by me anymore. x86_64 Architecture: To keep things simple, the guide presumes that you intend to install on a x86_64 system. This is the only architecture that has been tested by me! And, it's the only architecture still actively supported by SystemRescue . SystemRescue is used for the rescue system with its custom chroot.sh script .","title":"1.1. System Requirements"},{"location":"#12-technologies","text":"The guide results in a system that is/uses: Secure Boot : All EFI binaries and unified kernel images are signed. Measured Boot : systemd-cryptenroll or clevis is used to check the system for manipulations via TPM 2.0 PCRs. Fully encrypted : Except for ESP(s), all partitions are LUKS encrypted. RAID : Except for ESP(s), btrfs and mdadm based RAID are used for all partitions if the number of disks is \u22652. Rescue system : A customised SystemRescue supports optional SSH logins and provides a convenient chroot.sh script. Hardened Gentoo Linux (optional) for a highly secure, high stability production environment ( link ). SELinux (optional) provides Mandatory Access Control using type enforcement and role-based access control ( link ).","title":"1.2. Technologies"},{"location":"#13-ssh-connectivity","text":"After completion of this guide, optional SSH connections will be possible to the following systems using SSH public key authentication: Gentoo Linux installation Rescue System ssh -p 50022 david@<IP address> ssh -p 50023 root@<IP address>","title":"1.3. SSH Connectivity"},{"location":"#14-disk-layout","text":"Independent ESPs are created one for each disk to provide for redundancy, because there is the risk of data corruption with the redundancy provided by mdadm RAID (further info: 5.1 ESP on software RAID1 ). Except for ESPs, btrfs or mdadm based RAID 1 is used for all other partitions on a dual- or multi-disk setup with RAID 5, RAID 6 and RAID 10 being further options for the swap device. The 2nd partition doesn't make use of btrfs RAID due to limitations of SystemRescue . four disks three disks two disks single disk","title":"1.4. Disk Layout"},{"location":"#15-luks-key-slots","text":"On the \"rescue\" partition, LUKS key slots are set as follows: 0: Rescue password On all other LUKS volumes, LUKS key slots are set as follows: 0: Fallback password for emergency 1: Measured Boot Option A: TPM 2.0 with optional pin to unlock with systemd-cryptenroll Option B: Shamir Secret Sharing combining TPM 2.0 and Tang pin ( Tang project ) to automatically unlock with Clevis","title":"1.5. LUKS Key Slots"},{"location":"bootup_setup/","text":"8.1. Basic Configuration \u00b6 Setup /etc/fstab : SWAP_UUID = \" $( blkid -s UUID -o value /mapperSwap ) \" && \\ SYSTEM_UUID = \" $( blkid -s UUID -o value /mapperSystem ) \" && \\ echo \"\" >> /etc/fstab && \\ echo \" $(while read -r i ; do echo \"UUID= $( blkid -s UUID -o value \" $i \" ) ${ i /devE/boot \\/ e } vfat noatime,dmask=0022,fmask=0133 0 0\" done < < ( find /devEfi* -maxdepth 0 ) ) UUID= ${ SWAP_UUID } none swap sw 0 0 UUID= ${ SYSTEM_UUID } / btrfs noatime,subvol=@root 0 0 UUID= ${ SYSTEM_UUID } /home btrfs noatime,subvol=@home 0 0 UUID= ${ SYSTEM_UUID } /var/cache/binpkgs btrfs noatime,subvol=@binpkgs 0 0 UUID= ${ SYSTEM_UUID } /var/cache/distfiles btrfs noatime,subvol=@distfiles 0 0 UUID= ${ SYSTEM_UUID } /var/db/repos/gentoo btrfs noatime,subvol=@ebuilds 0 0 UUID= ${ SYSTEM_UUID } /var/tmp btrfs noatime,subvol=@var_tmp 0 0 \" | column -o \" \" -t >> /etc/fstab && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup /etc/hosts (copy&paste one after the other): # Set the hostname of your choice my_hostname = \"micro\" rsync -a /etc/hosts /etc/._cfg0000_hosts && \\ sed -i \"s/localhost $ /localhost ${ my_hostname } /\" /etc/._cfg0000_hosts && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Disable \"magic SysRq\" for security sake : echo \"kernel.sysrq = 0\" > /etc/sysctl.d/99sysrq.conf (Optional) Install miscellaneous tools: emerge -at app-misc/screen app-portage/gentoolkit 8.2. systemd Preparation \u00b6 Apply systemd useflags: touch /etc/sysctl.conf && \\ # add LUKS volume and systemd-boot support echo \"sys-apps/systemd cryptsetup gnuefi\" >> /etc/portage/package.use/main && \\ emerge -atuDN @world Do some initial configuration : systemd-firstboot --prompt --setup-machine-id If you don't plan to keep your setup slim for the later SELinux setup , the use of preset files may be s.th. to consider: Most services are disabled when systemd is first installed. A \"preset\" file is provided, and may be used to enable a reasonable set of default services. ( source ) systemctl preset-all # or systemctl preset-all --preset-mode = enable-only 8.3. Secure Boot \u00b6 Warnings on OptionROM While using sbctl, take warnings such as the following serious and make sure to understand the implications: Could not find any TPM Eventlog in the system. This means we do not know if there is any OptionROM present on the system. etc. Please read the FAQ for more information: https://github.com/Foxboron/sbctl/wiki/FAQ#option-rom In order to add your custom keys, \"setup mode\" must have been enabled in your \"UEFI Firmware Settings\" before booting into SystemRescue. But, you can install secure boot files later on if you missed enabling \"setup mode\". In the following, however, you have to generate secure boot files either way. Install \"app-crypt/sbctl\": emerge -at app-crypt/sbctl Create and enroll secure boot files ( link ): \u276f sbctl status Installed: \u2717 sbctl is not installed Setup Mode: \u2717 Enabled Secure Boot: \u2717 Disabled \u276f sbctl create-keys Created Owner UUID 4cdeb60c-d2ce-4ed9-af89-2b659c21f6e4 Creating secure boot keys...\u2713 Secure boot keys created! \u276f sbctl enroll-keys Enrolling keys to EFI variables...\u2713 Enrolled keys to the EFI variables! \u276f sbctl status Installed: \u2713 sbctl is installed Owner GUID: 4cdeb60c-d2ce-4ed9-af89-2b659c21f6e4 Setup Mode: \u2713 Disabled Secure Boot: \u2717 Disabled","title":"8. Bootup Setup"},{"location":"bootup_setup/#81-basic-configuration","text":"Setup /etc/fstab : SWAP_UUID = \" $( blkid -s UUID -o value /mapperSwap ) \" && \\ SYSTEM_UUID = \" $( blkid -s UUID -o value /mapperSystem ) \" && \\ echo \"\" >> /etc/fstab && \\ echo \" $(while read -r i ; do echo \"UUID= $( blkid -s UUID -o value \" $i \" ) ${ i /devE/boot \\/ e } vfat noatime,dmask=0022,fmask=0133 0 0\" done < < ( find /devEfi* -maxdepth 0 ) ) UUID= ${ SWAP_UUID } none swap sw 0 0 UUID= ${ SYSTEM_UUID } / btrfs noatime,subvol=@root 0 0 UUID= ${ SYSTEM_UUID } /home btrfs noatime,subvol=@home 0 0 UUID= ${ SYSTEM_UUID } /var/cache/binpkgs btrfs noatime,subvol=@binpkgs 0 0 UUID= ${ SYSTEM_UUID } /var/cache/distfiles btrfs noatime,subvol=@distfiles 0 0 UUID= ${ SYSTEM_UUID } /var/db/repos/gentoo btrfs noatime,subvol=@ebuilds 0 0 UUID= ${ SYSTEM_UUID } /var/tmp btrfs noatime,subvol=@var_tmp 0 0 \" | column -o \" \" -t >> /etc/fstab && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup /etc/hosts (copy&paste one after the other): # Set the hostname of your choice my_hostname = \"micro\" rsync -a /etc/hosts /etc/._cfg0000_hosts && \\ sed -i \"s/localhost $ /localhost ${ my_hostname } /\" /etc/._cfg0000_hosts && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Disable \"magic SysRq\" for security sake : echo \"kernel.sysrq = 0\" > /etc/sysctl.d/99sysrq.conf (Optional) Install miscellaneous tools: emerge -at app-misc/screen app-portage/gentoolkit","title":"8.1. Basic Configuration"},{"location":"bootup_setup/#82-systemd-preparation","text":"Apply systemd useflags: touch /etc/sysctl.conf && \\ # add LUKS volume and systemd-boot support echo \"sys-apps/systemd cryptsetup gnuefi\" >> /etc/portage/package.use/main && \\ emerge -atuDN @world Do some initial configuration : systemd-firstboot --prompt --setup-machine-id If you don't plan to keep your setup slim for the later SELinux setup , the use of preset files may be s.th. to consider: Most services are disabled when systemd is first installed. A \"preset\" file is provided, and may be used to enable a reasonable set of default services. ( source ) systemctl preset-all # or systemctl preset-all --preset-mode = enable-only","title":"8.2. systemd Preparation"},{"location":"bootup_setup/#83-secure-boot","text":"Warnings on OptionROM While using sbctl, take warnings such as the following serious and make sure to understand the implications: Could not find any TPM Eventlog in the system. This means we do not know if there is any OptionROM present on the system. etc. Please read the FAQ for more information: https://github.com/Foxboron/sbctl/wiki/FAQ#option-rom In order to add your custom keys, \"setup mode\" must have been enabled in your \"UEFI Firmware Settings\" before booting into SystemRescue. But, you can install secure boot files later on if you missed enabling \"setup mode\". In the following, however, you have to generate secure boot files either way. Install \"app-crypt/sbctl\": emerge -at app-crypt/sbctl Create and enroll secure boot files ( link ): \u276f sbctl status Installed: \u2717 sbctl is not installed Setup Mode: \u2717 Enabled Secure Boot: \u2717 Disabled \u276f sbctl create-keys Created Owner UUID 4cdeb60c-d2ce-4ed9-af89-2b659c21f6e4 Creating secure boot keys...\u2713 Secure boot keys created! \u276f sbctl enroll-keys Enrolling keys to EFI variables...\u2713 Enrolled keys to the EFI variables! \u276f sbctl status Installed: \u2713 sbctl is installed Owner GUID: 4cdeb60c-d2ce-4ed9-af89-2b659c21f6e4 Setup Mode: \u2713 Disabled Secure Boot: \u2717 Disabled","title":"8.3. Secure Boot"},{"location":"chrooting/","text":"Setup the /etc/resolv.conf file: cp --dereference /etc/resolv.conf /mnt/gentoo/etc/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup ~/.bashrc : rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /mnt/gentoo/etc/skel/.bash* /mnt/gentoo/root/ && \\ rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rwX,go = /mnt/gentoo/etc/skel/.ssh /mnt/gentoo/root/ && \\ echo -e 'alias cp=\"cp -i\"\\nalias mv=\"mv -i\"\\nalias rm=\"rm -i\"' >> /mnt/gentoo/root/.bash_aliases && \\ echo 'source \"${HOME}/.bash_aliases\" # Raise an alert if something is wrong with btrfs or mdadm if { [[ -f /proc/mdstat ]] && grep -q \"\\[[U_]*_[U_]*\\]\" /proc/mdstat; } || \\ [[ $(find /sys/fs/btrfs -type f -name \"error_stats\" -exec awk ' \\' '{sum += $2} END {print sum}' \\' ' {} +) -ne 0 ]]; then echo ' \\' ' _________________ < Something smells! > ----------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || ' \\' ' fi' >> /mnt/gentoo/root/.bashrc && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Take care of localisation : echo \"C.UTF-8 UTF-8 de_DE.UTF-8 UTF-8 en_US.UTF-8 UTF-8\" >> /mnt/gentoo/etc/locale.gen && \\ echo 'LANG=\"de_DE.UTF-8\" LC_COLLATE=\"C.UTF-8\" LC_MESSAGES=\"en_US.UTF-8\"' > /mnt/gentoo/etc/env.d/02locale && \\ chroot /mnt/gentoo /bin/bash -c \"source /etc/profile && locale-gen\" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup MAKEOPTS : ram_size = \" $( dmidecode -t memory | grep -Pio \"^[[:space:]]Size:[[:space:]]+\\K[0-9]*(?=[[:space:]]*GB $ )\" | paste -d '+' -s - | bc ) \" && \\ number_cores = \" $( grep -cE \"^processor[[:space:]]+:[[:space:]]+[0-9]+ $ \" /proc/cpuinfo ) \" && \\ [[ $(( number_cores*2 )) -le ${ ram_size } ]] && jobs = \" ${ number_cores } \" || jobs = \" $( bc <<< \" ${ ram_size } / 2\" ) \" && \\ echo -e \"\\nMAKEOPTS=\\\"-j ${ jobs } \\\"\" >> /mnt/gentoo/etc/portage/make.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Chroot (copy&paste one after the other): chroot /mnt/gentoo /bin/bash source /etc/profile su - env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \"","title":"5. Chrooting"},{"location":"cleanup_and_reboot/","text":"Before rebooting, fetch \"net-firewall/nftables\" to be able to setup the firewall before connecting to the network with Gentoo Linux for the first time: emerge --fetchonly net-firewall/nftables Configure the network connection (copy&paste one after the other): echo \"\\ [Match] Name=enp1s0 [Network] Address=192.168.10.2/24 Gateway=192.168.10.1 # https://wiki.archlinux.org/title/IPv6#systemd-networkd_3 LinkLocalAddressing=no IPv6AcceptRA=no\\ \" >> /etc/systemd/network/50-static.network systemctl --no-reload enable systemd-networkd.service Setup systemd-resolved for DNS (copy&paste one after the other): # https://wiki.gentoo.org/wiki/Resolv.conf # https://wiki.archlinux.org/title/systemd-resolved ln -rsf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf rsync -av /etc/systemd/resolved.conf /etc/systemd/._cfg0000_resolved.conf # https://www.kuketz-blog.de/empfehlungsecke/#dns sed -i \\ -e 's/#DNS=.*/DNS=2001:678:e68:f000::#dot.ffmuc.net 2001:678:ed0:f000::#dot.ffmuc.net 5.1.66.255#dot.ffmuc.net 185.150.99.255#dot.ffmuc.net/' \\ -e 's/#FallbackDNS=.*/FallbackDNS=2a01:4f8:251:554::2#dns3.digitalcourage.de 5.9.164.112#dns3.digitalcourage.de/' \\ -e 's/#Domains=.*/Domains=~./' \\ -e 's/#DNSSEC=.*/DNSSEC=true/' \\ -e 's/#DNSOverTLS=.*/DNSOverTLS=true/' \\ /etc/systemd/._cfg0000_resolved.conf systemctl --no-reload enable systemd-resolved.service After the reboot, you can test DNS resolving ( link ) and check resolvectl status output. Cleanup obsolete installation files and symlinks to devices created by \"disk.sh\" : rm -fv /stage3-* /portage-latest.tar.xz* /devEfi* /devRescue /devSystem* /devSwap* /mapperRescue /mapperSwap /mapperSystem && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Exit and reboot (copy&paste one after the other): [[ -f /portage-latest.tar.xz ]] && exit [[ -f /portage-latest.tar.xz ]] && exit [[ -f /portage-latest.tar.xz ]] && exit cd umount -l /mnt/gentoo/dev { /shm,/pts, } umount -R /mnt/gentoo reboot","title":"11. Cleanup And Reboot"},{"location":"desktop_profiles/","text":"At this point, you can consider the switch to a desktop profile: non-SELinux profile SELinux profile eselect profile set duxsco:hardened-systemd-desktop && \\ emerge -atuDN @world eselect profile set duxsco:hardened-systemd-desktop-selinux && \\ emerge -atuDN @world","title":"15. Desktop profiles (optional)"},{"location":"disk_setup/","text":"3.1. Wiping Disks \u00b6 disk.sh expects the disks, where you want to install Gentoo Linux on, to be completely empty. If that's not the case continue reading. Otherwise, continue with 3.2. Partitioning And Formating . If you use SSD(s) I recommend a Secure Erase . Alternatively, you can do a fast wipe the following way given that no LUKS, MDADM, SWAP etc. device is open on the disk (copy&paste one after the other): # Change disk name to the one you want to wipe disk = \"/dev/sda\" while read -r i ; do read -r -p \"Do you want to wipe \\\" $i \\\"? Type uppercase \\\"yes\\\" to confirm. \" wipe if [[ ${ wipe } == YES ]] ; then wipefs -a \" $i \" fi done < < ( lsblk -npo kname \" ${ disk } \" | grep \"^ ${ disk } \" | sort -r ) Tip If you have confidential data stored in a non-encrypted way on HDD(s) and don't want to risk the data landing in foreign hands I recommend the use of something like dd , e.g. https://wiki.archlinux.org/title/Securely_wipe_disk ! 3.2. Partitioning And Formating \u00b6 Prepare the disks (copy&paste one after the other): # list devices fdisk -l # lookup all options bash /tmp/disk.sh -h # disable bash history set +o history # adjust to your liking bash /tmp/disk.sh -f fallbackfallback -r rescuerescue -d \"/dev/sda /dev/sdb etc.\" -s 12 # enable bash history set -o history Info disk.sh creates the user \"meh\" which will be used later on to act as non-root. 3.3. /mnt/gentoo Content \u00b6 After executing \"disk.sh\", the btrfs subvolume \"@root\" mounted by \"disk.sh\" at \"/mnt/gentoo/\" should contain: four disks three disks two disks single disk 3.4. Tarball Extraction \u00b6 Info A recent stage3-amd64-systemd-*.tar.xz file was downloaded and verified by fetch_files.sh which itself was called by disk.sh . If you work on another architecture, download the correct stage3 tarball (recommended: stage-<architecture>-systemd-<timestamp>.tar.xz and stage-<architecture>-systemd-<timestamp>.tar.xz.asc ) manually and adjust below commands accordingly. Later on, an optional switch to the custom profile hardened-systemd and hardened-systemd-selinux both of which making use of merged-usr will be done, requiring modifications of those custom profiles if you use a stage3 tarball other than the ones previously recommended. Extract the stage3 tarball and copy custom files: tar -C /mnt/gentoo/ -xpvf /mnt/gentoo/stage3-*.tar.xz --xattrs-include = '*.*' --numeric-owner && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rwx,go = r /tmp/firewall.nft /mnt/gentoo/usr/local/sbin/ && \\ rsync -a /tmp/portage_hook_kernel /mnt/gentoo/root/ && \\ mkdir -p /mnt/gentoo/etc/gentoo-installation && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Extract the portage tarball ( based on archived old handbook ): mkdir /mnt/gentoo/var/db/repos/gentoo && \\ touch /mnt/gentoo/var/db/repos/gentoo/.keep && \\ mount -o noatime,subvol = @ebuilds /mnt/gentoo/mapperSystem /mnt/gentoo/var/db/repos/gentoo && \\ tar --transform 's#^portage/#gentoo/#' --transform 's#^portage$#gentoo#' -C /mnt/gentoo/var/db/repos/ -xvpJf /mnt/gentoo/portage-latest.tar.xz && \\ rsync -av --numeric-ids --chown = 250 :250 /tmp/overlay/duxsco /mnt/gentoo/var/db/repos/ && \\ mkdir /mnt/gentoo/etc/portage/repos.conf && \\ echo '[duxsco] location = /var/db/repos/duxsco auto-sync = false' > /mnt/gentoo/etc/portage/repos.conf/duxsco.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 3.5. Mounting \u00b6 Mount filesystems for the later chroot to work: # https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#Mounting_the_root_partition mount -t tmpfs -o noatime,nodev,nosuid,mode = 1777 ,uid = root,gid = root tmpfs /mnt/gentoo/tmp && \\ # https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#Mounting_the_necessary_filesystems mount --types proc /proc /mnt/gentoo/proc && \\ mount --rbind /sys /mnt/gentoo/sys && \\ mount --make-rslave /mnt/gentoo/sys && \\ mount --rbind /dev /mnt/gentoo/dev && \\ mount --make-rslave /mnt/gentoo/dev && \\ mount --bind /run /mnt/gentoo/run && \\ mount --make-slave /mnt/gentoo/run && \\ # I put /home, /var/cache/binpkgs, /var/cache/distfiles and /var/tmp # on separate btrfs subvolumes to keep backups separate. mount -o noatime,subvol = @home /mnt/gentoo/mapperSystem /mnt/gentoo/home && \\ # https://wiki.gentoo.org/wiki//var/cache/binpkgs # https://wiki.gentoo.org/wiki/Binary_package_guide touch /mnt/gentoo/var/cache/binpkgs/.keep && \\ mount -o noatime,subvol = @binpkgs /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/binpkgs && \\ # https://wiki.gentoo.org/wiki//var/cache/distfiles # https://wiki.gentoo.org/wiki/DISTDIR touch /mnt/gentoo/var/cache/distfiles/.keep && \\ mount -o noatime,subvol = @distfiles /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/distfiles && \\ # https://wiki.gentoo.org/wiki/Portage_TMPDIR_on_tmpfs touch /mnt/gentoo/var/tmp/.keep && \\ mount -o noatime,subvol = @var_tmp /mnt/gentoo/mapperSystem /mnt/gentoo/var/tmp && \\ chmod 1777 /mnt/gentoo/var/tmp && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"3. Disk Setup"},{"location":"disk_setup/#31-wiping-disks","text":"disk.sh expects the disks, where you want to install Gentoo Linux on, to be completely empty. If that's not the case continue reading. Otherwise, continue with 3.2. Partitioning And Formating . If you use SSD(s) I recommend a Secure Erase . Alternatively, you can do a fast wipe the following way given that no LUKS, MDADM, SWAP etc. device is open on the disk (copy&paste one after the other): # Change disk name to the one you want to wipe disk = \"/dev/sda\" while read -r i ; do read -r -p \"Do you want to wipe \\\" $i \\\"? Type uppercase \\\"yes\\\" to confirm. \" wipe if [[ ${ wipe } == YES ]] ; then wipefs -a \" $i \" fi done < < ( lsblk -npo kname \" ${ disk } \" | grep \"^ ${ disk } \" | sort -r ) Tip If you have confidential data stored in a non-encrypted way on HDD(s) and don't want to risk the data landing in foreign hands I recommend the use of something like dd , e.g. https://wiki.archlinux.org/title/Securely_wipe_disk !","title":"3.1. Wiping Disks"},{"location":"disk_setup/#32-partitioning-and-formating","text":"Prepare the disks (copy&paste one after the other): # list devices fdisk -l # lookup all options bash /tmp/disk.sh -h # disable bash history set +o history # adjust to your liking bash /tmp/disk.sh -f fallbackfallback -r rescuerescue -d \"/dev/sda /dev/sdb etc.\" -s 12 # enable bash history set -o history Info disk.sh creates the user \"meh\" which will be used later on to act as non-root.","title":"3.2. Partitioning And Formating"},{"location":"disk_setup/#33-mntgentoo-content","text":"After executing \"disk.sh\", the btrfs subvolume \"@root\" mounted by \"disk.sh\" at \"/mnt/gentoo/\" should contain: four disks three disks two disks single disk","title":"3.3. /mnt/gentoo Content"},{"location":"disk_setup/#34-tarball-extraction","text":"Info A recent stage3-amd64-systemd-*.tar.xz file was downloaded and verified by fetch_files.sh which itself was called by disk.sh . If you work on another architecture, download the correct stage3 tarball (recommended: stage-<architecture>-systemd-<timestamp>.tar.xz and stage-<architecture>-systemd-<timestamp>.tar.xz.asc ) manually and adjust below commands accordingly. Later on, an optional switch to the custom profile hardened-systemd and hardened-systemd-selinux both of which making use of merged-usr will be done, requiring modifications of those custom profiles if you use a stage3 tarball other than the ones previously recommended. Extract the stage3 tarball and copy custom files: tar -C /mnt/gentoo/ -xpvf /mnt/gentoo/stage3-*.tar.xz --xattrs-include = '*.*' --numeric-owner && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rwx,go = r /tmp/firewall.nft /mnt/gentoo/usr/local/sbin/ && \\ rsync -a /tmp/portage_hook_kernel /mnt/gentoo/root/ && \\ mkdir -p /mnt/gentoo/etc/gentoo-installation && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Extract the portage tarball ( based on archived old handbook ): mkdir /mnt/gentoo/var/db/repos/gentoo && \\ touch /mnt/gentoo/var/db/repos/gentoo/.keep && \\ mount -o noatime,subvol = @ebuilds /mnt/gentoo/mapperSystem /mnt/gentoo/var/db/repos/gentoo && \\ tar --transform 's#^portage/#gentoo/#' --transform 's#^portage$#gentoo#' -C /mnt/gentoo/var/db/repos/ -xvpJf /mnt/gentoo/portage-latest.tar.xz && \\ rsync -av --numeric-ids --chown = 250 :250 /tmp/overlay/duxsco /mnt/gentoo/var/db/repos/ && \\ mkdir /mnt/gentoo/etc/portage/repos.conf && \\ echo '[duxsco] location = /var/db/repos/duxsco auto-sync = false' > /mnt/gentoo/etc/portage/repos.conf/duxsco.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"3.4. Tarball Extraction"},{"location":"disk_setup/#35-mounting","text":"Mount filesystems for the later chroot to work: # https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#Mounting_the_root_partition mount -t tmpfs -o noatime,nodev,nosuid,mode = 1777 ,uid = root,gid = root tmpfs /mnt/gentoo/tmp && \\ # https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#Mounting_the_necessary_filesystems mount --types proc /proc /mnt/gentoo/proc && \\ mount --rbind /sys /mnt/gentoo/sys && \\ mount --make-rslave /mnt/gentoo/sys && \\ mount --rbind /dev /mnt/gentoo/dev && \\ mount --make-rslave /mnt/gentoo/dev && \\ mount --bind /run /mnt/gentoo/run && \\ mount --make-slave /mnt/gentoo/run && \\ # I put /home, /var/cache/binpkgs, /var/cache/distfiles and /var/tmp # on separate btrfs subvolumes to keep backups separate. mount -o noatime,subvol = @home /mnt/gentoo/mapperSystem /mnt/gentoo/home && \\ # https://wiki.gentoo.org/wiki//var/cache/binpkgs # https://wiki.gentoo.org/wiki/Binary_package_guide touch /mnt/gentoo/var/cache/binpkgs/.keep && \\ mount -o noatime,subvol = @binpkgs /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/binpkgs && \\ # https://wiki.gentoo.org/wiki//var/cache/distfiles # https://wiki.gentoo.org/wiki/DISTDIR touch /mnt/gentoo/var/cache/distfiles/.keep && \\ mount -o noatime,subvol = @distfiles /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/distfiles && \\ # https://wiki.gentoo.org/wiki/Portage_TMPDIR_on_tmpfs touch /mnt/gentoo/var/tmp/.keep && \\ mount -o noatime,subvol = @var_tmp /mnt/gentoo/mapperSystem /mnt/gentoo/var/tmp && \\ chmod 1777 /mnt/gentoo/var/tmp && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"3.5. Mounting"},{"location":"live-cd_environment/","text":"In the following, I am using SystemRescue , not the official Gentoo Linux installation media , in order to make use of its capability to create custom installation media and setup the \"rescue\" partition with it's chroot.sh script . If not otherwise stated, commands are executed as \"root\" on the remote machine where Gentoo Linux needs to be installed, in the beginning via TTY, later on over SSH. Most of the time, you can copy&paste the whole codeblock, but understand the commands first and make adjustments (e.g. IP address, disk names) if required. 2.1. (Optional) Virtual (Testing) Environment \u00b6 If you want to use a virtual machine for the upcoming setup either to test things out or just to be a bit more secure, you have to take some preliminary measures. The easiest way to get started is the use of the Virtual Machine Manager with QEMU : 1. 2. 3. 4. 5. 6. 7. 8. 9. 10. 11. 12. Open the Virtual Machine Manager: Create a new virtual machine: Install from a local medium: Select the SystemRescue ISO and OS variant \"Gentoo Linux\": Select an appropiate amount of CPU cores and memory: Enable storage and select a sufficiently sized disk: Name your virtual machine, make sure to set the checkmark at \"Customize configuration before install\" and setup your network device: Select an UEFI x86_64 firmware with support for secure boot and click on \"Add Hardware\" for the next step: Select \"TPM\", configure as shown and click on \"Finish\": A new \"TPM v2.0\" device should be listed. Click on \"Begin Installation\" for the next step: Select an appropiate \"Boot SystemRescue [...]\" boot option and press Enter : The virtual machine should have bootet into SystemRescue: 2.2. Live-CD Setup \u00b6 Boot into SystemRescue and set the correct keyboard layout : loadkeys de-latin1-nodeadkeys (Optional) Start Xfce (copy&paste one after the other): startx # Open up a terminal in Xfce and set the keyboard layout: setxkbmap de Make sure you booted with UEFI: [ -d /sys/firmware/efi ] && echo UEFI || echo BIOS Disable \"magic SysRq\" for security sake : sysctl -w kernel.sysrq = 0 Using screen You can detach from screen's session with Ctrl + A + D and reattach with screen -d -r install . Scrolling works with Ctrl + A + Esc followed by Up / Down / Page Up / Page Down . You can exit \"scroll mode\" with Esc . Start a screen session to better cope with networks disconnects. Alternatively, you can use tmux . screen -S install If no automatic network setup has been done via DHCP, you have to use nmtui (recommended over nmcli ). On Xfce, you have the option to use nm-applet in addition. nmtui Insert iptables rules at the correct place for SystemRescue to accept SSH connection requests: iptables -I INPUT 4 -p tcp --dport 22 -j ACCEPT -m conntrack --ctstate NEW Set a root password: passwd root Print out fingerprints to be able to double check later on upon initial SSH connection to the SystemRescue system: find /etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; Execute following \"rsync\" and \"ssh\" commands on your local machine from within the checked out \"gentoo-installation\" repo (copy&paste one after the other): # Copy installation files to remote machine. Don't forget to set the correct IP. rsync -e \"ssh -o VisualHostKey=yes\" -av --numeric-ids --chown = 0 :0 { bin/ { portage_hook_kernel,disk.sh,fetch_files.sh,firewall.nft,firewall.sh } ,overlay } root@XXX:/tmp/ # From local machine, login into the remote machine ssh root@... Resume \"screen\": screen -d -r install (Optional) Lock the screen on the remote machine by typing the following command on its keyboard ( not over SSH ) (copy&paste one after the other): # Execute \"vlock\" without any flags first. vlock # Try to relogin. # If relogin doesn't work: # 1. Switch TTY: <ctrl>+<alt>+<F2> # 2. Set a correct password: passwd root # 3. Switch to previous TTY: <ctrl>+<alt>+<F1> # 4. Try to relogin again. # If relogin succeeds execute vlock with flag \"-a\" to lock all TTY. vlock -a On bare-metal, set the date and time if the current system time is not correct: ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ # replace \"MMDDhhmmYYYY\" with UTC time date --utc MMDDhhmmYYYY On bare-metal, update the hardware clock : ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ hwclock --systohc --utc","title":"2. Live-CD Environment"},{"location":"live-cd_environment/#21-optional-virtual-testing-environment","text":"If you want to use a virtual machine for the upcoming setup either to test things out or just to be a bit more secure, you have to take some preliminary measures. The easiest way to get started is the use of the Virtual Machine Manager with QEMU : 1. 2. 3. 4. 5. 6. 7. 8. 9. 10. 11. 12. Open the Virtual Machine Manager: Create a new virtual machine: Install from a local medium: Select the SystemRescue ISO and OS variant \"Gentoo Linux\": Select an appropiate amount of CPU cores and memory: Enable storage and select a sufficiently sized disk: Name your virtual machine, make sure to set the checkmark at \"Customize configuration before install\" and setup your network device: Select an UEFI x86_64 firmware with support for secure boot and click on \"Add Hardware\" for the next step: Select \"TPM\", configure as shown and click on \"Finish\": A new \"TPM v2.0\" device should be listed. Click on \"Begin Installation\" for the next step: Select an appropiate \"Boot SystemRescue [...]\" boot option and press Enter : The virtual machine should have bootet into SystemRescue:","title":"2.1. (Optional) Virtual (Testing) Environment"},{"location":"live-cd_environment/#22-live-cd-setup","text":"Boot into SystemRescue and set the correct keyboard layout : loadkeys de-latin1-nodeadkeys (Optional) Start Xfce (copy&paste one after the other): startx # Open up a terminal in Xfce and set the keyboard layout: setxkbmap de Make sure you booted with UEFI: [ -d /sys/firmware/efi ] && echo UEFI || echo BIOS Disable \"magic SysRq\" for security sake : sysctl -w kernel.sysrq = 0 Using screen You can detach from screen's session with Ctrl + A + D and reattach with screen -d -r install . Scrolling works with Ctrl + A + Esc followed by Up / Down / Page Up / Page Down . You can exit \"scroll mode\" with Esc . Start a screen session to better cope with networks disconnects. Alternatively, you can use tmux . screen -S install If no automatic network setup has been done via DHCP, you have to use nmtui (recommended over nmcli ). On Xfce, you have the option to use nm-applet in addition. nmtui Insert iptables rules at the correct place for SystemRescue to accept SSH connection requests: iptables -I INPUT 4 -p tcp --dport 22 -j ACCEPT -m conntrack --ctstate NEW Set a root password: passwd root Print out fingerprints to be able to double check later on upon initial SSH connection to the SystemRescue system: find /etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; Execute following \"rsync\" and \"ssh\" commands on your local machine from within the checked out \"gentoo-installation\" repo (copy&paste one after the other): # Copy installation files to remote machine. Don't forget to set the correct IP. rsync -e \"ssh -o VisualHostKey=yes\" -av --numeric-ids --chown = 0 :0 { bin/ { portage_hook_kernel,disk.sh,fetch_files.sh,firewall.nft,firewall.sh } ,overlay } root@XXX:/tmp/ # From local machine, login into the remote machine ssh root@... Resume \"screen\": screen -d -r install (Optional) Lock the screen on the remote machine by typing the following command on its keyboard ( not over SSH ) (copy&paste one after the other): # Execute \"vlock\" without any flags first. vlock # Try to relogin. # If relogin doesn't work: # 1. Switch TTY: <ctrl>+<alt>+<F2> # 2. Set a correct password: passwd root # 3. Switch to previous TTY: <ctrl>+<alt>+<F1> # 4. Try to relogin again. # If relogin succeeds execute vlock with flag \"-a\" to lock all TTY. vlock -a On bare-metal, set the date and time if the current system time is not correct: ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ # replace \"MMDDhhmmYYYY\" with UTC time date --utc MMDDhhmmYYYY On bare-metal, update the hardware clock : ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ hwclock --systohc --utc","title":"2.2. Live-CD Setup"},{"location":"non-root_user/","text":"7.1. Account Creation \u00b6 Create a non-root user with \"wheel\" group membership and thus the privilege to use \"sudo\" : useradd -m -G wheel -s /bin/bash david && \\ chmod u = rwx,og = /home/david && \\ echo -e 'alias cp=\"cp -i\"\\nalias mv=\"mv -i\"\\nalias rm=\"rm -i\"' >> /home/david/.bash_aliases && \\ chown david:david /home/david/.bash_aliases && \\ echo 'source \"${HOME}/.bash_aliases\"' >> /home/david/.bashrc && \\ passwd david 7.2. Access Control \u00b6 Setup app-admin/sudo : echo \"app-admin/sudo -sendmail\" >> /etc/portage/package.use/main && \\ emerge app-admin/sudo && \\ { [[ -d /etc/sudoers.d ]] || mkdir -m u = rwx,g = rx,o = /etc/sudoers.d ; } && \\ echo \"%wheel ALL=(ALL) ALL\" | EDITOR = \"tee\" visudo -f /etc/sudoers.d/wheel && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup SSH client config: echo \"AddKeysToAgent no KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com HashKnownHosts no StrictHostKeyChecking ask VisualHostKey yes\" > /home/david/.ssh/config && \\ chown david:david /home/david/.ssh/config && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 7.3. ~/.bashrc and chroot \u00b6 Add the following to \"/root/.bashrc\" for chroot.sh to work: echo ' # Use fish in place of bash # keep this line at the bottom of ~/.bashrc if [[ -z ${chrooted} ]]; then if [[ -x /bin/fish ]]; then SHELL=/bin/fish exec /bin/fish fi elif [[ -z ${chrooted_su} ]]; then export chrooted_su=true source /etc/profile && su --login --whitelist-environment=chrooted,chrooted_su else env-update && source /etc/profile && export PS1=\"(chroot) $PS1\" fi' >> /root/.bashrc 7.4. (Optional) VIM Editor \u00b6 Setup app-editors/vim : emerge -at app-editors/vim app-vim/molokai && \\ rsync -a /etc/portage/make.conf /etc/portage/._cfg0000_make.conf && \\ sed -i 's/^USE=\"\\([^\"]*\\)\"$/USE=\"\\1 vim-syntax\"/' /etc/portage/._cfg0000_make.conf && \\ echo \"filetype plugin on filetype indent on set number set paste syntax on colorscheme molokai if &diff colorscheme murphy endif\" | tee -a /root/.vimrc >> /home/david/.vimrc && \\ chown david:david /home/david/.vimrc && \\ eselect editor set vi && \\ eselect vi set vim && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 7.5. (Optional) starship, fish shell and nerd fonts \u00b6 Install app-shells/starship : # If you have insufficient ressources, you may want to execute \"emerge --oneshot dev-lang/rust-bin\" beforehand. echo \"app-shells/starship ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge app-shells/starship && \\ { [[ -d /home/david/.config ]] || mkdir --mode = 0700 /home/david/.config ; } && \\ { [[ -d /root/.config ]] || mkdir --mode = 0700 /root/.config ; } && \\ touch /home/david/.config/starship.toml && \\ chown -R david:david /home/david/.config && \\ echo '[hostname] ssh_only = false format = \"[$hostname](bold red) \" ' | tee /root/.config/starship.toml > /home/david/.config/starship.toml && \\ starship preset nerd-font-symbols | tee -a /root/.config/starship.toml >> /home/david/.config/starship.toml && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Install app-shells/fish : echo \"=dev-libs/libpcre2- $( qatom -F \"%{PVR}\" \" $( portageq best_visible / dev-libs/libpcre2 ) \" ) pcre32\" >> /etc/portage/package.use/main && \\ echo \"app-shells/fish ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge app-shells/fish && \\ rsync -a /etc/portage/make.conf /etc/portage/._cfg0000_make.conf && \\ sed -i 's/^USE=\"\\([^\"]*\\)\"$/USE=\"\\1 fish-completion\"/' /etc/portage/._cfg0000_make.conf && \\ echo ' # Use fish in place of bash # keep this line at the bottom of ~/.bashrc if [[ -x /bin/fish ]]; then SHELL=/bin/fish exec /bin/fish fi' >> /home/david/.bashrc && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup auto-completion for the fish shell (copy&paste one after the other): # root /bin/fish -c fish_update_completions # non-root su -l david -c \"/bin/fish -c fish_update_completions\" Enable aliases and starship (copy&paste one after the other): su - exit su - david exit sed -i 's/^end$/ source \"$HOME\\/.bash_aliases\"\\n starship init fish | source\\nend/' /root/.config/fish/config.fish sed -i 's/^end$/ source \"$HOME\\/.bash_aliases\"\\n starship init fish | source\\nend/' /home/david/.config/fish/config.fish Install nerd fonts : emerge media-libs/fontconfig && \\ su -l david -c \"curl --proto '=https' --tlsv1.3 -fsSL -o /tmp/FiraCode.zip https://github.com/ryanoasis/nerd-fonts/releases/download/v2.2.2/FiraCode.zip\" && \\ b2sum -c <<< \"9f8ada87945ff10d9eced99369f7c6d469f9eaf2192490623a93b2397fe5b6ee3f0df6923b59eb87e92789840a205adf53c6278e526dbeeb25d0a6d307a07b18 /tmp/FiraCode.zip\" && \\ mkdir /tmp/FiraCode && \\ unzip -d /tmp/FiraCode /tmp/FiraCode.zip && \\ rm -f /tmp/FiraCode/*Windows* /tmp/FiraCode/Fura* && \\ mkdir /usr/share/fonts/nerd-firacode && \\ rsync -a --chown = 0 :0 --chmod = a = r /tmp/FiraCode/*.ttf /usr/share/fonts/nerd-firacode/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"7. Non-Root User"},{"location":"non-root_user/#71-account-creation","text":"Create a non-root user with \"wheel\" group membership and thus the privilege to use \"sudo\" : useradd -m -G wheel -s /bin/bash david && \\ chmod u = rwx,og = /home/david && \\ echo -e 'alias cp=\"cp -i\"\\nalias mv=\"mv -i\"\\nalias rm=\"rm -i\"' >> /home/david/.bash_aliases && \\ chown david:david /home/david/.bash_aliases && \\ echo 'source \"${HOME}/.bash_aliases\"' >> /home/david/.bashrc && \\ passwd david","title":"7.1. Account Creation"},{"location":"non-root_user/#72-access-control","text":"Setup app-admin/sudo : echo \"app-admin/sudo -sendmail\" >> /etc/portage/package.use/main && \\ emerge app-admin/sudo && \\ { [[ -d /etc/sudoers.d ]] || mkdir -m u = rwx,g = rx,o = /etc/sudoers.d ; } && \\ echo \"%wheel ALL=(ALL) ALL\" | EDITOR = \"tee\" visudo -f /etc/sudoers.d/wheel && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup SSH client config: echo \"AddKeysToAgent no KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com HashKnownHosts no StrictHostKeyChecking ask VisualHostKey yes\" > /home/david/.ssh/config && \\ chown david:david /home/david/.ssh/config && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"7.2. Access Control"},{"location":"non-root_user/#73-bashrc-and-chroot","text":"Add the following to \"/root/.bashrc\" for chroot.sh to work: echo ' # Use fish in place of bash # keep this line at the bottom of ~/.bashrc if [[ -z ${chrooted} ]]; then if [[ -x /bin/fish ]]; then SHELL=/bin/fish exec /bin/fish fi elif [[ -z ${chrooted_su} ]]; then export chrooted_su=true source /etc/profile && su --login --whitelist-environment=chrooted,chrooted_su else env-update && source /etc/profile && export PS1=\"(chroot) $PS1\" fi' >> /root/.bashrc","title":"7.3. ~/.bashrc and chroot"},{"location":"non-root_user/#74-optional-vim-editor","text":"Setup app-editors/vim : emerge -at app-editors/vim app-vim/molokai && \\ rsync -a /etc/portage/make.conf /etc/portage/._cfg0000_make.conf && \\ sed -i 's/^USE=\"\\([^\"]*\\)\"$/USE=\"\\1 vim-syntax\"/' /etc/portage/._cfg0000_make.conf && \\ echo \"filetype plugin on filetype indent on set number set paste syntax on colorscheme molokai if &diff colorscheme murphy endif\" | tee -a /root/.vimrc >> /home/david/.vimrc && \\ chown david:david /home/david/.vimrc && \\ eselect editor set vi && \\ eselect vi set vim && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"7.4. (Optional) VIM Editor"},{"location":"non-root_user/#75-optional-starship-fish-shell-and-nerd-fonts","text":"Install app-shells/starship : # If you have insufficient ressources, you may want to execute \"emerge --oneshot dev-lang/rust-bin\" beforehand. echo \"app-shells/starship ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge app-shells/starship && \\ { [[ -d /home/david/.config ]] || mkdir --mode = 0700 /home/david/.config ; } && \\ { [[ -d /root/.config ]] || mkdir --mode = 0700 /root/.config ; } && \\ touch /home/david/.config/starship.toml && \\ chown -R david:david /home/david/.config && \\ echo '[hostname] ssh_only = false format = \"[$hostname](bold red) \" ' | tee /root/.config/starship.toml > /home/david/.config/starship.toml && \\ starship preset nerd-font-symbols | tee -a /root/.config/starship.toml >> /home/david/.config/starship.toml && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Install app-shells/fish : echo \"=dev-libs/libpcre2- $( qatom -F \"%{PVR}\" \" $( portageq best_visible / dev-libs/libpcre2 ) \" ) pcre32\" >> /etc/portage/package.use/main && \\ echo \"app-shells/fish ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge app-shells/fish && \\ rsync -a /etc/portage/make.conf /etc/portage/._cfg0000_make.conf && \\ sed -i 's/^USE=\"\\([^\"]*\\)\"$/USE=\"\\1 fish-completion\"/' /etc/portage/._cfg0000_make.conf && \\ echo ' # Use fish in place of bash # keep this line at the bottom of ~/.bashrc if [[ -x /bin/fish ]]; then SHELL=/bin/fish exec /bin/fish fi' >> /home/david/.bashrc && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup auto-completion for the fish shell (copy&paste one after the other): # root /bin/fish -c fish_update_completions # non-root su -l david -c \"/bin/fish -c fish_update_completions\" Enable aliases and starship (copy&paste one after the other): su - exit su - david exit sed -i 's/^end$/ source \"$HOME\\/.bash_aliases\"\\n starship init fish | source\\nend/' /root/.config/fish/config.fish sed -i 's/^end$/ source \"$HOME\\/.bash_aliases\"\\n starship init fish | source\\nend/' /home/david/.config/fish/config.fish Install nerd fonts : emerge media-libs/fontconfig && \\ su -l david -c \"curl --proto '=https' --tlsv1.3 -fsSL -o /tmp/FiraCode.zip https://github.com/ryanoasis/nerd-fonts/releases/download/v2.2.2/FiraCode.zip\" && \\ b2sum -c <<< \"9f8ada87945ff10d9eced99369f7c6d469f9eaf2192490623a93b2397fe5b6ee3f0df6923b59eb87e92789840a205adf53c6278e526dbeeb25d0a6d307a07b18 /tmp/FiraCode.zip\" && \\ mkdir /tmp/FiraCode && \\ unzip -d /tmp/FiraCode /tmp/FiraCode.zip && \\ rm -f /tmp/FiraCode/*Windows* /tmp/FiraCode/Fura* && \\ mkdir /usr/share/fonts/nerd-firacode && \\ rsync -a --chown = 0 :0 --chmod = a = r /tmp/FiraCode/*.ttf /usr/share/fonts/nerd-firacode/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"7.5. (Optional) starship, fish shell and nerd fonts"},{"location":"other_gentoo_linux_repos/","text":"https://github.com/duxsco?tab=repositories&q=gentoo-","title":"16. Other Gentoo Linux repos"},{"location":"portage_setup/","text":"Application of configuration changes Starting with this chapter, execute dispatch-conf after every codeblock where a \"._cfg0000_\" prefixed file has been created. The creation of \"._cfg0000_\" prefixed files will be highlighted in yellow. Alternatively, etc-update or cfg-update might be s.th. to consider, but I haven't tested those. Make \"dispatch-conf\" show diffs in color and use vimdiff for merging : rsync -a /etc/dispatch-conf.conf /etc/._cfg0000_dispatch-conf.conf && \\ sed -i \\ -e \"s/diff=\\\"diff -Nu '%s' '%s'\\\"/diff=\\\"diff --color=always -Nu '%s' '%s'\\\"/\" \\ -e \"s/merge=\\\"sdiff --suppress-common-lines --output='%s' '%s' '%s'\\\"/merge=\\\"vimdiff -c'saveas %s' -c next -c'setlocal noma readonly' -c prev %s %s\\\"/\" \\ /etc/._cfg0000_dispatch-conf.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 6.1. Portage Configuration \u00b6 Configure make.conf (copy&paste one after the other): rsync -av /etc/portage/make.conf /etc/portage/._cfg0000_make.conf # If you use distcc, beware of: # https://wiki.gentoo.org/wiki/Distcc#-march.3Dnative # # You could resolve \"-march=native\" with app-misc/resolve-march-native sed -i 's/COMMON_FLAGS=\"-O2 -pipe\"/COMMON_FLAGS=\"-march=native -O2 -pipe\"/' /etc/portage/._cfg0000_make.conf # https://wiki.gentoo.org/wiki/EMERGE_DEFAULT_OPTS # https://wiki.gentoo.org/wiki/Binary_package_guide#Excluding_creation_of_some_packages # # For all other flags, take a look at \"man emerge\" or # https://gitweb.gentoo.org/proj/portage.git/tree/man/emerge.1 echo 'EMERGE_DEFAULT_OPTS=\"--buildpkg --buildpkg-exclude ' \\' '*/*-bin sys-kernel/* virtual/*' \\' ' --noconfmem --with-bdeps=y --complete-graph=y\"' >> /etc/portage/._cfg0000_make.conf # https://wiki.gentoo.org/wiki/Localization/Guide#L10N # https://wiki.gentoo.org/wiki/Localization/Guide#LINGUAS echo ' L10N=\"de\" LINGUAS=\"${L10N}\"' >> /etc/portage/._cfg0000_make.conf # https://wiki.gentoo.org/wiki/GENTOO_MIRRORS # https://www.gentoo.org/downloads/mirrors/ echo ' GENTOO_MIRRORS=\"https://ftp-stud.hs-esslingen.de/pub/Mirrors/gentoo/ https://ftp.fau.de/gentoo/ https://ftp.tu-ilmenau.de/mirror/gentoo/\"' >> /etc/portage/._cfg0000_make.conf # https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Portage#Fetch_commands # # Default values from /usr/share/portage/config/make.globals are: # FETCHCOMMAND=\"wget -t 3 -T 60 --passive-ftp -O \\\"\\${DISTDIR}/\\${FILE}\\\" \\\"\\${URI}\\\"\" # RESUMECOMMAND=\"wget -c -t 3 -T 60 --passive-ftp -O \\\"\\${DISTDIR}/\\${FILE}\\\" \\\"\\${URI}\\\"\" # # File in git: https://gitweb.gentoo.org/proj/portage.git/tree/cnf/make.globals # # They are insufficient in my opinion. # Thus, I am enforcing TLSv1.2 or greater, secure TLSv1.2 cipher suites and https-only. # TLSv1.3 cipher suites are secure. Thus, I don't set \"--tls13-ciphers\". echo 'FETCHCOMMAND=\"curl --fail --silent --show-error --location --proto ' \\' '=https' \\' ' --tlsv1.2 --ciphers ' \\' 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' \\' ' --retry 2 --connect-timeout 60 -o \\\"\\${DISTDIR}/\\${FILE}\\\" \\\"\\${URI}\\\"\" RESUMECOMMAND=\"${FETCHCOMMAND} --continue-at -\"' >> /etc/portage/._cfg0000_make.conf # Some useflags I set for personal use. # Feel free to adjust as with any other codeblock. \ud83d\ude04 echo ' USE_HARDENED=\"caps pie -sslv3 -suid\" USE=\"${USE_HARDENED}\"' >> /etc/portage/._cfg0000_make.conf I prefer English manpages and ignore above L10N setting for \"sys-apps/man-pages\". Makes using Stackoverflow easier . echo \"sys-apps/man-pages -l10n_de\" >> /etc/portage/package.use/main && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Set CPU flags : emerge --oneshot app-portage/cpuid2cpuflags && \\ echo \"*/* $( cpuid2cpuflags ) \" > /etc/portage/package.use/00cpu-flags && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 6.2. (Optional) Custom Mirrors \u00b6 If you don't live in Germany, you probably should change GENTOO_MIRRORS previously set in 6.1. Portage Configuration . You can pick the mirrors from the mirror list , use mirrorselect or do as I do and select local/regional, IPv4/IPv6 dual-stack and TLSv1.3 supporting mirrors (copy&paste one after the other): # Install app-misc/yq ACCEPT_KEYWORDS = \"~amd64\" emerge --oneshot app-misc/yq # Get a list of country codes and names: curl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | xq -r '.mirrors.mirrorgroup[] | \"\\(.[\"@country\"]) \\(.[\"@countryname\"])\"' | sort -k2.2 # Choose your countries the mirrors should be located in: country = '\"AU\",\"BE\",\"BR\",\"CA\",\"CH\",\"CL\",\"CN\",\"CZ\",\"DE\",\"DK\",\"ES\",\"FR\",\"GR\",\"HK\",\"IL\",\"IT\",\"JP\",\"KR\",\"KZ\",\"LU\",\"NA\",\"NC\",\"NL\",\"PH\",\"PL\",\"PT\",\"RO\",\"RU\",\"SG\",\"SK\",\"TR\",\"TW\",\"UK\",\"US\",\"ZA\"' # Get a list of mirrors available over IPv4/IPv6 dual-stack in the countries of your choice with TLSv1.3 support while read -r i ; do if curl -fsL --proto '=https' --tlsv1.3 -I \" ${ i } \" >/dev/null ; then echo \" ${ i } \" fi done < < ( curl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | \\ xq -r \".mirrors.mirrorgroup[] | select([.\\\"@country\\\"] | inside([ ${ country } ])) | .mirror | if type==\\\"array\\\" then .[] else . end | .uri | if type==\\\"array\\\" then .[] else . end | select(.\\\"@protocol\\\" == \\\"http\\\" and .\\\"@ipv4\\\" == \\\"y\\\" and .\\\"@ipv6\\\" == \\\"y\\\" and (.\\\"#text\\\" | startswith(\\\"https://\\\"))) | .\\\"#text\\\"\" ) 6.3. Repo Syncing \u00b6 Mitigate CVE-2022-29154 among others before using \"rsync\" via \"eix-sync\": echo 'net-misc/rsync ~amd64' >> /etc/portage/package.accept_keywords/main && \\ emerge --oneshot net-misc/rsync && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" I personally prefer syncing the repo via \"eix-sync\" which is provided by app-portage/eix . But, there are some of other options : eix-sync emaint (replaced \"emerge --sync\") emerge-webrsync emerge app-portage/eix && \\ eix-sync emaint --auto sync emerge-webrsync Read Gentoo news items : eselect news list # eselect news read 1 # eselect news read 2 # etc. 6.4. (Optional) Hardened Profiles \u00b6 Desktop Profiles To make things simple, hardened desktop profiles are only considered for selection at the end of this guide in chapter 15. Desktop profiles (optional) . Switch over to the custom hardened and merged-usr profile. Additional ressources: My custom profiles Creating custom profiles Switching to a hardened profile Switching to merged-usr # install newer baselayout-2.9 due to: # https://github.com/gentoo-mirror/gentoo/commit/b607b26fff6dd73d886f2dc0afc1cf439510e509 echo \"=sys-apps/baselayout-2.9 ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ ACCEPT_KEYWORDS = \"~amd64\" emerge --oneshot sys-apps/merge-usr && \\ merge-usr && \\ eselect profile set duxsco:hardened-systemd && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ emerge --oneshot sys-devel/gcc && \\ emerge --oneshot sys-devel/binutils sys-libs/glibc && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ emerge -e @world && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"6. Portage Setup"},{"location":"portage_setup/#61-portage-configuration","text":"Configure make.conf (copy&paste one after the other): rsync -av /etc/portage/make.conf /etc/portage/._cfg0000_make.conf # If you use distcc, beware of: # https://wiki.gentoo.org/wiki/Distcc#-march.3Dnative # # You could resolve \"-march=native\" with app-misc/resolve-march-native sed -i 's/COMMON_FLAGS=\"-O2 -pipe\"/COMMON_FLAGS=\"-march=native -O2 -pipe\"/' /etc/portage/._cfg0000_make.conf # https://wiki.gentoo.org/wiki/EMERGE_DEFAULT_OPTS # https://wiki.gentoo.org/wiki/Binary_package_guide#Excluding_creation_of_some_packages # # For all other flags, take a look at \"man emerge\" or # https://gitweb.gentoo.org/proj/portage.git/tree/man/emerge.1 echo 'EMERGE_DEFAULT_OPTS=\"--buildpkg --buildpkg-exclude ' \\' '*/*-bin sys-kernel/* virtual/*' \\' ' --noconfmem --with-bdeps=y --complete-graph=y\"' >> /etc/portage/._cfg0000_make.conf # https://wiki.gentoo.org/wiki/Localization/Guide#L10N # https://wiki.gentoo.org/wiki/Localization/Guide#LINGUAS echo ' L10N=\"de\" LINGUAS=\"${L10N}\"' >> /etc/portage/._cfg0000_make.conf # https://wiki.gentoo.org/wiki/GENTOO_MIRRORS # https://www.gentoo.org/downloads/mirrors/ echo ' GENTOO_MIRRORS=\"https://ftp-stud.hs-esslingen.de/pub/Mirrors/gentoo/ https://ftp.fau.de/gentoo/ https://ftp.tu-ilmenau.de/mirror/gentoo/\"' >> /etc/portage/._cfg0000_make.conf # https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Portage#Fetch_commands # # Default values from /usr/share/portage/config/make.globals are: # FETCHCOMMAND=\"wget -t 3 -T 60 --passive-ftp -O \\\"\\${DISTDIR}/\\${FILE}\\\" \\\"\\${URI}\\\"\" # RESUMECOMMAND=\"wget -c -t 3 -T 60 --passive-ftp -O \\\"\\${DISTDIR}/\\${FILE}\\\" \\\"\\${URI}\\\"\" # # File in git: https://gitweb.gentoo.org/proj/portage.git/tree/cnf/make.globals # # They are insufficient in my opinion. # Thus, I am enforcing TLSv1.2 or greater, secure TLSv1.2 cipher suites and https-only. # TLSv1.3 cipher suites are secure. Thus, I don't set \"--tls13-ciphers\". echo 'FETCHCOMMAND=\"curl --fail --silent --show-error --location --proto ' \\' '=https' \\' ' --tlsv1.2 --ciphers ' \\' 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' \\' ' --retry 2 --connect-timeout 60 -o \\\"\\${DISTDIR}/\\${FILE}\\\" \\\"\\${URI}\\\"\" RESUMECOMMAND=\"${FETCHCOMMAND} --continue-at -\"' >> /etc/portage/._cfg0000_make.conf # Some useflags I set for personal use. # Feel free to adjust as with any other codeblock. \ud83d\ude04 echo ' USE_HARDENED=\"caps pie -sslv3 -suid\" USE=\"${USE_HARDENED}\"' >> /etc/portage/._cfg0000_make.conf I prefer English manpages and ignore above L10N setting for \"sys-apps/man-pages\". Makes using Stackoverflow easier . echo \"sys-apps/man-pages -l10n_de\" >> /etc/portage/package.use/main && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Set CPU flags : emerge --oneshot app-portage/cpuid2cpuflags && \\ echo \"*/* $( cpuid2cpuflags ) \" > /etc/portage/package.use/00cpu-flags && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"6.1. Portage Configuration"},{"location":"portage_setup/#62-optional-custom-mirrors","text":"If you don't live in Germany, you probably should change GENTOO_MIRRORS previously set in 6.1. Portage Configuration . You can pick the mirrors from the mirror list , use mirrorselect or do as I do and select local/regional, IPv4/IPv6 dual-stack and TLSv1.3 supporting mirrors (copy&paste one after the other): # Install app-misc/yq ACCEPT_KEYWORDS = \"~amd64\" emerge --oneshot app-misc/yq # Get a list of country codes and names: curl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | xq -r '.mirrors.mirrorgroup[] | \"\\(.[\"@country\"]) \\(.[\"@countryname\"])\"' | sort -k2.2 # Choose your countries the mirrors should be located in: country = '\"AU\",\"BE\",\"BR\",\"CA\",\"CH\",\"CL\",\"CN\",\"CZ\",\"DE\",\"DK\",\"ES\",\"FR\",\"GR\",\"HK\",\"IL\",\"IT\",\"JP\",\"KR\",\"KZ\",\"LU\",\"NA\",\"NC\",\"NL\",\"PH\",\"PL\",\"PT\",\"RO\",\"RU\",\"SG\",\"SK\",\"TR\",\"TW\",\"UK\",\"US\",\"ZA\"' # Get a list of mirrors available over IPv4/IPv6 dual-stack in the countries of your choice with TLSv1.3 support while read -r i ; do if curl -fsL --proto '=https' --tlsv1.3 -I \" ${ i } \" >/dev/null ; then echo \" ${ i } \" fi done < < ( curl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | \\ xq -r \".mirrors.mirrorgroup[] | select([.\\\"@country\\\"] | inside([ ${ country } ])) | .mirror | if type==\\\"array\\\" then .[] else . end | .uri | if type==\\\"array\\\" then .[] else . end | select(.\\\"@protocol\\\" == \\\"http\\\" and .\\\"@ipv4\\\" == \\\"y\\\" and .\\\"@ipv6\\\" == \\\"y\\\" and (.\\\"#text\\\" | startswith(\\\"https://\\\"))) | .\\\"#text\\\"\" )","title":"6.2. (Optional) Custom Mirrors"},{"location":"portage_setup/#63-repo-syncing","text":"Mitigate CVE-2022-29154 among others before using \"rsync\" via \"eix-sync\": echo 'net-misc/rsync ~amd64' >> /etc/portage/package.accept_keywords/main && \\ emerge --oneshot net-misc/rsync && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" I personally prefer syncing the repo via \"eix-sync\" which is provided by app-portage/eix . But, there are some of other options : eix-sync emaint (replaced \"emerge --sync\") emerge-webrsync emerge app-portage/eix && \\ eix-sync emaint --auto sync emerge-webrsync Read Gentoo news items : eselect news list # eselect news read 1 # eselect news read 2 # etc.","title":"6.3. Repo Syncing"},{"location":"portage_setup/#64-optional-hardened-profiles","text":"Desktop Profiles To make things simple, hardened desktop profiles are only considered for selection at the end of this guide in chapter 15. Desktop profiles (optional) . Switch over to the custom hardened and merged-usr profile. Additional ressources: My custom profiles Creating custom profiles Switching to a hardened profile Switching to merged-usr # install newer baselayout-2.9 due to: # https://github.com/gentoo-mirror/gentoo/commit/b607b26fff6dd73d886f2dc0afc1cf439510e509 echo \"=sys-apps/baselayout-2.9 ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ ACCEPT_KEYWORDS = \"~amd64\" emerge --oneshot sys-apps/merge-usr && \\ merge-usr && \\ eselect profile set duxsco:hardened-systemd && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ emerge --oneshot sys-devel/gcc && \\ emerge --oneshot sys-devel/binutils sys-libs/glibc && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ emerge -e @world && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"6.4. (Optional) Hardened Profiles"},{"location":"post-boot_configuration/","text":"12.1. systemd Configuration \u00b6 Some configuration needs to be done after Gentoo's systemd has been started. In the previous chapter, systemd was running, but only the instance belonging to SystemRescue. Setup localisation (copy&paste one after the other): # set your language settings export my_lang = \"de_DE.UTF-8\" export my_lc_messages = \"en_US.UTF-8\" # I prefer English messages for easier googling around. /bin/bash -c ' localectl set-locale LANG=\"${my_lang}\" LC_COLLATE=\"C.UTF-8\" LC_MESSAGES=\"${my_lc_messages}\" && \\ localectl status && \\ env-update && source /etc/profile && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Setup systemd-timesyncd (copy&paste one after the other): # set your timezone export my_timezone = \"Europe/Berlin\" # list of ntp servers: https://www.ntppool.org/zone/@ # set your (fallback) ntp servers export my_ntp_servers = \"0.de.pool.ntp.org 1.de.pool.ntp.org 2.de.pool.ntp.org 3.de.pool.ntp.org\" export my_fallback_ntp_servers = \"0.europe.pool.ntp.org 1.europe.pool.ntp.org 2.europe.pool.ntp.org 3.europe.pool.ntp.org\" /bin/bash -c ' timedatectl set-timezone ${my_timezone} && \\ if grep -q -w \"hypervisor\" <(grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo); then systemctl disable systemd-timesyncd.service && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" else rsync -av /etc/systemd/timesyncd.conf /etc/systemd/._cfg0000_timesyncd.conf && \\ sed -i -e \"s/#NTP=/NTP=${my_ntp_servers}/\" -e \"s/#FallbackNTP=.*/FallbackNTP=${my_fallback_ntp_servers}/\" /etc/systemd/._cfg0000_timesyncd.conf && \\ timedatectl set-ntp true && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" fi && \\ timedatectl && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Setup nftables with certain firewall rules : emerge net-firewall/nftables && \\ rsync -a /etc/conf.d/nftables /etc/conf.d/._cfg0000_nftables && \\ sed -i 's/^SAVE_ON_STOP=\"yes\"$/SAVE_ON_STOP=\"no\"/' /etc/conf.d/._cfg0000_nftables && \\ /usr/local/sbin/firewall.nft && \\ nft list ruleset > /var/lib/nftables/rules-save && \\ systemctl enable nftables-restore && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 12.2. Secure Boot Setup \u00b6 If \"sbctl enroll-keys\" failed in section 8.3. Secure Boot , you can import secure boot files the following way now. First, boot into the Gentoo Linux and save necessary files in \"DER\" format on ESP: /bin/bash -c ' { ! mountpoint --quiet /boot/efia && \\ mount /boot/efia || true } && \\ openssl x509 -outform der -in /usr/share/secureboot/keys/db/db.pem -out /boot/efia/db.der && \\ openssl x509 -outform der -in /usr/share/secureboot/keys/KEK/KEK.pem -out /boot/efia/KEK.der && \\ openssl x509 -outform der -in /usr/share/secureboot/keys/PK/PK.pem -out /boot/efia/PK.der && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Reboot into \"UEFI Firmware Settings\" and import \"db.der\", \"KEK.der\" and \"PK.der\" in this order. Thereafter, enable secure boot. Upon successful boot with secure boot enabled, you can delete the \".der\" files in /boot/efia . To check whether secure boot is enabled execute: \u276f sbctl status Installed: \u2713 sbctl is installed Owner GUID: 4cdeb60c-d2ce-4ed9-af89-2b659c21f6e4 Setup Mode: \u2713 Disabled Secure Boot: \u2713 Enabled (Optional) To list the installed secure boot keys/certs (copy&paste one after the other): emerge -at app-crypt/efitools efi-readvar 12.3. Measured Boot \u00b6 You have two reasonable options for measured boot on systemd: systemd-cryptenroll : I prefer this on local systems (e.g. laptops, desktop PCs) where I have access to TTY and can take care of (optional) pin prompts which are supported with systemd \u2265251. With pins, you don't have the problem of your laptop, for example, getting stolen and auto-unlocking upon boot. Furthermore, I experienced faster boot with systemd-cryptenroll than with clevis due to the use of PBKDF2 which is safe to use with the secure keys generated by systemd-cryptenroll. And, you don't have to use the \"app-crypt/clevis\" package from (unofficial) guru overlay . clevis : I prefer this on remote systems , e.g. a server in colocation, where I can take care of unlock via Shamir Secret Sharing which combines TPM 2.0 and Tang pin ( Tang project ). Use either systemd-cryptenroll or clevis in the following. 12.3.1.a) systemd-cryptenroll \u00b6 Install \"app-crypt/tpm2-tools\": emerge -av tpm2-tools If you use TPM 2.0 pins, make sure to install systemd >=252 to only have to type TPM 2.0 pins once : echo \"<sys-apps/systemd-253 ~amd64\" >> /etc/portage/package.accept_keywords/main Add support for TPM 2.0 to dracut and systemd: rsync -a /etc/portage/package.use/main /etc/portage/package.use/._cfg0000_main && \\ sed -i 's/^\\(sys-apps\\/systemd.*\\)$/\\1 tpm/' /etc/portage/package.use/._cfg0000_main && \\ echo 'add_dracutmodules+=\" tpm2-tss \"' >> /etc/dracut.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Update and make sure \"sys-apps/systemd\" is listed among the packages: emerge -atuDN @world With systemd >=252, mask certain services to be able to boot . You can unmask them after configuring them correctly. systemctl mask systemd-pcrphase-initrd.service && \\ systemctl mask systemd-pcrphase-sysinit.service && \\ systemctl mask systemd-pcrphase.service && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Make sure that TPM 2.0 devices (should only be one) are recognised: systemd-cryptenroll --tpm2-device = list Make sure that the PCRs you are going to use have a valid hash and don't consist of zeroes only: tpm2_pcrread sha256 Create new LUKS keyslots on all swap and system partitions. # I only use PCR7 as recommended in the first sentence after following table: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2 # # \"--tpm2-with-pin=yes\" is optional: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#--tpm2-with-pin=BOOL # systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sda3 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sda4 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sdb3 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sdb4 # etc. Reboot your system! 12.3.1.b) clevis \u00b6 System Requirement: Tang Server This section requires a tang server to preexist and be reachable from this system. A simple tang server setup is shown by RedHat on YouTube. I personally use AlmaLinux as tang server, but any supported system can do. If you don't have a DHCP server available to the new system, add the following network settings to the \"CMDLINE\" array variable in /etc/dracut.conf : ip=192.168.10.2::192.168.10.1:255.255.255.0:micro:enp1s0:off Install \"dev-vcs/git\": echo 'dev-vcs/git -webdav' >> /etc/portage/package.use/main && \\ emerge -at dev-vcs/git Install \"app-crypt/clevis\": echo \"app-crypt/clevis ~amd64 dev-libs/jose ~amd64 dev-libs/luksmeta ~amd64 app-crypt/tpm2-tools ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -at app-crypt/clevis Make sure that the PCRs you are going to use have a valid hash and don't consist of zeroes only: tpm2_pcrread sha256 Bind all swap and system LUKS volumes. # I only use PCR7 as recommended in the first sentence after following table: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2 # clevis luks bind -d /dev/sda3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sda4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sdb3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sdb4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' # etc. Show results: clevis luks list -d /dev/sda3 clevis luks list -d /dev/sda4 clevis luks list -d /dev/sdb3 clevis luks list -d /dev/sdb4 # etc. 12.3.2. Kernel Rebuild \u00b6 Rebuild the unified kernel image to integrate the changes for measured boot: emerge -at --oneshot \\ $( qlist -eI sys-kernel/gentoo-kernel-bin >/dev/null && echo sys-kernel/gentoo-kernel-bin ) \\ $( qlist -eI sys-kernel/gentoo-kernel >/dev/null && echo sys-kernel/gentoo-kernel ) 12.4. Package Cleanup \u00b6 Update packages and remove extraneous ones (copy&paste one after the other): emerge -atuDN @world emerge --depclean -a","title":"12. Post-Boot Configuration"},{"location":"post-boot_configuration/#121-systemd-configuration","text":"Some configuration needs to be done after Gentoo's systemd has been started. In the previous chapter, systemd was running, but only the instance belonging to SystemRescue. Setup localisation (copy&paste one after the other): # set your language settings export my_lang = \"de_DE.UTF-8\" export my_lc_messages = \"en_US.UTF-8\" # I prefer English messages for easier googling around. /bin/bash -c ' localectl set-locale LANG=\"${my_lang}\" LC_COLLATE=\"C.UTF-8\" LC_MESSAGES=\"${my_lc_messages}\" && \\ localectl status && \\ env-update && source /etc/profile && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Setup systemd-timesyncd (copy&paste one after the other): # set your timezone export my_timezone = \"Europe/Berlin\" # list of ntp servers: https://www.ntppool.org/zone/@ # set your (fallback) ntp servers export my_ntp_servers = \"0.de.pool.ntp.org 1.de.pool.ntp.org 2.de.pool.ntp.org 3.de.pool.ntp.org\" export my_fallback_ntp_servers = \"0.europe.pool.ntp.org 1.europe.pool.ntp.org 2.europe.pool.ntp.org 3.europe.pool.ntp.org\" /bin/bash -c ' timedatectl set-timezone ${my_timezone} && \\ if grep -q -w \"hypervisor\" <(grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo); then systemctl disable systemd-timesyncd.service && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" else rsync -av /etc/systemd/timesyncd.conf /etc/systemd/._cfg0000_timesyncd.conf && \\ sed -i -e \"s/#NTP=/NTP=${my_ntp_servers}/\" -e \"s/#FallbackNTP=.*/FallbackNTP=${my_fallback_ntp_servers}/\" /etc/systemd/._cfg0000_timesyncd.conf && \\ timedatectl set-ntp true && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" fi && \\ timedatectl && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Setup nftables with certain firewall rules : emerge net-firewall/nftables && \\ rsync -a /etc/conf.d/nftables /etc/conf.d/._cfg0000_nftables && \\ sed -i 's/^SAVE_ON_STOP=\"yes\"$/SAVE_ON_STOP=\"no\"/' /etc/conf.d/._cfg0000_nftables && \\ /usr/local/sbin/firewall.nft && \\ nft list ruleset > /var/lib/nftables/rules-save && \\ systemctl enable nftables-restore && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"12.1. systemd Configuration"},{"location":"post-boot_configuration/#122-secure-boot-setup","text":"If \"sbctl enroll-keys\" failed in section 8.3. Secure Boot , you can import secure boot files the following way now. First, boot into the Gentoo Linux and save necessary files in \"DER\" format on ESP: /bin/bash -c ' { ! mountpoint --quiet /boot/efia && \\ mount /boot/efia || true } && \\ openssl x509 -outform der -in /usr/share/secureboot/keys/db/db.pem -out /boot/efia/db.der && \\ openssl x509 -outform der -in /usr/share/secureboot/keys/KEK/KEK.pem -out /boot/efia/KEK.der && \\ openssl x509 -outform der -in /usr/share/secureboot/keys/PK/PK.pem -out /boot/efia/PK.der && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Reboot into \"UEFI Firmware Settings\" and import \"db.der\", \"KEK.der\" and \"PK.der\" in this order. Thereafter, enable secure boot. Upon successful boot with secure boot enabled, you can delete the \".der\" files in /boot/efia . To check whether secure boot is enabled execute: \u276f sbctl status Installed: \u2713 sbctl is installed Owner GUID: 4cdeb60c-d2ce-4ed9-af89-2b659c21f6e4 Setup Mode: \u2713 Disabled Secure Boot: \u2713 Enabled (Optional) To list the installed secure boot keys/certs (copy&paste one after the other): emerge -at app-crypt/efitools efi-readvar","title":"12.2. Secure Boot Setup"},{"location":"post-boot_configuration/#123-measured-boot","text":"You have two reasonable options for measured boot on systemd: systemd-cryptenroll : I prefer this on local systems (e.g. laptops, desktop PCs) where I have access to TTY and can take care of (optional) pin prompts which are supported with systemd \u2265251. With pins, you don't have the problem of your laptop, for example, getting stolen and auto-unlocking upon boot. Furthermore, I experienced faster boot with systemd-cryptenroll than with clevis due to the use of PBKDF2 which is safe to use with the secure keys generated by systemd-cryptenroll. And, you don't have to use the \"app-crypt/clevis\" package from (unofficial) guru overlay . clevis : I prefer this on remote systems , e.g. a server in colocation, where I can take care of unlock via Shamir Secret Sharing which combines TPM 2.0 and Tang pin ( Tang project ). Use either systemd-cryptenroll or clevis in the following.","title":"12.3. Measured Boot"},{"location":"post-boot_configuration/#1231a-systemd-cryptenroll","text":"Install \"app-crypt/tpm2-tools\": emerge -av tpm2-tools If you use TPM 2.0 pins, make sure to install systemd >=252 to only have to type TPM 2.0 pins once : echo \"<sys-apps/systemd-253 ~amd64\" >> /etc/portage/package.accept_keywords/main Add support for TPM 2.0 to dracut and systemd: rsync -a /etc/portage/package.use/main /etc/portage/package.use/._cfg0000_main && \\ sed -i 's/^\\(sys-apps\\/systemd.*\\)$/\\1 tpm/' /etc/portage/package.use/._cfg0000_main && \\ echo 'add_dracutmodules+=\" tpm2-tss \"' >> /etc/dracut.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Update and make sure \"sys-apps/systemd\" is listed among the packages: emerge -atuDN @world With systemd >=252, mask certain services to be able to boot . You can unmask them after configuring them correctly. systemctl mask systemd-pcrphase-initrd.service && \\ systemctl mask systemd-pcrphase-sysinit.service && \\ systemctl mask systemd-pcrphase.service && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Make sure that TPM 2.0 devices (should only be one) are recognised: systemd-cryptenroll --tpm2-device = list Make sure that the PCRs you are going to use have a valid hash and don't consist of zeroes only: tpm2_pcrread sha256 Create new LUKS keyslots on all swap and system partitions. # I only use PCR7 as recommended in the first sentence after following table: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2 # # \"--tpm2-with-pin=yes\" is optional: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#--tpm2-with-pin=BOOL # systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sda3 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sda4 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sdb3 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sdb4 # etc. Reboot your system!","title":"12.3.1.a) systemd-cryptenroll"},{"location":"post-boot_configuration/#1231b-clevis","text":"System Requirement: Tang Server This section requires a tang server to preexist and be reachable from this system. A simple tang server setup is shown by RedHat on YouTube. I personally use AlmaLinux as tang server, but any supported system can do. If you don't have a DHCP server available to the new system, add the following network settings to the \"CMDLINE\" array variable in /etc/dracut.conf : ip=192.168.10.2::192.168.10.1:255.255.255.0:micro:enp1s0:off Install \"dev-vcs/git\": echo 'dev-vcs/git -webdav' >> /etc/portage/package.use/main && \\ emerge -at dev-vcs/git Install \"app-crypt/clevis\": echo \"app-crypt/clevis ~amd64 dev-libs/jose ~amd64 dev-libs/luksmeta ~amd64 app-crypt/tpm2-tools ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -at app-crypt/clevis Make sure that the PCRs you are going to use have a valid hash and don't consist of zeroes only: tpm2_pcrread sha256 Bind all swap and system LUKS volumes. # I only use PCR7 as recommended in the first sentence after following table: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2 # clevis luks bind -d /dev/sda3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sda4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sdb3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sdb4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' # etc. Show results: clevis luks list -d /dev/sda3 clevis luks list -d /dev/sda4 clevis luks list -d /dev/sdb3 clevis luks list -d /dev/sdb4 # etc.","title":"12.3.1.b) clevis"},{"location":"post-boot_configuration/#1232-kernel-rebuild","text":"Rebuild the unified kernel image to integrate the changes for measured boot: emerge -at --oneshot \\ $( qlist -eI sys-kernel/gentoo-kernel-bin >/dev/null && echo sys-kernel/gentoo-kernel-bin ) \\ $( qlist -eI sys-kernel/gentoo-kernel >/dev/null && echo sys-kernel/gentoo-kernel )","title":"12.3.2. Kernel Rebuild"},{"location":"post-boot_configuration/#124-package-cleanup","text":"Update packages and remove extraneous ones (copy&paste one after the other): emerge -atuDN @world emerge --depclean -a","title":"12.4. Package Cleanup"},{"location":"rescue_system/","text":"Info A feature request has been opened to have SystemRescue support \"measured boot\". While we are still on SystemRescue and not within chroot, download the SystemRescue .iso file and create a customised one out of it. 4.1. Downloads And Verification \u00b6 Prepare the working directory: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ chown meh:meh /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Import the GnuPG public key used to sign the SystemRescue .iso: su -l meh -c \" mkdir --mode=0700 /tmp/gpgHomeDir && \\ curl -fsSL --proto '=https' --tlsv1.3 https://www.system-rescue.org/security/signing-keys/gnupg-pubkey-fdupoux-20210704-v001.pem | gpg --homedir /tmp/gpgHomeDir --import && \\ gpg --homedir /tmp/gpgHomeDir --import-ownertrust <<<'62989046EB5C7E985ECDF5DD3B0FEA9BE13CA3C9:6:' && \\ gpgconf --homedir /tmp/gpgHomeDir --kill all && \\ echo -e '\\e[1;32mSUCCESS\\e[0m' \" Download the .iso and .asc files: rescue_system_version = \" $( su -l meh -c \"curl -fsS --proto '=https' --tlsv1.3 https://gitlab.com/systemrescue/systemrescue-sources/-/raw/main/VERSION\" ) \" && \\ su -l meh -c \" curl --continue-at - -L --proto '=https' --tlsv1.2 --ciphers 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso \\\"https://sourceforge.net/projects/systemrescuecd/files/sysresccd-x86/ ${ rescue_system_version } /systemrescue- ${ rescue_system_version } -amd64.iso/download?use_mirror=netcologne\\\" && \\ curl -fsSL --proto '=https' --tlsv1.3 --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc \\\"https://www.system-rescue.org/releases/ ${ rescue_system_version } /systemrescue- ${ rescue_system_version } -amd64.iso.asc\\\" && \\ echo -e '\\e[1;32mSUCCESS\\e[0m' \" Verify the .iso file with GnuPG: su -l meh -c \" gpg --homedir /tmp/gpgHomeDir --verify /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso && \\ gpgconf --homedir /tmp/gpgHomeDir --kill all \" && \\ chown -R 0 :0 /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 4.2. Configuration \u00b6 Create the folder structure which will contain SystemRescue customisations: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/ { recipe/ { iso_delete,iso_add/ { autorun,sysresccd,sysrescue.d } ,iso_patch_and_script,build_into_srm/ { etc/sysctl.d,usr/local/sbin }} ,work } && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Disable \"magic SysRq\" for security sake : echo \"kernel.sysrq = 0\" > /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/sysctl.d/99sysrq.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Copy chroot.sh created by disk.sh : rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rwx,go = r /tmp/chroot.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/usr/local/sbin/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Copy the firewall script : # set firewall rules upon bootup. rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /tmp/firewall.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/autorun/autorun && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Create the settings YAML (copy&paste one after the other): # disable bash history set +o history # replace \"MyPassWord123\" with the password you want to use to login via TTY on the rescue system crypt_pass = \" $( python3 -c 'import crypt; print(crypt.crypt(\"MyPassWord123\", crypt.mksalt(crypt.METHOD_SHA512)))' ) \" # enable bash history set -o history # set default settings echo \"\\ --- global: copytoram: true checksum: true nofirewall: true loadsrm: true setkmap: de-latin1-nodeadkeys dostartx: false dovnc: false rootshell: /bin/bash rootcryptpass: ' ${ crypt_pass } ' autorun: ar_disable: false ar_nowait: true ar_nodel: false ar_ignorefail: false\\ \" > /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysrescue.d/500-settings.yaml # unset the password variable unset crypt_pass Integrate additional packages required for chroot.sh to work: pacman -Sy clevis libpwquality luksmeta sbctl sbsigntools tpm2-tools && \\ cowpacman2srm /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysresccd/zz_additional_packages.srm && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 4.3 (Optional) SSH Server \u00b6 Info This section is only required if you want to access the rescue system over SSH. Take care of public key authentication (copy&paste one after the other): mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh # add your ssh public keys to # /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys # set correct modes chmod u = rwx,g = rx,o = /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root chmod -R u = rwX,go = /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh Configure the SSH server: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh && \\ rsync -a /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ # do some ssh server hardening sed -i \\ -e 's/^#Port 22$/Port 50023/' \\ -e 's/^#PasswordAuthentication yes/PasswordAuthentication no/' \\ -e 's/^#X11Forwarding no$/X11Forwarding no/' /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ grep -q \"^KbdInteractiveAuthentication no $ \" /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ echo \" AuthenticationMethods publickey KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com\" >> /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ # create ssh_host_* files in build_into_srm/etc/ssh/ ssh-keygen -A -f /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm && \\ { diff /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config || true ; } && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Open the SSH port: echo \" iptables -A INPUT -p tcp --dport 50023 -j ACCEPT ip6tables -A INPUT -p tcp --dport 50023 -j ACCEPT\" >> /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/autorun/autorun Write down fingerprints to double check upon initial SSH connection to the rescue system: find /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 4.4. Folder Structure \u00b6 After running through above installation steps, you should have the following file/folder structure: SSH setup non-SSH setup \u276f tree -a /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe \u251c\u2500\u2500 build_into_srm \u2502 \u251c\u2500\u2500 etc \u2502 \u2502 \u251c\u2500\u2500 ssh \u2502 \u2502 \u2502 \u251c\u2500\u2500 sshd_config \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ecdsa_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ecdsa_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ed25519_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ed25519_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_rsa_key \u2502 \u2502 \u2502 \u2514\u2500\u2500 ssh_host_rsa_key.pub \u2502 \u2502 \u2514\u2500\u2500 sysctl.d \u2502 \u2502 \u2514\u2500\u2500 99sysrq.conf \u2502 \u251c\u2500\u2500 root \u2502 \u2502 \u2514\u2500\u2500 .ssh \u2502 \u2502 \u2514\u2500\u2500 authorized_keys \u2502 \u2514\u2500\u2500 usr \u2502 \u2514\u2500\u2500 local \u2502 \u2514\u2500\u2500 sbin \u2502 \u2514\u2500\u2500 chroot.sh \u251c\u2500\u2500 iso_add \u2502 \u251c\u2500\u2500 autorun \u2502 \u2502 \u2514\u2500\u2500 autorun \u2502 \u251c\u2500\u2500 sysresccd \u2502 \u2502 \u2514\u2500\u2500 zz_additional_packages.srm \u2502 \u2514\u2500\u2500 sysrescue.d \u2502 \u2514\u2500\u2500 500 -settings.yaml \u251c\u2500\u2500 iso_delete \u2514\u2500\u2500 iso_patch_and_script 15 directories, 13 files \u276f tree -a /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe \u251c\u2500\u2500 build_into_srm \u2502 \u251c\u2500\u2500 etc \u2502 \u2502 \u2514\u2500\u2500 sysctl.d \u2502 \u2502 \u2514\u2500\u2500 99sysrq.conf \u2502 \u2514\u2500\u2500 usr \u2502 \u2514\u2500\u2500 local \u2502 \u2514\u2500\u2500 sbin \u2502 \u2514\u2500\u2500 chroot.sh \u251c\u2500\u2500 iso_add \u2502 \u251c\u2500\u2500 autorun \u2502 \u2502 \u2514\u2500\u2500 autorun \u2502 \u251c\u2500\u2500 sysresccd \u2502 \u2502 \u2514\u2500\u2500 zz_additional_packages.srm \u2502 \u2514\u2500\u2500 sysrescue.d \u2502 \u2514\u2500\u2500 500 -settings.yaml \u251c\u2500\u2500 iso_delete \u2514\u2500\u2500 iso_patch_and_script 12 directories, 5 files 4.5. ISO And Rescue Partition \u00b6 Create an installation medium with above changes: sysrescue-customize \\ --auto --overwrite \\ -s /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso \\ -d /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_custom.iso \\ -r /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe \\ -w /mnt/gentoo/etc/gentoo-installation/systemrescuecd/work && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Copy the content of the custom installation medium to the \"rescue\" partition: mkdir /mnt/iso /mnt/gentoo/mnt/rescue && \\ mount -o loop,ro /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_custom.iso /mnt/iso && \\ mount -o noatime /mnt/gentoo/mapperRescue /mnt/gentoo/mnt/rescue && \\ rsync -HAXSacv --delete /mnt/iso/ { autorun,sysresccd,sysrescue.d } /mnt/gentoo/mnt/rescue/ && \\ umount /mnt/iso && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 4.6. Kernel Installation \u00b6 Create the unified kernel image which will be used to boot the rescue system: echo \"cryptdevice=UUID= $( blkid -s UUID -o value /mnt/gentoo/devRescue ) :root root=/dev/mapper/root archisobasedir=sysresccd archisolabel=rescue31415fs noautologin loadsrm=y\" > /tmp/my_cmdline && \\ objcopy \\ --add-section .osrel = \"/usr/lib/os-release\" --change-section-vma .osrel = 0x20000 \\ --add-section .cmdline = \"/tmp/my_cmdline\" --change-section-vma .cmdline = 0x30000 \\ --add-section .linux = \"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/vmlinuz\" --change-section-vma .linux = 0x2000000 \\ --add-section .initrd = \"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/sysresccd.img\" --change-section-vma .initrd = 0x3000000 \\ \"/usr/lib/systemd/boot/efi/linuxx64.efi.stub\" \"/tmp/systemrescuecd.efi\" && \\ while read -r my_esp ; do mkdir \" ${ my_esp /devE/boot \\/ e } \" && \\ mount -o noatime,dmask = 0022 ,fmask = 0133 \" ${ my_esp } \" \" ${ my_esp /devE/boot \\/ e } \" && \\ rsync -av \"/tmp/systemrescuecd.efi\" \" ${ my_esp /devE/boot \\/ e } /\" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" done < < ( find /mnt/gentoo/devEfi* -maxdepth 0 )","title":"4. Rescue System"},{"location":"rescue_system/#41-downloads-and-verification","text":"Prepare the working directory: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ chown meh:meh /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Import the GnuPG public key used to sign the SystemRescue .iso: su -l meh -c \" mkdir --mode=0700 /tmp/gpgHomeDir && \\ curl -fsSL --proto '=https' --tlsv1.3 https://www.system-rescue.org/security/signing-keys/gnupg-pubkey-fdupoux-20210704-v001.pem | gpg --homedir /tmp/gpgHomeDir --import && \\ gpg --homedir /tmp/gpgHomeDir --import-ownertrust <<<'62989046EB5C7E985ECDF5DD3B0FEA9BE13CA3C9:6:' && \\ gpgconf --homedir /tmp/gpgHomeDir --kill all && \\ echo -e '\\e[1;32mSUCCESS\\e[0m' \" Download the .iso and .asc files: rescue_system_version = \" $( su -l meh -c \"curl -fsS --proto '=https' --tlsv1.3 https://gitlab.com/systemrescue/systemrescue-sources/-/raw/main/VERSION\" ) \" && \\ su -l meh -c \" curl --continue-at - -L --proto '=https' --tlsv1.2 --ciphers 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso \\\"https://sourceforge.net/projects/systemrescuecd/files/sysresccd-x86/ ${ rescue_system_version } /systemrescue- ${ rescue_system_version } -amd64.iso/download?use_mirror=netcologne\\\" && \\ curl -fsSL --proto '=https' --tlsv1.3 --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc \\\"https://www.system-rescue.org/releases/ ${ rescue_system_version } /systemrescue- ${ rescue_system_version } -amd64.iso.asc\\\" && \\ echo -e '\\e[1;32mSUCCESS\\e[0m' \" Verify the .iso file with GnuPG: su -l meh -c \" gpg --homedir /tmp/gpgHomeDir --verify /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso && \\ gpgconf --homedir /tmp/gpgHomeDir --kill all \" && \\ chown -R 0 :0 /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"4.1. Downloads And Verification"},{"location":"rescue_system/#42-configuration","text":"Create the folder structure which will contain SystemRescue customisations: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/ { recipe/ { iso_delete,iso_add/ { autorun,sysresccd,sysrescue.d } ,iso_patch_and_script,build_into_srm/ { etc/sysctl.d,usr/local/sbin }} ,work } && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Disable \"magic SysRq\" for security sake : echo \"kernel.sysrq = 0\" > /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/sysctl.d/99sysrq.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Copy chroot.sh created by disk.sh : rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rwx,go = r /tmp/chroot.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/usr/local/sbin/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Copy the firewall script : # set firewall rules upon bootup. rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /tmp/firewall.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/autorun/autorun && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Create the settings YAML (copy&paste one after the other): # disable bash history set +o history # replace \"MyPassWord123\" with the password you want to use to login via TTY on the rescue system crypt_pass = \" $( python3 -c 'import crypt; print(crypt.crypt(\"MyPassWord123\", crypt.mksalt(crypt.METHOD_SHA512)))' ) \" # enable bash history set -o history # set default settings echo \"\\ --- global: copytoram: true checksum: true nofirewall: true loadsrm: true setkmap: de-latin1-nodeadkeys dostartx: false dovnc: false rootshell: /bin/bash rootcryptpass: ' ${ crypt_pass } ' autorun: ar_disable: false ar_nowait: true ar_nodel: false ar_ignorefail: false\\ \" > /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysrescue.d/500-settings.yaml # unset the password variable unset crypt_pass Integrate additional packages required for chroot.sh to work: pacman -Sy clevis libpwquality luksmeta sbctl sbsigntools tpm2-tools && \\ cowpacman2srm /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysresccd/zz_additional_packages.srm && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"4.2. Configuration"},{"location":"rescue_system/#43-optional-ssh-server","text":"Info This section is only required if you want to access the rescue system over SSH. Take care of public key authentication (copy&paste one after the other): mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh # add your ssh public keys to # /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys # set correct modes chmod u = rwx,g = rx,o = /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root chmod -R u = rwX,go = /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh Configure the SSH server: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh && \\ rsync -a /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ # do some ssh server hardening sed -i \\ -e 's/^#Port 22$/Port 50023/' \\ -e 's/^#PasswordAuthentication yes/PasswordAuthentication no/' \\ -e 's/^#X11Forwarding no$/X11Forwarding no/' /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ grep -q \"^KbdInteractiveAuthentication no $ \" /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ echo \" AuthenticationMethods publickey KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com\" >> /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ # create ssh_host_* files in build_into_srm/etc/ssh/ ssh-keygen -A -f /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm && \\ { diff /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config || true ; } && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Open the SSH port: echo \" iptables -A INPUT -p tcp --dport 50023 -j ACCEPT ip6tables -A INPUT -p tcp --dport 50023 -j ACCEPT\" >> /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/autorun/autorun Write down fingerprints to double check upon initial SSH connection to the rescue system: find /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"4.3 (Optional) SSH Server"},{"location":"rescue_system/#44-folder-structure","text":"After running through above installation steps, you should have the following file/folder structure: SSH setup non-SSH setup \u276f tree -a /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe \u251c\u2500\u2500 build_into_srm \u2502 \u251c\u2500\u2500 etc \u2502 \u2502 \u251c\u2500\u2500 ssh \u2502 \u2502 \u2502 \u251c\u2500\u2500 sshd_config \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ecdsa_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ecdsa_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ed25519_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ed25519_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_rsa_key \u2502 \u2502 \u2502 \u2514\u2500\u2500 ssh_host_rsa_key.pub \u2502 \u2502 \u2514\u2500\u2500 sysctl.d \u2502 \u2502 \u2514\u2500\u2500 99sysrq.conf \u2502 \u251c\u2500\u2500 root \u2502 \u2502 \u2514\u2500\u2500 .ssh \u2502 \u2502 \u2514\u2500\u2500 authorized_keys \u2502 \u2514\u2500\u2500 usr \u2502 \u2514\u2500\u2500 local \u2502 \u2514\u2500\u2500 sbin \u2502 \u2514\u2500\u2500 chroot.sh \u251c\u2500\u2500 iso_add \u2502 \u251c\u2500\u2500 autorun \u2502 \u2502 \u2514\u2500\u2500 autorun \u2502 \u251c\u2500\u2500 sysresccd \u2502 \u2502 \u2514\u2500\u2500 zz_additional_packages.srm \u2502 \u2514\u2500\u2500 sysrescue.d \u2502 \u2514\u2500\u2500 500 -settings.yaml \u251c\u2500\u2500 iso_delete \u2514\u2500\u2500 iso_patch_and_script 15 directories, 13 files \u276f tree -a /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe \u251c\u2500\u2500 build_into_srm \u2502 \u251c\u2500\u2500 etc \u2502 \u2502 \u2514\u2500\u2500 sysctl.d \u2502 \u2502 \u2514\u2500\u2500 99sysrq.conf \u2502 \u2514\u2500\u2500 usr \u2502 \u2514\u2500\u2500 local \u2502 \u2514\u2500\u2500 sbin \u2502 \u2514\u2500\u2500 chroot.sh \u251c\u2500\u2500 iso_add \u2502 \u251c\u2500\u2500 autorun \u2502 \u2502 \u2514\u2500\u2500 autorun \u2502 \u251c\u2500\u2500 sysresccd \u2502 \u2502 \u2514\u2500\u2500 zz_additional_packages.srm \u2502 \u2514\u2500\u2500 sysrescue.d \u2502 \u2514\u2500\u2500 500 -settings.yaml \u251c\u2500\u2500 iso_delete \u2514\u2500\u2500 iso_patch_and_script 12 directories, 5 files","title":"4.4. Folder Structure"},{"location":"rescue_system/#45-iso-and-rescue-partition","text":"Create an installation medium with above changes: sysrescue-customize \\ --auto --overwrite \\ -s /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso \\ -d /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_custom.iso \\ -r /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe \\ -w /mnt/gentoo/etc/gentoo-installation/systemrescuecd/work && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Copy the content of the custom installation medium to the \"rescue\" partition: mkdir /mnt/iso /mnt/gentoo/mnt/rescue && \\ mount -o loop,ro /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_custom.iso /mnt/iso && \\ mount -o noatime /mnt/gentoo/mapperRescue /mnt/gentoo/mnt/rescue && \\ rsync -HAXSacv --delete /mnt/iso/ { autorun,sysresccd,sysrescue.d } /mnt/gentoo/mnt/rescue/ && \\ umount /mnt/iso && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"4.5. ISO And Rescue Partition"},{"location":"rescue_system/#46-kernel-installation","text":"Create the unified kernel image which will be used to boot the rescue system: echo \"cryptdevice=UUID= $( blkid -s UUID -o value /mnt/gentoo/devRescue ) :root root=/dev/mapper/root archisobasedir=sysresccd archisolabel=rescue31415fs noautologin loadsrm=y\" > /tmp/my_cmdline && \\ objcopy \\ --add-section .osrel = \"/usr/lib/os-release\" --change-section-vma .osrel = 0x20000 \\ --add-section .cmdline = \"/tmp/my_cmdline\" --change-section-vma .cmdline = 0x30000 \\ --add-section .linux = \"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/vmlinuz\" --change-section-vma .linux = 0x2000000 \\ --add-section .initrd = \"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/sysresccd.img\" --change-section-vma .initrd = 0x3000000 \\ \"/usr/lib/systemd/boot/efi/linuxx64.efi.stub\" \"/tmp/systemrescuecd.efi\" && \\ while read -r my_esp ; do mkdir \" ${ my_esp /devE/boot \\/ e } \" && \\ mount -o noatime,dmask = 0022 ,fmask = 0133 \" ${ my_esp } \" \" ${ my_esp /devE/boot \\/ e } \" && \\ rsync -av \"/tmp/systemrescuecd.efi\" \" ${ my_esp /devE/boot \\/ e } /\" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" done < < ( find /mnt/gentoo/devEfi* -maxdepth 0 )","title":"4.6. Kernel Installation"},{"location":"selinux/","text":"Info This chapter basically follows SELinux/Installation . Currently, I only use SELinux on servers, and only \"mcs\" policy type to be able to better isolate virtual machines from each other. 14.1. Enable SELinux \u00b6 Reduce the number of services by disabling some unneeded ones in order to avoid a few SELinux denials. This may not be desired on \"desktop\" systems. systemctl mask user@.service && \\ systemctl disable systemd-userdbd.socket && \\ rsync -a /etc/nsswitch.conf /etc/._cfg0000_nsswitch.conf && \\ sed -i 's/^hosts:\\([[:space:]]*\\)mymachines \\(.*\\)$/hosts:\\1\\2/' /etc/._cfg0000_nsswitch.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup \"make.conf\": rsync -a /etc/portage/make.conf /etc/portage/._cfg0000_make.conf && \\ echo -e '\\nPOLICY_TYPES=\"mcs\"' >> /etc/portage/._cfg0000_make.conf && \\ sed -i 's/^USE_HARDENED=\"\\(.*\\)\"/USE_HARDENED=\"\\1 -ubac -unconfined\"/' /etc/portage/._cfg0000_make.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" For the switch to a SELinux profile, you have two options depending on the profile currently in use: duxsco:hardened-systemd default/linux/amd64/17.1/systemd If you have switched to duxsco:hardened-systemd in section 6.4. (Optional) Hardened Profiles , you can easily \"add\" SELinux features with a simple switch to duxsco:hardened-systemd-selinux : eselect profile set \"duxsco:hardened-systemd-selinux\" If you stayed with the profile that came with the stage3 tarball which is most likely \"default/linux/amd64/17.1/systemd\" you can select the SELinux profile with: eselect profile set --force \"default/linux/amd64/17.1/systemd/selinux\" These commands are more or less required irrespective of the SELinux profile in use: # (Recommended) Use the most recent SELinux policies echo 'sec-policy/* ~amd64' >> /etc/portage/package.accept_keywords/main && \\ # (Optional) To get a nice looking html site in /usr/share/doc/selinux-base-<VERSION>/mcs/html: echo 'sec-policy/selinux-base doc' >> /etc/portage/package.use/main && \\ # Definitely required: FEATURES = \"-selinux\" emerge --oneshot selinux-base && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Configure SELinux: rsync -a /etc/selinux/config /etc/selinux/._cfg0000_config && \\ sed -i 's/^SELINUXTYPE=strict$/SELINUXTYPE=mcs/' /etc/selinux/._cfg0000_config && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Update packages: FEATURES = \"-selinux -sesandbox\" emerge --oneshot selinux-base && \\ FEATURES = \"-selinux -sesandbox\" emerge --oneshot selinux-base-policy && \\ emerge -atuDN @world Enable auditd logging: systemctl enable auditd.service && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Rebuild the kernel with SELinux support : emerge -at --oneshot \\ $( qlist -eI sys-kernel/gentoo-kernel-bin >/dev/null && echo sys-kernel/gentoo-kernel-bin ) \\ $( qlist -eI sys-kernel/gentoo-kernel >/dev/null && echo sys-kernel/gentoo-kernel ) && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Reboot with permissive kernel . Make sure that UBAC gets disabled: bash -c '( cd /usr/share/selinux/mcs && \\ semodule -i base.pp -i $(ls *.pp | grep -v base.pp) && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" )' 14.2. Relabel \u00b6 Relabel the entire system : mkdir /mnt/gentoo && \\ mount -o bind / /mnt/gentoo && \\ setfiles -r /mnt/gentoo /etc/selinux/mcs/contexts/files/file_contexts /mnt/gentoo/ { dev,home,proc,run,sys,tmp,boot/efi*,var/cache/binpkgs,var/cache/distfiles,var/db/repos/gentoo,var/tmp } && \\ umount /mnt/gentoo && \\ rlpkg -a -r && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Make sure that nothing (except perhaps \".keep\" files) is unlabeled: export tmpdir = \" $( mktemp -d ) \" && \\ mount --bind / \" $tmpdir \" && \\ find \" $tmpdir \" -context system_u:object_r:unlabeled_t:s0 && \\ umount \" $tmpdir \" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" If \"/proc\" was listed by above codeblock you have to relabel to avoid a denial: \u276f cat <<EOF | audit2allow [ 19.902620] audit: type=1400 audit(1663630933.439:3): avc: denied { mounton } for pid=1062 comm=\"(auditd)\" path=\"/run/systemd/unit-root/proc\" dev=\"dm-3\" ino=67581 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:unlabeled_t:s0 tclass=dir permissive=1 EOF #============= init_t ============== allow init_t unlabeled_t:dir mounton ; # Credits: grift :) \u276f export tmpdir = \" $( mktemp -d ) \" && mount --bind / \" $tmpdir \" && chcon system_u:object_r:proc_t:s0 \" $tmpdir \" /proc && umount \" $tmpdir \" && echo -e \"\\e[1;32mSUCCESS\\e[0m\" In section 10. SSH Server (optional) , the SSH port has been changed to 50022. This needs to be considered for no SELinux denials to occur: \u276f semanage port -l | grep -e ssh -e Port SELinux Port Type Proto Port Number ssh_port_t tcp 22 \u276f semanage port -a -t ssh_port_t -p tcp 50022 \u276f semanage port -l | grep -e ssh -e Port SELinux Port Type Proto Port Number ssh_port_t tcp 50022 , 22 14.3. Users and services \u00b6 Default \"mcs\" SELinux \"login\" and \"user\" settings: \u276f semanage login -l Login Name SELinux User MLS/MCS Range Service __default__ user_u s0-s0 * root root s0-s0:c0.c1023 * \u276f semanage user -l Labeling MLS/ MLS/ SELinux User Prefix MCS Level MCS Range SELinux Roles root sysadm s0 s0-s0:c0.c1023 staff_r sysadm_r staff_u staff s0 s0-s0:c0.c1023 staff_r sysadm_r sysadm_u sysadm s0 s0-s0:c0.c1023 sysadm_r system_u user s0 s0-s0:c0.c1023 system_r unconfined_u unconfined s0 s0-s0:c0.c1023 unconfined_r user_u user s0 s0 user_r Add the initial user to the administration SELinux user : semanage login -a -s staff_u david && \\ restorecon -RFv /home/david && \\ bash -c 'echo \"%wheel ALL=(ALL) TYPE=sysadm_t ROLE=sysadm_r ALL\" | EDITOR=\"tee\" visudo -f /etc/sudoers.d/wheel && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"' Now, we should have: \u276f semanage login -l Login Name SELinux User MLS/MCS Range Service __default__ user_u s0-s0 * david staff_u s0-s0:c0.c1023 * root root s0-s0:c0.c1023 * Create \"/var/lib/sepolgen/interface_info\" for \"audit2why -R\" to work: sepolgen-ifgen -i /usr/share/selinux/mcs/include/support/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 14.4. SELinux policies \u00b6 At this point, you can reboot into permissive mode again and use the selinux-policy-creator.sh script.","title":"14. SELinux (optional)"},{"location":"selinux/#141-enable-selinux","text":"Reduce the number of services by disabling some unneeded ones in order to avoid a few SELinux denials. This may not be desired on \"desktop\" systems. systemctl mask user@.service && \\ systemctl disable systemd-userdbd.socket && \\ rsync -a /etc/nsswitch.conf /etc/._cfg0000_nsswitch.conf && \\ sed -i 's/^hosts:\\([[:space:]]*\\)mymachines \\(.*\\)$/hosts:\\1\\2/' /etc/._cfg0000_nsswitch.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup \"make.conf\": rsync -a /etc/portage/make.conf /etc/portage/._cfg0000_make.conf && \\ echo -e '\\nPOLICY_TYPES=\"mcs\"' >> /etc/portage/._cfg0000_make.conf && \\ sed -i 's/^USE_HARDENED=\"\\(.*\\)\"/USE_HARDENED=\"\\1 -ubac -unconfined\"/' /etc/portage/._cfg0000_make.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" For the switch to a SELinux profile, you have two options depending on the profile currently in use: duxsco:hardened-systemd default/linux/amd64/17.1/systemd If you have switched to duxsco:hardened-systemd in section 6.4. (Optional) Hardened Profiles , you can easily \"add\" SELinux features with a simple switch to duxsco:hardened-systemd-selinux : eselect profile set \"duxsco:hardened-systemd-selinux\" If you stayed with the profile that came with the stage3 tarball which is most likely \"default/linux/amd64/17.1/systemd\" you can select the SELinux profile with: eselect profile set --force \"default/linux/amd64/17.1/systemd/selinux\" These commands are more or less required irrespective of the SELinux profile in use: # (Recommended) Use the most recent SELinux policies echo 'sec-policy/* ~amd64' >> /etc/portage/package.accept_keywords/main && \\ # (Optional) To get a nice looking html site in /usr/share/doc/selinux-base-<VERSION>/mcs/html: echo 'sec-policy/selinux-base doc' >> /etc/portage/package.use/main && \\ # Definitely required: FEATURES = \"-selinux\" emerge --oneshot selinux-base && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Configure SELinux: rsync -a /etc/selinux/config /etc/selinux/._cfg0000_config && \\ sed -i 's/^SELINUXTYPE=strict$/SELINUXTYPE=mcs/' /etc/selinux/._cfg0000_config && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Update packages: FEATURES = \"-selinux -sesandbox\" emerge --oneshot selinux-base && \\ FEATURES = \"-selinux -sesandbox\" emerge --oneshot selinux-base-policy && \\ emerge -atuDN @world Enable auditd logging: systemctl enable auditd.service && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Rebuild the kernel with SELinux support : emerge -at --oneshot \\ $( qlist -eI sys-kernel/gentoo-kernel-bin >/dev/null && echo sys-kernel/gentoo-kernel-bin ) \\ $( qlist -eI sys-kernel/gentoo-kernel >/dev/null && echo sys-kernel/gentoo-kernel ) && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Reboot with permissive kernel . Make sure that UBAC gets disabled: bash -c '( cd /usr/share/selinux/mcs && \\ semodule -i base.pp -i $(ls *.pp | grep -v base.pp) && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" )'","title":"14.1. Enable SELinux"},{"location":"selinux/#142-relabel","text":"Relabel the entire system : mkdir /mnt/gentoo && \\ mount -o bind / /mnt/gentoo && \\ setfiles -r /mnt/gentoo /etc/selinux/mcs/contexts/files/file_contexts /mnt/gentoo/ { dev,home,proc,run,sys,tmp,boot/efi*,var/cache/binpkgs,var/cache/distfiles,var/db/repos/gentoo,var/tmp } && \\ umount /mnt/gentoo && \\ rlpkg -a -r && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Make sure that nothing (except perhaps \".keep\" files) is unlabeled: export tmpdir = \" $( mktemp -d ) \" && \\ mount --bind / \" $tmpdir \" && \\ find \" $tmpdir \" -context system_u:object_r:unlabeled_t:s0 && \\ umount \" $tmpdir \" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" If \"/proc\" was listed by above codeblock you have to relabel to avoid a denial: \u276f cat <<EOF | audit2allow [ 19.902620] audit: type=1400 audit(1663630933.439:3): avc: denied { mounton } for pid=1062 comm=\"(auditd)\" path=\"/run/systemd/unit-root/proc\" dev=\"dm-3\" ino=67581 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:unlabeled_t:s0 tclass=dir permissive=1 EOF #============= init_t ============== allow init_t unlabeled_t:dir mounton ; # Credits: grift :) \u276f export tmpdir = \" $( mktemp -d ) \" && mount --bind / \" $tmpdir \" && chcon system_u:object_r:proc_t:s0 \" $tmpdir \" /proc && umount \" $tmpdir \" && echo -e \"\\e[1;32mSUCCESS\\e[0m\" In section 10. SSH Server (optional) , the SSH port has been changed to 50022. This needs to be considered for no SELinux denials to occur: \u276f semanage port -l | grep -e ssh -e Port SELinux Port Type Proto Port Number ssh_port_t tcp 22 \u276f semanage port -a -t ssh_port_t -p tcp 50022 \u276f semanage port -l | grep -e ssh -e Port SELinux Port Type Proto Port Number ssh_port_t tcp 50022 , 22","title":"14.2. Relabel"},{"location":"selinux/#143-users-and-services","text":"Default \"mcs\" SELinux \"login\" and \"user\" settings: \u276f semanage login -l Login Name SELinux User MLS/MCS Range Service __default__ user_u s0-s0 * root root s0-s0:c0.c1023 * \u276f semanage user -l Labeling MLS/ MLS/ SELinux User Prefix MCS Level MCS Range SELinux Roles root sysadm s0 s0-s0:c0.c1023 staff_r sysadm_r staff_u staff s0 s0-s0:c0.c1023 staff_r sysadm_r sysadm_u sysadm s0 s0-s0:c0.c1023 sysadm_r system_u user s0 s0-s0:c0.c1023 system_r unconfined_u unconfined s0 s0-s0:c0.c1023 unconfined_r user_u user s0 s0 user_r Add the initial user to the administration SELinux user : semanage login -a -s staff_u david && \\ restorecon -RFv /home/david && \\ bash -c 'echo \"%wheel ALL=(ALL) TYPE=sysadm_t ROLE=sysadm_r ALL\" | EDITOR=\"tee\" visudo -f /etc/sudoers.d/wheel && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"' Now, we should have: \u276f semanage login -l Login Name SELinux User MLS/MCS Range Service __default__ user_u s0-s0 * david staff_u s0-s0:c0.c1023 * root root s0-s0:c0.c1023 * Create \"/var/lib/sepolgen/interface_info\" for \"audit2why -R\" to work: sepolgen-ifgen -i /usr/share/selinux/mcs/include/support/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"14.3. Users and services"},{"location":"selinux/#144-selinux-policies","text":"At this point, you can reboot into permissive mode again and use the selinux-policy-creator.sh script.","title":"14.4. SELinux policies"},{"location":"ssh_server/","text":"Note If you haven't setup SSH for the SystemRescue system you have to create \"/home/david/.ssh/authorized_keys\" manually instead of copying out of \"/etc/gentoo-installation/systemrescuecd/\" as suggested in the following codeblock. Take care of public key authentication : rsync -av --chown = david:david /etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys /home/david/.ssh/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Configure the SSH server: rsync -a /etc/ssh/sshd_config /etc/ssh/._cfg0000_sshd_config && \\ sed -i \\ -e 's/^#Port 22$/Port 50022/' \\ -e 's/^#PermitRootLogin prohibit-password$/PermitRootLogin no/' \\ -e 's/^#KbdInteractiveAuthentication yes$/KbdInteractiveAuthentication no/' \\ -e 's/^#X11Forwarding no$/X11Forwarding no/' /etc/ssh/._cfg0000_sshd_config && \\ grep -q \"^PasswordAuthentication no $ \" /etc/ssh/._cfg0000_sshd_config && \\ echo \" AuthenticationMethods publickey KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com AllowUsers david\" >> /etc/ssh/._cfg0000_sshd_config && \\ ssh-keygen -A && \\ sshd -t && \\ systemctl --no-reload enable sshd.service && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Note For \"dispatch-conf\" to work for the following change in \"/usr/local/sbin\", you need to execute the following command after creation of \"/usr/local/sbin/._cfg0000_firewall.nft\": dispatch-conf /usr/local/sbin Open the SSH port: rsync -a /usr/local/sbin/firewall.nft /usr/local/sbin/._cfg0000_firewall.nft && \\ sed -i 's/^#\\([[:space:]]*\\)tcp dport 50022 accept$/\\1tcp dport 50022 accept/' /usr/local/sbin/._cfg0000_firewall.nft && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Write down fingerprints to double check upon initial SSH connection to the Gentoo Linux machine: find /etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\;","title":"10. SSH Server (optional)"},{"location":"unified_kernel_image/","text":"9.1. non-Gentoo Images \u00b6 Install sys-boot/efibootmgr : emerge -at sys-boot/efibootmgr Setup ESP(s): while read -r my_esp ; do # install the EFI boot manager: # https://wiki.archlinux.org/title/systemd-boot#Installing_the_EFI_boot_manager bootctl --esp-path = \"/boot/ ${ my_esp } \" install && \\ # create the boot entry # https://wiki.gentoo.org/wiki/Efibootmgr#Creating_a_boot_entry efibootmgr --create --disk \"/dev/ $( lsblk -ndo pkname \" $( readlink -f \"/ ${ my_esp /efi/devEfi } \" ) \" ) \" --part 1 --label \"gentoo31415efi ${ my_esp } \" --loader '\\EFI\\systemd\\systemd-bootx64.efi' && \\ # setup systemd-boot # https://wiki.gentoo.org/wiki/Systemd-boot#loader.conf echo -e \"timeout 10\\neditor no\" > \"/boot/ ${ my_esp } /loader/loader.conf\" && \\ # move the precreated EFI binary of the rescue system into ESP mv \"/boot/ ${ my_esp } /systemrescuecd.efi\" \"/boot/ ${ my_esp } /EFI/Linux/\" && \\ # secure boot sign EFI binaries sbctl sign \"/boot/ ${ my_esp } /EFI/systemd/systemd-bootx64.efi\" && \\ sbctl sign \"/boot/ ${ my_esp } /EFI/BOOT/BOOTX64.EFI\" && \\ sbctl sign \"/boot/ ${ my_esp } /EFI/Linux/systemrescuecd.efi\" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" done < < ( grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/boot/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab ) 9.2. CPU Microcode \u00b6 Microcode updates are not necessary for virtual machines . On bare-metal, however, install \"sys-firmware/intel-microcode\" for Intel CPUs or follow the Gentoo wiki instruction to update the microcode on AMD systems. ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ grep -q \"^vendor_id[[:space:]]*:[[:space:]]*GenuineIntel $ \" /proc/cpuinfo && \\ echo \"sys-firmware/intel-microcode intel-ucode\" >> /etc/portage/package.license && \\ echo \"sys-firmware/intel-microcode hostonly\" >> /etc/portage/package.use/main && \\ emerge -at sys-firmware/intel-microcode && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 9.3. Portage Hooks \u00b6 Setup portage hooks ( wiki entry ) that take care of unified kernel image creation and secure boot signing : mkdir -p /etc/portage/env/sys-apps /etc/portage/env/sys-firmware /etc/portage/env/sys-kernel && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-firmware/intel-microcode && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/gentoo-kernel && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/gentoo-kernel-bin && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/linux-firmware && \\ rm -f /root/portage_hook_kernel && \\ echo 'if [[ ${EBUILD_PHASE} == postinst ]]; then while read -r my_esp; do bootctl --esp-path=\"/boot/${my_esp}\" --no-variables --graceful update && \\ sbctl sign \"/boot/${my_esp}/EFI/systemd/systemd-bootx64.efi\" && \\ sbctl sign \"/boot/${my_esp}/EFI/BOOT/BOOTX64.EFI\" if [[ $? -ne 0 ]]; then cat <<' \\' 'EOF' \\' ' ___________________________ < Failed to Secure Boot sign! > --------------------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || EOF fi done < <(grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/boot/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab) fi' > /etc/portage/env/sys-apps/systemd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 9.4. Dracut \u00b6 Setup sys-kernel/dracut . If you don't wear tin foil hats , you may want to change the line \"mitigations=auto,nosmt\" below (copy&paste one after the other): emerge -at app-crypt/sbsigntools sys-kernel/dracut system_uuid = \" $( blkid -s UUID -o value /mapperSystem ) \" my_crypt_root = \" $( blkid -s UUID -o value /devSystem* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s - ) \" my_crypt_swap = \" $( blkid -s UUID -o value /devSwap* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s - ) \" unset my_systemd_cryptenroll # If you intend to use systemd-cryptenroll, define this variable: # my_systemd_cryptenroll=\",tpm2-device=auto\" echo \" # make a generic image, but use custom kernel command-line parameters hostonly=no hostonly_cmdline=yes use_fstab=yes compress=xz show_modules=yes # create an unified kernel image uefi=yes # integrate microcode updates early_microcode=yes # point to the correct UEFI stub loader uefi_stub=/usr/lib/systemd/boot/efi/linuxx64.efi.stub # set files used to secure boot sign uefi_secureboot_cert=/usr/share/secureboot/keys/db/db.pem uefi_secureboot_key=/usr/share/secureboot/keys/db/db.key # kernel command-line parameters CMDLINE=( ro root=UUID= ${ system_uuid } ${ my_crypt_root } ${ my_crypt_swap } rd.luks.options=password-echo=no ${ my_systemd_cryptenroll } rootfstype=btrfs rootflags=subvol=@root mitigations=auto,nosmt ) kernel_cmdline=\\\"\\${CMDLINE[*]}\\\" unset CMDLINE\" >> /etc/dracut.conf 9.5. Packages \u00b6 (Optional) Use LTS (longterm) kernels : echo \"\\ >=sys-fs/btrfs-progs-5.16 >=sys-kernel/gentoo-kernel-5.16 >=sys-kernel/gentoo-kernel-bin-5.16 >=sys-kernel/linux-headers-5.16 >=virtual/dist-kernel-5.16\" >> /etc/portage/package.mask/main Configure packages required for booting: echo \"sys-fs/btrfs-progs ~amd64 sys-kernel/gentoo-kernel ~amd64 sys-kernel/gentoo-kernel-bin ~amd64 sys-kernel/linux-headers ~amd64 virtual/dist-kernel ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ # I prefer to create a \"fresh\" btrfs FS instead of converting # reiserfs and ext2/3/4 to btrfs. echo \"sys-fs/btrfs-progs -convert\" >> /etc/portage/package.use/main && \\ # Dracut will take care of initramfs creation. echo \"sys-kernel/gentoo-kernel -initramfs\" >> /etc/portage/package.use/main && \\ echo \"sys-kernel/gentoo-kernel-bin -initramfs\" >> /etc/portage/package.use/main && \\ # Accept required licenses. echo \"sys-kernel/linux-firmware linux-fw-redistributable no-source-code\" >> /etc/portage/package.license 9.6. Kernel Installation \u00b6 Install required packages: if [[ -e /devSwapb ]] ; then emerge -at sys-fs/btrfs-progs sys-fs/mdadm sys-kernel/linux-firmware && \\ rsync -a /etc/mdadm.conf /etc/._cfg0000_mdadm.conf && \\ echo \"\" >> /etc/._cfg0000_mdadm.conf && \\ mdadm --detail --scan >> /etc/._cfg0000_mdadm.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" else emerge -at sys-fs/btrfs-progs sys-kernel/linux-firmware && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" fi For kernel installation, you have two reasonable choices depending on whether you use a hardened profile or not : hardened profile non-hardened profile # This package makes use of \"hardened\" useflag. emerge -at sys-kernel/gentoo-kernel emerge -at sys-kernel/gentoo-kernel-bin","title":"9. Unified Kernel Image"},{"location":"unified_kernel_image/#91-non-gentoo-images","text":"Install sys-boot/efibootmgr : emerge -at sys-boot/efibootmgr Setup ESP(s): while read -r my_esp ; do # install the EFI boot manager: # https://wiki.archlinux.org/title/systemd-boot#Installing_the_EFI_boot_manager bootctl --esp-path = \"/boot/ ${ my_esp } \" install && \\ # create the boot entry # https://wiki.gentoo.org/wiki/Efibootmgr#Creating_a_boot_entry efibootmgr --create --disk \"/dev/ $( lsblk -ndo pkname \" $( readlink -f \"/ ${ my_esp /efi/devEfi } \" ) \" ) \" --part 1 --label \"gentoo31415efi ${ my_esp } \" --loader '\\EFI\\systemd\\systemd-bootx64.efi' && \\ # setup systemd-boot # https://wiki.gentoo.org/wiki/Systemd-boot#loader.conf echo -e \"timeout 10\\neditor no\" > \"/boot/ ${ my_esp } /loader/loader.conf\" && \\ # move the precreated EFI binary of the rescue system into ESP mv \"/boot/ ${ my_esp } /systemrescuecd.efi\" \"/boot/ ${ my_esp } /EFI/Linux/\" && \\ # secure boot sign EFI binaries sbctl sign \"/boot/ ${ my_esp } /EFI/systemd/systemd-bootx64.efi\" && \\ sbctl sign \"/boot/ ${ my_esp } /EFI/BOOT/BOOTX64.EFI\" && \\ sbctl sign \"/boot/ ${ my_esp } /EFI/Linux/systemrescuecd.efi\" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" done < < ( grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/boot/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab )","title":"9.1. non-Gentoo Images"},{"location":"unified_kernel_image/#92-cpu-microcode","text":"Microcode updates are not necessary for virtual machines . On bare-metal, however, install \"sys-firmware/intel-microcode\" for Intel CPUs or follow the Gentoo wiki instruction to update the microcode on AMD systems. ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ grep -q \"^vendor_id[[:space:]]*:[[:space:]]*GenuineIntel $ \" /proc/cpuinfo && \\ echo \"sys-firmware/intel-microcode intel-ucode\" >> /etc/portage/package.license && \\ echo \"sys-firmware/intel-microcode hostonly\" >> /etc/portage/package.use/main && \\ emerge -at sys-firmware/intel-microcode && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"9.2. CPU Microcode"},{"location":"unified_kernel_image/#93-portage-hooks","text":"Setup portage hooks ( wiki entry ) that take care of unified kernel image creation and secure boot signing : mkdir -p /etc/portage/env/sys-apps /etc/portage/env/sys-firmware /etc/portage/env/sys-kernel && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-firmware/intel-microcode && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/gentoo-kernel && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/gentoo-kernel-bin && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/linux-firmware && \\ rm -f /root/portage_hook_kernel && \\ echo 'if [[ ${EBUILD_PHASE} == postinst ]]; then while read -r my_esp; do bootctl --esp-path=\"/boot/${my_esp}\" --no-variables --graceful update && \\ sbctl sign \"/boot/${my_esp}/EFI/systemd/systemd-bootx64.efi\" && \\ sbctl sign \"/boot/${my_esp}/EFI/BOOT/BOOTX64.EFI\" if [[ $? -ne 0 ]]; then cat <<' \\' 'EOF' \\' ' ___________________________ < Failed to Secure Boot sign! > --------------------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || EOF fi done < <(grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/boot/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab) fi' > /etc/portage/env/sys-apps/systemd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"9.3. Portage Hooks"},{"location":"unified_kernel_image/#94-dracut","text":"Setup sys-kernel/dracut . If you don't wear tin foil hats , you may want to change the line \"mitigations=auto,nosmt\" below (copy&paste one after the other): emerge -at app-crypt/sbsigntools sys-kernel/dracut system_uuid = \" $( blkid -s UUID -o value /mapperSystem ) \" my_crypt_root = \" $( blkid -s UUID -o value /devSystem* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s - ) \" my_crypt_swap = \" $( blkid -s UUID -o value /devSwap* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s - ) \" unset my_systemd_cryptenroll # If you intend to use systemd-cryptenroll, define this variable: # my_systemd_cryptenroll=\",tpm2-device=auto\" echo \" # make a generic image, but use custom kernel command-line parameters hostonly=no hostonly_cmdline=yes use_fstab=yes compress=xz show_modules=yes # create an unified kernel image uefi=yes # integrate microcode updates early_microcode=yes # point to the correct UEFI stub loader uefi_stub=/usr/lib/systemd/boot/efi/linuxx64.efi.stub # set files used to secure boot sign uefi_secureboot_cert=/usr/share/secureboot/keys/db/db.pem uefi_secureboot_key=/usr/share/secureboot/keys/db/db.key # kernel command-line parameters CMDLINE=( ro root=UUID= ${ system_uuid } ${ my_crypt_root } ${ my_crypt_swap } rd.luks.options=password-echo=no ${ my_systemd_cryptenroll } rootfstype=btrfs rootflags=subvol=@root mitigations=auto,nosmt ) kernel_cmdline=\\\"\\${CMDLINE[*]}\\\" unset CMDLINE\" >> /etc/dracut.conf","title":"9.4. Dracut"},{"location":"unified_kernel_image/#95-packages","text":"(Optional) Use LTS (longterm) kernels : echo \"\\ >=sys-fs/btrfs-progs-5.16 >=sys-kernel/gentoo-kernel-5.16 >=sys-kernel/gentoo-kernel-bin-5.16 >=sys-kernel/linux-headers-5.16 >=virtual/dist-kernel-5.16\" >> /etc/portage/package.mask/main Configure packages required for booting: echo \"sys-fs/btrfs-progs ~amd64 sys-kernel/gentoo-kernel ~amd64 sys-kernel/gentoo-kernel-bin ~amd64 sys-kernel/linux-headers ~amd64 virtual/dist-kernel ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ # I prefer to create a \"fresh\" btrfs FS instead of converting # reiserfs and ext2/3/4 to btrfs. echo \"sys-fs/btrfs-progs -convert\" >> /etc/portage/package.use/main && \\ # Dracut will take care of initramfs creation. echo \"sys-kernel/gentoo-kernel -initramfs\" >> /etc/portage/package.use/main && \\ echo \"sys-kernel/gentoo-kernel-bin -initramfs\" >> /etc/portage/package.use/main && \\ # Accept required licenses. echo \"sys-kernel/linux-firmware linux-fw-redistributable no-source-code\" >> /etc/portage/package.license","title":"9.5. Packages"},{"location":"unified_kernel_image/#96-kernel-installation","text":"Install required packages: if [[ -e /devSwapb ]] ; then emerge -at sys-fs/btrfs-progs sys-fs/mdadm sys-kernel/linux-firmware && \\ rsync -a /etc/mdadm.conf /etc/._cfg0000_mdadm.conf && \\ echo \"\" >> /etc/._cfg0000_mdadm.conf && \\ mdadm --detail --scan >> /etc/._cfg0000_mdadm.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" else emerge -at sys-fs/btrfs-progs sys-kernel/linux-firmware && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" fi For kernel installation, you have two reasonable choices depending on whether you use a hardened profile or not : hardened profile non-hardened profile # This package makes use of \"hardened\" useflag. emerge -at sys-kernel/gentoo-kernel emerge -at sys-kernel/gentoo-kernel-bin","title":"9.6. Kernel Installation"},{"location":"virtual_server/","text":"Note I connect to libvirtd via TCP and tunnel the connection over SSH, because I want to use my SSH key which is secured on a hardware token, and \"virt-manager\" doesn't seem to support it directly. Thus, I can't use s.th. like qemu+ssh://david@192.168.10.3:50022/system . Tip You might want to consider having \"/var/lib/libvirt\" on a separate btrfs subvolume. I prefer managing installation media downloads and network myself: echo \"\\ app-emulation/libvirt -virt-network app-emulation/qemu -curl\" >> /etc/portage/package.use/main && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup the internal network on the VM host: echo '[NetDev] Name=br0 Kind=bridge' > /etc/systemd/network/br0.netdev && \\ echo '[Match] Name=br0 [Network] Address=192.168.110.1/24 ConfigureWithoutCarrier=true' > /etc/systemd/network/br0.network && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Install \"app-emulation/libvirt\": emerge -av app-emulation/libvirt Enable libvirt's TCP transport : systemctl enable libvirtd-tcp.socket && \\ systemctl enable libvirt-guests.service && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" After the start of \"libvirtd-tcp.socket\", systemd should listen on TCP port 16509: \u276f lsof -nP -iTCP -sTCP:LISTEN COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME systemd 1 root 48u IPv6 50548 0t0 TCP *:16509 ( LISTEN ) systemd-r 1063 systemd-resolve 12u IPv4 18306 0t0 TCP *:5355 ( LISTEN ) systemd-r 1063 systemd-resolve 14u IPv6 18309 0t0 TCP *:5355 ( LISTEN ) systemd-r 1063 systemd-resolve 18u IPv4 18313 0t0 TCP 127 .0.0.53:53 ( LISTEN ) systemd-r 1063 systemd-resolve 20u IPv4 18315 0t0 TCP 127 .0.0.54:53 ( LISTEN ) sshd 1096 root 3u IPv4 18400 0t0 TCP *:50022 ( LISTEN ) sshd 1096 root 4u IPv6 18401 0t0 TCP *:50022 ( LISTEN ) Tunnel the connection via SSH with: ssh -NL 56509 :127.0.0.1:16509 -p 50022 david@192.168.10.3 Add this connection in \"virt-manager\" on the client side: qemu+tcp://127.0.0.1:56509/system","title":"13. Virtual Server (optional)"}]}