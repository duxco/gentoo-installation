{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Disclaimer This installation guide is based on the official Gentoo Linux installation handbook . It is written with great care. Nevertheless, you are expected not to blindly copy&paste commands! Please, understand what you are going to do and adjust commands if required ! 1.1. System Requirements \u00b6 Beside official hardware requirements , the installation guide has additional ones: Secure Boot and TPM 2.0: The installation guide builds heavily on \"secure boot\" and requires \"TPM 2.0\" for \"measured boot\". Make sure that the system is in \"setup mode\" in order to be able to add your custom \"secure boot\" keys. You can, however, boot without \"setup mode\" and import the \"secure boot\" keys later on depending on the hardware in use. For this, you can follow the instructions in section 8.2. Secure Boot Setup . systemd and Measured Boot: The installation guide requires the use of systemd for \"measured boot\" to work. If you want to stay with OpenRC you can take a look at my older documentation . That, however, doesn't support \"measured boot\" and isn't maintained by me anymore. To keep things simple, the installation guide presumes that you intend to install on a x86_64 system. If that's not the case, adjust commands accordingly and use, for example, the correct systemd stage3 tarball for your hardware architecture . 1.2. Technologies \u00b6 The installation guide results in a system that is/uses: Secure Boot : Any EFI binary and unified kernel image is signed. Measured Boot : systemd-cryptenroll or clevis is used to check the system for manipulations via TPM 2.0 PCRs. Fully encrypted : Except for ESP(s), all partitions are LUKS encrypted. RAID : Except for ESP(s), btrfs and mdadm based RAID are used for all partitions if the number of disks is \u22652. Rescue system : A customised SystemRescueCD supports SSH logins and provides a convenient chroot.sh script. Hardened Gentoo Linux (optional) for a highly secure, high stability production environment ( link ). SELinux (optional) provides Mandatory Access Control using type enforcement and role-based access control ( link ). 1.3. SSH Connectivity \u00b6 After completion of this installation guide, optional SSH connections will be possible to the following systems using SSH public key authentication: Gentoo Linux installation: ssh -p 50022 david@<IP address> Rescue system: ssh -p 50023 root@<IP address> 1.4. Disk Layout \u00b6 ESPs are created one for each disk. Except for them, btrfs or mdadm based RAID 1 is used for all other partitions on a dual- or multi-disk setup with RAID 5, RAID 6 and RAID 10 being further options for the swap device. four disks three disks two disks single disk 1.5. LUKS Key Slots \u00b6 On the \"rescue\" partition, LUKS key slots are set as follows: 0: Rescue password On all other LUKS volumes, LUKS key slots are set as follows: 0: Fallback password for emergency 1: Measured Boot Option A: TPM 2.0 with optional pin to unlock with systemd-cryptenroll Option B: Shamir Secret Sharing combining TPM 2.0 and Tang pin ( Tang project ) to automatically unlock with Clevis","title":"1. Introduction"},{"location":"#11-system-requirements","text":"Beside official hardware requirements , the installation guide has additional ones: Secure Boot and TPM 2.0: The installation guide builds heavily on \"secure boot\" and requires \"TPM 2.0\" for \"measured boot\". Make sure that the system is in \"setup mode\" in order to be able to add your custom \"secure boot\" keys. You can, however, boot without \"setup mode\" and import the \"secure boot\" keys later on depending on the hardware in use. For this, you can follow the instructions in section 8.2. Secure Boot Setup . systemd and Measured Boot: The installation guide requires the use of systemd for \"measured boot\" to work. If you want to stay with OpenRC you can take a look at my older documentation . That, however, doesn't support \"measured boot\" and isn't maintained by me anymore. To keep things simple, the installation guide presumes that you intend to install on a x86_64 system. If that's not the case, adjust commands accordingly and use, for example, the correct systemd stage3 tarball for your hardware architecture .","title":"1.1. System Requirements"},{"location":"#12-technologies","text":"The installation guide results in a system that is/uses: Secure Boot : Any EFI binary and unified kernel image is signed. Measured Boot : systemd-cryptenroll or clevis is used to check the system for manipulations via TPM 2.0 PCRs. Fully encrypted : Except for ESP(s), all partitions are LUKS encrypted. RAID : Except for ESP(s), btrfs and mdadm based RAID are used for all partitions if the number of disks is \u22652. Rescue system : A customised SystemRescueCD supports SSH logins and provides a convenient chroot.sh script. Hardened Gentoo Linux (optional) for a highly secure, high stability production environment ( link ). SELinux (optional) provides Mandatory Access Control using type enforcement and role-based access control ( link ).","title":"1.2. Technologies"},{"location":"#13-ssh-connectivity","text":"After completion of this installation guide, optional SSH connections will be possible to the following systems using SSH public key authentication: Gentoo Linux installation: ssh -p 50022 david@<IP address> Rescue system: ssh -p 50023 root@<IP address>","title":"1.3. SSH Connectivity"},{"location":"#14-disk-layout","text":"ESPs are created one for each disk. Except for them, btrfs or mdadm based RAID 1 is used for all other partitions on a dual- or multi-disk setup with RAID 5, RAID 6 and RAID 10 being further options for the swap device. four disks three disks two disks single disk","title":"1.4. Disk Layout"},{"location":"#15-luks-key-slots","text":"On the \"rescue\" partition, LUKS key slots are set as follows: 0: Rescue password On all other LUKS volumes, LUKS key slots are set as follows: 0: Fallback password for emergency 1: Measured Boot Option A: TPM 2.0 with optional pin to unlock with systemd-cryptenroll Option B: Shamir Secret Sharing combining TPM 2.0 and Tang pin ( Tang project ) to automatically unlock with Clevis","title":"1.5. LUKS Key Slots"},{"location":"chrooting/","text":"Setup /etc/resolv.conf file: cp --dereference /etc/resolv.conf /mnt/gentoo/etc/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup ~/.bashrc : rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /mnt/gentoo/etc/skel/.bash* /mnt/gentoo/root/ && \\ rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rwX,go = /mnt/gentoo/etc/skel/.ssh /mnt/gentoo/root/ && \\ echo -e 'alias cp=\"cp -i\"\\nalias mv=\"mv -i\"\\nalias rm=\"rm -i\"' >> /mnt/gentoo/root/.bash_aliases && \\ echo 'source \"${HOME}/.bash_aliases\" # Raise an alert if something is wrong with btrfs or mdadm if { [[ -f /proc/mdstat ]] && grep -q \"\\[[U_]*_[U_]*\\]\" /proc/mdstat; } || \\ [[ $(find /sys/fs/btrfs -type f -name \"error_stats\" -exec awk ' \\' '{sum += $2} END {print sum}' \\' ' {} +) -ne 0 ]]; then echo ' \\' ' _________________ < Something smells! > ----------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || ' \\' ' fi' >> /mnt/gentoo/root/.bashrc && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Take care of localisation : echo \"C.UTF-8 UTF-8 de_DE.UTF-8 UTF-8 en_US.UTF-8 UTF-8\" > /mnt/gentoo/etc/locale.gen && \\ echo 'LANG=\"de_DE.UTF-8\" LC_COLLATE=\"C.UTF-8\" LC_MESSAGES=\"en_US.UTF-8\"' > /mnt/gentoo/etc/env.d/02locale && \\ chroot /mnt/gentoo /bin/bash -c \"source /etc/profile && locale-gen\" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup MAKEOPTS : ram_size = \" $( dmidecode -t memory | grep -Pio \"^[[:space:]]Size:[[:space:]]+\\K[0-9]*(?=[[:space:]]*GB $ )\" | paste -d '+' -s - | bc ) \" && \\ number_cores = \" $( nproc --all ) \" && \\ [[ $(( number_cores*2 )) -le ${ ram_size } ]] && jobs = \" ${ number_cores } \" || jobs = \" $( bc <<< \" ${ ram_size } / 2\" ) \" && \\ echo -e \"\\nMAKEOPTS=\\\"-j ${ jobs } \\\"\" >> /mnt/gentoo/etc/portage/make.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Chroot (copy&paste one after the other): chroot /mnt/gentoo /bin/bash source /etc/profile su - env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" Application of configuration changes starting with chapter 6 Execute dispatch-conf after every code block where a \". cfg0000 \" prefixed file has been created. The creation of \"._cfg0000\" prefixed files will be highlighted in yellow.","title":"5. Chrooting"},{"location":"cleanup_and_reboot/","text":"Configure the network connection (copy&paste one after the other): echo \"\\ [Match] Name=enp1s0 [Network] Address=192.168.10.2/24 Gateway=192.168.10.1 # https://wiki.archlinux.org/title/IPv6#systemd-networkd_3 LinkLocalAddressing=no IPv6AcceptRA=no\\ \" >> /etc/systemd/network/50-static.network systemctl --no-reload enable systemd-networkd.service Setup systemd-resolved for DNS (copy&paste one after the other): # https://wiki.gentoo.org/wiki/Resolv.conf # https://wiki.archlinux.org/title/systemd-resolved ln -rsf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf cp -av /etc/systemd/resolved.conf /etc/systemd/._cfg0000_resolved.conf # https://www.kuketz-blog.de/empfehlungsecke/#dns sed -i \\ -e 's/#DNS=.*/DNS=2001:678:e68:f000::#dot.ffmuc.net 2001:678:ed0:f000::#dot.ffmuc.net 5.1.66.255#dot.ffmuc.net 185.150.99.255#dot.ffmuc.net/' \\ -e 's/#FallbackDNS=.*/FallbackDNS=2a01:4f8:251:554::2#dns3.digitalcourage.de 5.9.164.112#dns3.digitalcourage.de/' \\ -e 's/#Domains=.*/Domains=~./' \\ -e 's/#DNSSEC=.*/DNSSEC=true/' \\ -e 's/#DNSOverTLS=.*/DNSOverTLS=true/' \\ /etc/systemd/._cfg0000_resolved.conf systemctl --no-reload enable systemd-resolved.service After the reboot, you can test DNS resolving ( link ) and check resolvectl status output. Cleanup obsolete installation files files and symlinks to devices created by \"disk.sh\" : rm -fv /stage3-* /portage-latest.tar.xz* /devEfi* /devRescue /devSystem* /devSwap* /mapperRescue /mapperSwap /mapperSystem && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Exit and reboot (copy&paste one after the other): exit exit exit cd umount -l /mnt/gentoo/dev { /shm,/pts, } umount -R /mnt/gentoo reboot","title":"7. Cleanup And Reboot"},{"location":"disk_setup/","text":"3.1. Wiping Disks \u00b6 disk.sh expects the disks, where you want to install Gentoo Linux on, to be completely empty. If you use SSD(s) I recommend a Secure Erase . Alternatively, you can do a fast wipe the following way given that no LUKS, MDADM, SWAP etc. device is open on the disk (copy&paste one after the other): # Change disk name to the one you want to wipe disk = \"/dev/sda\" lsblk -npo kname \" ${ disk } \" | grep \"^ ${ disk } \" | sort -r | while read -r i ; do wipefs -a \" $i \" ; done Tip If you have confidential data stored in a non-encrypted way and don't want to risk the data landing in foreign hands I recommend the use of something like dd , e.g. https://wiki.archlinux.org/title/Securely_wipe_disk ! 3.2. Partitioning And Formating \u00b6 Prepare the disks (copy&paste one after the other): # lookup all options bash /tmp/disk.sh -h # disable bash history set +o history # adjust to your liking bash /tmp/disk.sh -f fallbackfallback -r rescuerescue -d \"/dev/sda /dev/sdb etc.\" -s 12 # enable bash history set -o history disk.sh creates user \"meh\" which will be used later on to act as non-root. 3.3. /mnt/gentoo Content \u00b6 four disks three disks two disks single disk 3.4. Tarball Extraction \u00b6 Info Current stage3-amd64-systemd-*.tar.xz is downloaded by default. If you work on a different architecture, download the correct flavour. Later on, a switch to custom profile \"hardened-systemd\" and optionally \"hardened-systemd-selinux\" will be done ( link ). Extract the stage3 tarball and copy custom files: tar -C /mnt/gentoo/ -xpvf /mnt/gentoo/stage3-*.tar.xz --xattrs-include = '*.*' --numeric-owner && \\ rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rwx,go = r /tmp/firewall.nft /mnt/gentoo/usr/local/sbin/ && \\ rsync -av /tmp/portage_hook_kernel /mnt/gentoo/root/ && \\ mkdir -p /mnt/gentoo/etc/gentoo-installation && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Extract the portage tarball: mkdir /mnt/gentoo/var/db/repos/gentoo && \\ touch /mnt/gentoo/var/db/repos/gentoo/.keep && \\ mount -o noatime,subvol = @ebuilds /mnt/gentoo/mapperSystem /mnt/gentoo/var/db/repos/gentoo && \\ tar --transform 's/^portage/gentoo/' -C /mnt/gentoo/var/db/repos/ -xvpJf /mnt/gentoo/portage-latest.tar.xz && \\ rsync -av --numeric-ids --chown = 250 :250 /tmp/overlay/duxsco /mnt/gentoo/var/db/repos/ && \\ mkdir /mnt/gentoo/etc/portage/repos.conf && \\ echo '[duxsco] location = /var/db/repos/duxsco auto-sync = false' > /mnt/gentoo/etc/portage/repos.conf/duxsco.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 3.5. Mounting \u00b6 mount -t tmpfs -o noatime,nodev,nosuid,mode = 1777 ,uid = root,gid = root tmpfs /mnt/gentoo/tmp && \\ mount --types proc /proc /mnt/gentoo/proc && \\ mount --rbind /sys /mnt/gentoo/sys && \\ mount --make-rslave /mnt/gentoo/sys && \\ mount --rbind /dev /mnt/gentoo/dev && \\ mount --make-rslave /mnt/gentoo/dev && \\ mount --bind /run /mnt/gentoo/run && \\ mount --make-slave /mnt/gentoo/run && \\ mount -o noatime,subvol = @home /mnt/gentoo/mapperSystem /mnt/gentoo/home && \\ touch /mnt/gentoo/var/cache/binpkgs/.keep && \\ mount -o noatime,subvol = @binpkgs /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/binpkgs && \\ touch /mnt/gentoo/var/cache/distfiles/.keep && \\ mount -o noatime,subvol = @distfiles /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/distfiles && \\ touch /mnt/gentoo/var/tmp/.keep && \\ mount -o noatime,subvol = @var_tmp /mnt/gentoo/mapperSystem /mnt/gentoo/var/tmp && \\ chmod 1777 /mnt/gentoo/var/tmp && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"3. Disk Setup"},{"location":"disk_setup/#31-wiping-disks","text":"disk.sh expects the disks, where you want to install Gentoo Linux on, to be completely empty. If you use SSD(s) I recommend a Secure Erase . Alternatively, you can do a fast wipe the following way given that no LUKS, MDADM, SWAP etc. device is open on the disk (copy&paste one after the other): # Change disk name to the one you want to wipe disk = \"/dev/sda\" lsblk -npo kname \" ${ disk } \" | grep \"^ ${ disk } \" | sort -r | while read -r i ; do wipefs -a \" $i \" ; done Tip If you have confidential data stored in a non-encrypted way and don't want to risk the data landing in foreign hands I recommend the use of something like dd , e.g. https://wiki.archlinux.org/title/Securely_wipe_disk !","title":"3.1. Wiping Disks"},{"location":"disk_setup/#32-partitioning-and-formating","text":"Prepare the disks (copy&paste one after the other): # lookup all options bash /tmp/disk.sh -h # disable bash history set +o history # adjust to your liking bash /tmp/disk.sh -f fallbackfallback -r rescuerescue -d \"/dev/sda /dev/sdb etc.\" -s 12 # enable bash history set -o history disk.sh creates user \"meh\" which will be used later on to act as non-root.","title":"3.2. Partitioning And Formating"},{"location":"disk_setup/#33-mntgentoo-content","text":"four disks three disks two disks single disk","title":"3.3. /mnt/gentoo Content"},{"location":"disk_setup/#34-tarball-extraction","text":"Info Current stage3-amd64-systemd-*.tar.xz is downloaded by default. If you work on a different architecture, download the correct flavour. Later on, a switch to custom profile \"hardened-systemd\" and optionally \"hardened-systemd-selinux\" will be done ( link ). Extract the stage3 tarball and copy custom files: tar -C /mnt/gentoo/ -xpvf /mnt/gentoo/stage3-*.tar.xz --xattrs-include = '*.*' --numeric-owner && \\ rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rwx,go = r /tmp/firewall.nft /mnt/gentoo/usr/local/sbin/ && \\ rsync -av /tmp/portage_hook_kernel /mnt/gentoo/root/ && \\ mkdir -p /mnt/gentoo/etc/gentoo-installation && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Extract the portage tarball: mkdir /mnt/gentoo/var/db/repos/gentoo && \\ touch /mnt/gentoo/var/db/repos/gentoo/.keep && \\ mount -o noatime,subvol = @ebuilds /mnt/gentoo/mapperSystem /mnt/gentoo/var/db/repos/gentoo && \\ tar --transform 's/^portage/gentoo/' -C /mnt/gentoo/var/db/repos/ -xvpJf /mnt/gentoo/portage-latest.tar.xz && \\ rsync -av --numeric-ids --chown = 250 :250 /tmp/overlay/duxsco /mnt/gentoo/var/db/repos/ && \\ mkdir /mnt/gentoo/etc/portage/repos.conf && \\ echo '[duxsco] location = /var/db/repos/duxsco auto-sync = false' > /mnt/gentoo/etc/portage/repos.conf/duxsco.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"3.4. Tarball Extraction"},{"location":"disk_setup/#35-mounting","text":"mount -t tmpfs -o noatime,nodev,nosuid,mode = 1777 ,uid = root,gid = root tmpfs /mnt/gentoo/tmp && \\ mount --types proc /proc /mnt/gentoo/proc && \\ mount --rbind /sys /mnt/gentoo/sys && \\ mount --make-rslave /mnt/gentoo/sys && \\ mount --rbind /dev /mnt/gentoo/dev && \\ mount --make-rslave /mnt/gentoo/dev && \\ mount --bind /run /mnt/gentoo/run && \\ mount --make-slave /mnt/gentoo/run && \\ mount -o noatime,subvol = @home /mnt/gentoo/mapperSystem /mnt/gentoo/home && \\ touch /mnt/gentoo/var/cache/binpkgs/.keep && \\ mount -o noatime,subvol = @binpkgs /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/binpkgs && \\ touch /mnt/gentoo/var/cache/distfiles/.keep && \\ mount -o noatime,subvol = @distfiles /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/distfiles && \\ touch /mnt/gentoo/var/tmp/.keep && \\ mount -o noatime,subvol = @var_tmp /mnt/gentoo/mapperSystem /mnt/gentoo/var/tmp && \\ chmod 1777 /mnt/gentoo/var/tmp && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"3.5. Mounting"},{"location":"live-cd_environment/","text":"In the following, I am using the SystemRescueCD , not the official Gentoo Linux installation media . If not otherwise stated, commands are executed on the remote machine where Gentoo Linux needs to be installed, in the beginning via TTY, later on over SSH. Most of the time, you can copy&paste the whole code block, but understand the commands first and make adjustments (e.g. IP address, disk names) if required. Boot into SystemRescueCD and set the correct keyboard layout: loadkeys de-latin1-nodeadkeys Make sure you have booted with UEFI: [ -d /sys/firmware/efi ] && echo UEFI || echo BIOS Disable \"magic SysRq\" for security sake : sysctl -w kernel.sysrq = 0 Do the initial setup (copy&paste one after the other): # Start a screen session to better cope with networks disconnects screen -S install # If no automatic network setup has been done via DHCP... nmtui # Insert iptables rules at the correct place for SystemRescueCD to accept SSH connection requests. # Verify with \"iptables -L -v -n\" iptables -I INPUT 4 -p tcp --dport 22 -j ACCEPT -m conntrack --ctstate NEW # Alternatively, setup /root/.ssh/authorized_keys passwd root Using screen You can detach from screen's session with Ctrl + A + D and reattach with screen -d -r install . Scrolling works with Ctrl + A + Esc and Up / Down / Page Up / Page Down . You can exit scroll mode with Esc . Print out fingerprints to double check upon initial SSH connection to the SystemRescueCD system: find /etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; Execute following \"rsync\" and \"ssh\" commands on your local machine (copy&paste one after the other): # Copy installation files to remote machine. Adjust SSH host, port and IP. rsync -e \"ssh -o VisualHostKey=yes\" -av --numeric-ids --chown = 0 :0 { bin/ { portage_hook_kernel,disk.sh,fetch_files.sh,firewall.nft,firewall.sh } ,overlay } root@XXX:/tmp/ # From local machine, login into the remote machine ssh root@... Resume \"screen\": screen -d -r install (Optional) Lock the screen on the remote machine by typing the following command on its keyboard ( not over SSH ) (copy&paste one after the other): # If you have set /root/.ssh/authorized_keys in the previous steps # and haven't executed \"passwd\" make sure to do it now for \"vlock\" to work... passwd root # Execute \"vlock\" without any flags first. # If relogin doesn't work you can switch tty and set a password again. # If relogin succeeds execute vlock with flag \"-a\" to lock all tty. vlock -a Set the date and time if the current system time is not correct: ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ # replace \"MMDDhhmmYYYY\" with UTC time date --utc MMDDhhmmYYYY Update the hardware clock: ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ hwclock --systohc --utc","title":"2. Live-CD Environment"},{"location":"other_gentoo_linux_repos/","text":"https://github.com/duxsco?tab=repositories&q=gentoo-","title":"11. Other Gentoo Linux repos"},{"location":"post-boot_configuration/","text":"8.1. Systemd Configuration \u00b6 Some configuration needs to be done after systemd has been started. Setup localisation : /bin/bash -c ' localectl set-locale LANG=\"de_DE.UTF-8\" LC_COLLATE=\"C.UTF-8\" LC_MESSAGES=\"en_US.UTF-8\" && \\ localectl status && \\ env-update && source /etc/profile && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Setup systemd-timesyncd : /bin/bash -c ' timedatectl set-timezone Europe/Berlin && \\ if grep -q -w \"hypervisor\" <(grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo); then systemctl disable systemd-timesyncd.service echo $? else rsync -av /etc/systemd/timesyncd.conf /etc/systemd/._cfg0000_timesyncd.conf && \\ sed -i -e \"s/#NTP=/NTP=0.de.pool.ntp.org 1.de.pool.ntp.org 2.de.pool.ntp.org 3.de.pool.ntp.org/\" -e \"s/#FallbackNTP=.*/FallbackNTP=0.europe.pool.ntp.org 1.europe.pool.ntp.org 2.europe.pool.ntp.org 3.europe.pool.ntp.org/\" /etc/systemd/._cfg0000_timesyncd.conf && \\ timedatectl set-ntp true && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" fi && \\ timedatectl && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Setup nftables : emerge net-firewall/nftables && \\ rsync -av /etc/conf.d/nftables /etc/conf.d/._cfg0000_nftables && \\ sed -i 's/^SAVE_ON_STOP=\"yes\"$/SAVE_ON_STOP=\"no\"/' /etc/conf.d/._cfg0000_nftables && \\ /usr/local/sbin/firewall.nft && \\ nft list ruleset > /var/lib/nftables/rules-save && \\ systemctl enable nftables-restore && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 8.2. Secure Boot Setup \u00b6 If \"efi-updatevar\" failed in section 6.4. Secure Boot , you can import Secure Boot files the following way. First, boot into the Gentoo Linux and save necessary files in \"DER\" format: /bin/bash -c ' ( ! mountpoint --quiet /boot/efia && \\ mount /boot/efia || true ) && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/db.crt -out /boot/efia/db.der && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/KEK.crt -out /boot/efia/KEK.der && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/PK.crt -out /boot/efia/PK.der && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Reboot into \"UEFI Firmware Settings\" and import \"db.der\", \"KEK.der\" and \"PK.der\" in this order. Thereafter, enable Secure Boot. Upon successful boot with Secure Boot enabled, you can delete the \".der\" files in /boot/efia . To check whether Secure Boot is enabled execute: mokutil --sb-state To list the installed Secure Boot keys/certs: efi-readvar 8.3. Measured Boot \u00b6 You have two options for measured boot: systemd-cryptenroll : I prefer this on local systems (e.g. laptops, desktop PCs) where I have access to tty and can take care of (optional) pin prompts which are supported with systemd >=251. With pins, you don't have the problem of your laptop, for example, getting stolen and auto-unlocking upon boot. Furthermore, I experienced faster boot with systemd-cryptenroll than with clevis due to the use of PBKDF2 which is secure to use with secure keys. And, you don't have to use the \"app-crypt/clevis\" package from (unofficial) guru overlay . clevis : I prefer this on remote systems, e.g. a server in colocation, where I can take care of unlock via Shamir Secret Sharing which combines TPM 2.0 and Tang pin ( Tang project ). Use either systemd-cryptenroll or clevis in the following. 8.3.1.a) systemd-cryptenroll \u00b6 Install \"app-crypt/tpm2-tools\": echo \"=app-crypt/tpm2-tools-5.2-r1 ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -av tpm2-tools Add support for TPM 2.0 to dracut and systemd: sed -i \"s/\\(sys-apps\\/systemd \\)/\\1 tpm /\" /etc/portage/package.use/main && \\ echo 'add_dracutmodules+=\" tpm2-tss \"' >> /etc/dracut.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Update and make sure sys-apps/systemd is listed among the packages: emerge -atuDN @world Make sure that TPM 2.0 devices (should only be one) are recognised: systemd-cryptenroll --tpm2-device = list Make sure that the PCRs you are going to use have a valid hash and don't consist of zeroes only: tpm2_pcrread sha256 Create new LUKS keyslots on all swap and system partitions. # I only use PCR7 as recommended in the first sentence after following table: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2 # # \"--tpm2-with-pin=yes\" is optional: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#--tpm2-with-pin=BOOL # systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sda3 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sda4 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sdb3 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sdb4 # etc. Reboot your system! 8.3.1.b) clevis \u00b6 If you don't have a DHCP server available to the new system, add the following network settings to the \"CMDLINE\" array variable in /etc/dracut.conf : ip=192.168.10.2::192.168.10.1:255.255.255.0:micro:enp1s0:off Install \"dev-vcs/git\": echo 'dev-vcs/git -webdav' >> /etc/portage/package.use/main && \\ emerge -at dev-vcs/git Install \"app-crypt/clevis\": echo \"app-crypt/clevis ~amd64 dev-libs/jose ~amd64 dev-libs/luksmeta ~amd64 app-crypt/tpm2-tools ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -at app-crypt/clevis Make sure that the PCRs you are going to use have a valid hash and don't consist of zeroes only: tpm2_pcrread sha256 Bind all swap and system LUKS volumes. # I only use PCR7 as recommended in the first sentence after following table: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2 # clevis luks bind -d /dev/sda3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sda4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sdb3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sdb4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' # etc. Show results: clevis luks list -d /dev/sda3 clevis luks list -d /dev/sda4 clevis luks list -d /dev/sdb3 clevis luks list -d /dev/sdb4 # etc. 8.3.2. Rebuild Unified Kernel Image \u00b6 Rebuild the unified kernel image: emerge -at sys-kernel/gentoo-kernel-bin 8.4. Package Cleanup \u00b6 Remove extraneous packages (should be only \"app-editors/nano\", \"app-misc/yq\", \"app-portage/cpuid2cpuflags\" and sys-apps/merge-usr): emerge --depclean -a","title":"8. Post-Boot Configuration"},{"location":"post-boot_configuration/#81-systemd-configuration","text":"Some configuration needs to be done after systemd has been started. Setup localisation : /bin/bash -c ' localectl set-locale LANG=\"de_DE.UTF-8\" LC_COLLATE=\"C.UTF-8\" LC_MESSAGES=\"en_US.UTF-8\" && \\ localectl status && \\ env-update && source /etc/profile && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Setup systemd-timesyncd : /bin/bash -c ' timedatectl set-timezone Europe/Berlin && \\ if grep -q -w \"hypervisor\" <(grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo); then systemctl disable systemd-timesyncd.service echo $? else rsync -av /etc/systemd/timesyncd.conf /etc/systemd/._cfg0000_timesyncd.conf && \\ sed -i -e \"s/#NTP=/NTP=0.de.pool.ntp.org 1.de.pool.ntp.org 2.de.pool.ntp.org 3.de.pool.ntp.org/\" -e \"s/#FallbackNTP=.*/FallbackNTP=0.europe.pool.ntp.org 1.europe.pool.ntp.org 2.europe.pool.ntp.org 3.europe.pool.ntp.org/\" /etc/systemd/._cfg0000_timesyncd.conf && \\ timedatectl set-ntp true && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" fi && \\ timedatectl && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Setup nftables : emerge net-firewall/nftables && \\ rsync -av /etc/conf.d/nftables /etc/conf.d/._cfg0000_nftables && \\ sed -i 's/^SAVE_ON_STOP=\"yes\"$/SAVE_ON_STOP=\"no\"/' /etc/conf.d/._cfg0000_nftables && \\ /usr/local/sbin/firewall.nft && \\ nft list ruleset > /var/lib/nftables/rules-save && \\ systemctl enable nftables-restore && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"8.1. Systemd Configuration"},{"location":"post-boot_configuration/#82-secure-boot-setup","text":"If \"efi-updatevar\" failed in section 6.4. Secure Boot , you can import Secure Boot files the following way. First, boot into the Gentoo Linux and save necessary files in \"DER\" format: /bin/bash -c ' ( ! mountpoint --quiet /boot/efia && \\ mount /boot/efia || true ) && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/db.crt -out /boot/efia/db.der && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/KEK.crt -out /boot/efia/KEK.der && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/PK.crt -out /boot/efia/PK.der && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Reboot into \"UEFI Firmware Settings\" and import \"db.der\", \"KEK.der\" and \"PK.der\" in this order. Thereafter, enable Secure Boot. Upon successful boot with Secure Boot enabled, you can delete the \".der\" files in /boot/efia . To check whether Secure Boot is enabled execute: mokutil --sb-state To list the installed Secure Boot keys/certs: efi-readvar","title":"8.2. Secure Boot Setup"},{"location":"post-boot_configuration/#83-measured-boot","text":"You have two options for measured boot: systemd-cryptenroll : I prefer this on local systems (e.g. laptops, desktop PCs) where I have access to tty and can take care of (optional) pin prompts which are supported with systemd >=251. With pins, you don't have the problem of your laptop, for example, getting stolen and auto-unlocking upon boot. Furthermore, I experienced faster boot with systemd-cryptenroll than with clevis due to the use of PBKDF2 which is secure to use with secure keys. And, you don't have to use the \"app-crypt/clevis\" package from (unofficial) guru overlay . clevis : I prefer this on remote systems, e.g. a server in colocation, where I can take care of unlock via Shamir Secret Sharing which combines TPM 2.0 and Tang pin ( Tang project ). Use either systemd-cryptenroll or clevis in the following.","title":"8.3. Measured Boot"},{"location":"post-boot_configuration/#831a-systemd-cryptenroll","text":"Install \"app-crypt/tpm2-tools\": echo \"=app-crypt/tpm2-tools-5.2-r1 ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -av tpm2-tools Add support for TPM 2.0 to dracut and systemd: sed -i \"s/\\(sys-apps\\/systemd \\)/\\1 tpm /\" /etc/portage/package.use/main && \\ echo 'add_dracutmodules+=\" tpm2-tss \"' >> /etc/dracut.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Update and make sure sys-apps/systemd is listed among the packages: emerge -atuDN @world Make sure that TPM 2.0 devices (should only be one) are recognised: systemd-cryptenroll --tpm2-device = list Make sure that the PCRs you are going to use have a valid hash and don't consist of zeroes only: tpm2_pcrread sha256 Create new LUKS keyslots on all swap and system partitions. # I only use PCR7 as recommended in the first sentence after following table: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2 # # \"--tpm2-with-pin=yes\" is optional: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#--tpm2-with-pin=BOOL # systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sda3 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sda4 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sdb3 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sdb4 # etc. Reboot your system!","title":"8.3.1.a) systemd-cryptenroll"},{"location":"post-boot_configuration/#831b-clevis","text":"If you don't have a DHCP server available to the new system, add the following network settings to the \"CMDLINE\" array variable in /etc/dracut.conf : ip=192.168.10.2::192.168.10.1:255.255.255.0:micro:enp1s0:off Install \"dev-vcs/git\": echo 'dev-vcs/git -webdav' >> /etc/portage/package.use/main && \\ emerge -at dev-vcs/git Install \"app-crypt/clevis\": echo \"app-crypt/clevis ~amd64 dev-libs/jose ~amd64 dev-libs/luksmeta ~amd64 app-crypt/tpm2-tools ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -at app-crypt/clevis Make sure that the PCRs you are going to use have a valid hash and don't consist of zeroes only: tpm2_pcrread sha256 Bind all swap and system LUKS volumes. # I only use PCR7 as recommended in the first sentence after following table: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2 # clevis luks bind -d /dev/sda3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sda4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sdb3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sdb4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' # etc. Show results: clevis luks list -d /dev/sda3 clevis luks list -d /dev/sda4 clevis luks list -d /dev/sdb3 clevis luks list -d /dev/sdb4 # etc.","title":"8.3.1.b) clevis"},{"location":"post-boot_configuration/#832-rebuild-unified-kernel-image","text":"Rebuild the unified kernel image: emerge -at sys-kernel/gentoo-kernel-bin","title":"8.3.2. Rebuild Unified Kernel Image"},{"location":"post-boot_configuration/#84-package-cleanup","text":"Remove extraneous packages (should be only \"app-editors/nano\", \"app-misc/yq\", \"app-portage/cpuid2cpuflags\" and sys-apps/merge-usr): emerge --depclean -a","title":"8.4. Package Cleanup"},{"location":"rescue_system/","text":"Info A feature request has been opened to have SystemRescueCD support \"measured boot\". While we are still on SystemRescueCD and not in chroot, download and customise the SystemRescueCD .iso file. 4.1. Downloads And Verification \u00b6 Prepare the working directory: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ chown meh:meh /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Import the Gnupg public key: su -l meh -c \" mkdir --mode=0700 /tmp/gpgHomeDir && \\ curl -fsSL --proto '=https' --tlsv1.3 https://www.system-rescue.org/security/signing-keys/gnupg-pubkey-fdupoux-20210704-v001.pem | gpg --homedir /tmp/gpgHomeDir --import && \\ gpg --homedir /tmp/gpgHomeDir --import-ownertrust <<<'62989046EB5C7E985ECDF5DD3B0FEA9BE13CA3C9:6:' && \\ gpgconf --homedir /tmp/gpgHomeDir --kill all && \\ echo -e '\\e[1;32mSUCCESS\\e[0m' \" Download .iso and .asc files: rescue_system_version = \" $( su -l meh -c \"curl -fsS --proto '=https' --tlsv1.3 https://gitlab.com/systemrescue/systemrescue-sources/-/raw/main/VERSION\" ) \" && \\ su -l meh -c \" curl --continue-at - -L --proto '=https' --tlsv1.2 --ciphers 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso \\\"https://sourceforge.net/projects/systemrescuecd/files/sysresccd-x86/ ${ rescue_system_version } /systemrescue- ${ rescue_system_version } -amd64.iso/download?use_mirror=netcologne\\\" && \\ curl -fsSL --proto '=https' --tlsv1.3 --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc \\\"https://www.system-rescue.org/releases/ ${ rescue_system_version } /systemrescue- ${ rescue_system_version } -amd64.iso.asc\\\" && \\ echo -e '\\e[1;32mSUCCESS\\e[0m' \" Verify the .iso file: su -l meh -c \" gpg --homedir /tmp/gpgHomeDir --verify /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso && \\ gpgconf --homedir /tmp/gpgHomeDir --kill all \" && \\ chown -R 0 :0 /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 4.2. Configuration \u00b6 Create the folder structure: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/ { recipe/ { iso_delete,iso_add/ { autorun,sysresccd,sysrescue.d } ,iso_patch_and_script,build_into_srm/ { etc/ { ssh,sysctl.d } ,usr/local/sbin }} ,work } && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" If you want to be able to access Gentoo Linux as well as the rescue system via SSH do (copy&paste one after the other): mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh # add your ssh public keys to # /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys # set correct modes chmod u = rwx,g = rx,o = /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root chmod -R u = rwX,go = /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh Configure OpenSSH if you decided to setup public key authentication in the previous step: rsync -av /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ # do some ssh server hardening sed -i \\ -e 's/^#Port 22$/Port 50023/' \\ -e 's/^#PasswordAuthentication yes/PasswordAuthentication no/' \\ -e 's/^#X11Forwarding no$/X11Forwarding no/' /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ grep -q \"^KbdInteractiveAuthentication no $ \" /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ echo \" AuthenticationMethods publickey KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com\" >> /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ # create ssh_host_* files in build_into_srm/etc/ssh/ ssh-keygen -A -f /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm && \\ { diff /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config || true ; } && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Disable \"magic SysRq\" for security sake : echo \"kernel.sysrq = 0\" > /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/sysctl.d/99sysrq.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Copy chroot.sh created by disk.sh : rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rwx,go = r /tmp/chroot.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/usr/local/sbin/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Create settings YAML (copy&paste one after the other): # disable bash history set +o history # replace \"MyPassWord123\" with the password you want to use to login via TTY on the rescue system crypt_pass = \" $( python3 -c 'import crypt; print(crypt.crypt(\"MyPassWord123\", crypt.mksalt(crypt.METHOD_SHA512)))' ) \" # enable bash history set -o history # set default settings echo \"\\ --- global: copytoram: true checksum: true nofirewall: true loadsrm: true setkmap: de-latin1-nodeadkeys dostartx: false dovnc: false rootshell: /bin/bash rootcryptpass: ' ${ crypt_pass } ' autorun: ar_disable: false ar_nowait: true ar_nodel: false ar_ignorefail: false\\ \" > /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysrescue.d/500-settings.yaml # delete variable unset crypt_pass Create firewall rules: # set firewall rules upon bootup. rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /tmp/firewall.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/autorun/autorun && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Write down fingerprints to double check upon initial SSH connection to the SystemRescueCD system: find /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Integrate additional packages: pacman -Sy clevis libpwquality luksmeta sbsigntools tpm2-tools && \\ cowpacman2srm /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysresccd/zz_additional_packages.srm && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 4.3. Folder Structure \u00b6 \u276f tree -a /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe \u251c\u2500\u2500 build_into_srm \u2502 \u251c\u2500\u2500 etc \u2502 \u2502 \u251c\u2500\u2500 ssh \u2502 \u2502 \u2502 \u251c\u2500\u2500 sshd_config \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_dsa_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_dsa_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ecdsa_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ecdsa_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ed25519_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ed25519_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_rsa_key \u2502 \u2502 \u2502 \u2514\u2500\u2500 ssh_host_rsa_key.pub \u2502 \u2502 \u2514\u2500\u2500 sysctl.d \u2502 \u2502 \u2514\u2500\u2500 99sysrq.conf \u2502 \u251c\u2500\u2500 root \u2502 \u2502 \u2514\u2500\u2500 .ssh \u2502 \u2502 \u2514\u2500\u2500 authorized_keys \u2502 \u2514\u2500\u2500 usr \u2502 \u2514\u2500\u2500 local \u2502 \u2514\u2500\u2500 sbin \u2502 \u2514\u2500\u2500 chroot.sh \u251c\u2500\u2500 iso_add \u2502 \u251c\u2500\u2500 autorun \u2502 \u2502 \u2514\u2500\u2500 autorun \u2502 \u251c\u2500\u2500 sysresccd \u2502 \u2502 \u2514\u2500\u2500 zz_additional_packages.srm \u2502 \u2514\u2500\u2500 sysrescue.d \u2502 \u2514\u2500\u2500 500 -settings.yaml \u251c\u2500\u2500 iso_delete \u2514\u2500\u2500 iso_patch_and_script 15 directories, 15 files 4.4. ISO And Rescue Partition \u00b6 Create a customised ISO: sysrescue-customize --auto --overwrite -s /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso -d /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_ssh.iso -r /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe -w /mnt/gentoo/etc/gentoo-installation/systemrescuecd/work && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Copy ISO files to the \"rescue\" partition: mkdir /mnt/iso /mnt/gentoo/mnt/rescue && \\ mount -o loop,ro /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_ssh.iso /mnt/iso && \\ mount -o noatime /mnt/gentoo/mapperRescue /mnt/gentoo/mnt/rescue && \\ rsync -HAXSacv --delete /mnt/iso/ { autorun,sysresccd,sysrescue.d } /mnt/gentoo/mnt/rescue/ && \\ umount /mnt/iso && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 4.5 Kernel Installation \u00b6 Setup the unified kernel image : echo \"cryptdevice=UUID= $( blkid -s UUID -o value /mnt/gentoo/devRescue ) :root root=/dev/mapper/root archisobasedir=sysresccd archisolabel=rescue31415fs noautologin loadsrm=y\" > /tmp/my_cmdline && \\ objcopy \\ --add-section .osrel = \"/usr/lib/os-release\" --change-section-vma .osrel = 0x20000 \\ --add-section .cmdline = \"/tmp/my_cmdline\" --change-section-vma .cmdline = 0x30000 \\ --add-section .linux = \"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/vmlinuz\" --change-section-vma .linux = 0x2000000 \\ --add-section .initrd = \"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/sysresccd.img\" --change-section-vma .initrd = 0x3000000 \\ \"/usr/lib/systemd/boot/efi/linuxx64.efi.stub\" \"/tmp/systemrescuecd.efi\" && \\ while read -r my_esp ; do mkdir \" ${ my_esp /devE/boot \\/ e } \" && \\ mount -o noatime,dmask = 0022 ,fmask = 0133 \" ${ my_esp } \" \" ${ my_esp /devE/boot \\/ e } \" && \\ rsync -av \"/tmp/systemrescuecd.efi\" \" ${ my_esp /devE/boot \\/ e } /\" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" done < < ( find /mnt/gentoo/devEfi* -maxdepth 0 )","title":"4. Rescue System"},{"location":"rescue_system/#41-downloads-and-verification","text":"Prepare the working directory: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ chown meh:meh /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Import the Gnupg public key: su -l meh -c \" mkdir --mode=0700 /tmp/gpgHomeDir && \\ curl -fsSL --proto '=https' --tlsv1.3 https://www.system-rescue.org/security/signing-keys/gnupg-pubkey-fdupoux-20210704-v001.pem | gpg --homedir /tmp/gpgHomeDir --import && \\ gpg --homedir /tmp/gpgHomeDir --import-ownertrust <<<'62989046EB5C7E985ECDF5DD3B0FEA9BE13CA3C9:6:' && \\ gpgconf --homedir /tmp/gpgHomeDir --kill all && \\ echo -e '\\e[1;32mSUCCESS\\e[0m' \" Download .iso and .asc files: rescue_system_version = \" $( su -l meh -c \"curl -fsS --proto '=https' --tlsv1.3 https://gitlab.com/systemrescue/systemrescue-sources/-/raw/main/VERSION\" ) \" && \\ su -l meh -c \" curl --continue-at - -L --proto '=https' --tlsv1.2 --ciphers 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso \\\"https://sourceforge.net/projects/systemrescuecd/files/sysresccd-x86/ ${ rescue_system_version } /systemrescue- ${ rescue_system_version } -amd64.iso/download?use_mirror=netcologne\\\" && \\ curl -fsSL --proto '=https' --tlsv1.3 --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc \\\"https://www.system-rescue.org/releases/ ${ rescue_system_version } /systemrescue- ${ rescue_system_version } -amd64.iso.asc\\\" && \\ echo -e '\\e[1;32mSUCCESS\\e[0m' \" Verify the .iso file: su -l meh -c \" gpg --homedir /tmp/gpgHomeDir --verify /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso && \\ gpgconf --homedir /tmp/gpgHomeDir --kill all \" && \\ chown -R 0 :0 /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"4.1. Downloads And Verification"},{"location":"rescue_system/#42-configuration","text":"Create the folder structure: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/ { recipe/ { iso_delete,iso_add/ { autorun,sysresccd,sysrescue.d } ,iso_patch_and_script,build_into_srm/ { etc/ { ssh,sysctl.d } ,usr/local/sbin }} ,work } && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" If you want to be able to access Gentoo Linux as well as the rescue system via SSH do (copy&paste one after the other): mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh # add your ssh public keys to # /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys # set correct modes chmod u = rwx,g = rx,o = /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root chmod -R u = rwX,go = /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh Configure OpenSSH if you decided to setup public key authentication in the previous step: rsync -av /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ # do some ssh server hardening sed -i \\ -e 's/^#Port 22$/Port 50023/' \\ -e 's/^#PasswordAuthentication yes/PasswordAuthentication no/' \\ -e 's/^#X11Forwarding no$/X11Forwarding no/' /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ grep -q \"^KbdInteractiveAuthentication no $ \" /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ echo \" AuthenticationMethods publickey KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com\" >> /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ # create ssh_host_* files in build_into_srm/etc/ssh/ ssh-keygen -A -f /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm && \\ { diff /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config || true ; } && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Disable \"magic SysRq\" for security sake : echo \"kernel.sysrq = 0\" > /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/sysctl.d/99sysrq.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Copy chroot.sh created by disk.sh : rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rwx,go = r /tmp/chroot.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/usr/local/sbin/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Create settings YAML (copy&paste one after the other): # disable bash history set +o history # replace \"MyPassWord123\" with the password you want to use to login via TTY on the rescue system crypt_pass = \" $( python3 -c 'import crypt; print(crypt.crypt(\"MyPassWord123\", crypt.mksalt(crypt.METHOD_SHA512)))' ) \" # enable bash history set -o history # set default settings echo \"\\ --- global: copytoram: true checksum: true nofirewall: true loadsrm: true setkmap: de-latin1-nodeadkeys dostartx: false dovnc: false rootshell: /bin/bash rootcryptpass: ' ${ crypt_pass } ' autorun: ar_disable: false ar_nowait: true ar_nodel: false ar_ignorefail: false\\ \" > /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysrescue.d/500-settings.yaml # delete variable unset crypt_pass Create firewall rules: # set firewall rules upon bootup. rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /tmp/firewall.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/autorun/autorun && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Write down fingerprints to double check upon initial SSH connection to the SystemRescueCD system: find /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Integrate additional packages: pacman -Sy clevis libpwquality luksmeta sbsigntools tpm2-tools && \\ cowpacman2srm /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysresccd/zz_additional_packages.srm && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"4.2. Configuration"},{"location":"rescue_system/#43-folder-structure","text":"\u276f tree -a /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe \u251c\u2500\u2500 build_into_srm \u2502 \u251c\u2500\u2500 etc \u2502 \u2502 \u251c\u2500\u2500 ssh \u2502 \u2502 \u2502 \u251c\u2500\u2500 sshd_config \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_dsa_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_dsa_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ecdsa_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ecdsa_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ed25519_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ed25519_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_rsa_key \u2502 \u2502 \u2502 \u2514\u2500\u2500 ssh_host_rsa_key.pub \u2502 \u2502 \u2514\u2500\u2500 sysctl.d \u2502 \u2502 \u2514\u2500\u2500 99sysrq.conf \u2502 \u251c\u2500\u2500 root \u2502 \u2502 \u2514\u2500\u2500 .ssh \u2502 \u2502 \u2514\u2500\u2500 authorized_keys \u2502 \u2514\u2500\u2500 usr \u2502 \u2514\u2500\u2500 local \u2502 \u2514\u2500\u2500 sbin \u2502 \u2514\u2500\u2500 chroot.sh \u251c\u2500\u2500 iso_add \u2502 \u251c\u2500\u2500 autorun \u2502 \u2502 \u2514\u2500\u2500 autorun \u2502 \u251c\u2500\u2500 sysresccd \u2502 \u2502 \u2514\u2500\u2500 zz_additional_packages.srm \u2502 \u2514\u2500\u2500 sysrescue.d \u2502 \u2514\u2500\u2500 500 -settings.yaml \u251c\u2500\u2500 iso_delete \u2514\u2500\u2500 iso_patch_and_script 15 directories, 15 files","title":"4.3. Folder Structure"},{"location":"rescue_system/#44-iso-and-rescue-partition","text":"Create a customised ISO: sysrescue-customize --auto --overwrite -s /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso -d /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_ssh.iso -r /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe -w /mnt/gentoo/etc/gentoo-installation/systemrescuecd/work && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Copy ISO files to the \"rescue\" partition: mkdir /mnt/iso /mnt/gentoo/mnt/rescue && \\ mount -o loop,ro /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_ssh.iso /mnt/iso && \\ mount -o noatime /mnt/gentoo/mapperRescue /mnt/gentoo/mnt/rescue && \\ rsync -HAXSacv --delete /mnt/iso/ { autorun,sysresccd,sysrescue.d } /mnt/gentoo/mnt/rescue/ && \\ umount /mnt/iso && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"4.4. ISO And Rescue Partition"},{"location":"rescue_system/#45-kernel-installation","text":"Setup the unified kernel image : echo \"cryptdevice=UUID= $( blkid -s UUID -o value /mnt/gentoo/devRescue ) :root root=/dev/mapper/root archisobasedir=sysresccd archisolabel=rescue31415fs noautologin loadsrm=y\" > /tmp/my_cmdline && \\ objcopy \\ --add-section .osrel = \"/usr/lib/os-release\" --change-section-vma .osrel = 0x20000 \\ --add-section .cmdline = \"/tmp/my_cmdline\" --change-section-vma .cmdline = 0x30000 \\ --add-section .linux = \"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/vmlinuz\" --change-section-vma .linux = 0x2000000 \\ --add-section .initrd = \"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/sysresccd.img\" --change-section-vma .initrd = 0x3000000 \\ \"/usr/lib/systemd/boot/efi/linuxx64.efi.stub\" \"/tmp/systemrescuecd.efi\" && \\ while read -r my_esp ; do mkdir \" ${ my_esp /devE/boot \\/ e } \" && \\ mount -o noatime,dmask = 0022 ,fmask = 0133 \" ${ my_esp } \" \" ${ my_esp /devE/boot \\/ e } \" && \\ rsync -av \"/tmp/systemrescuecd.efi\" \" ${ my_esp /devE/boot \\/ e } /\" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" done < < ( find /mnt/gentoo/devEfi* -maxdepth 0 )","title":"4.5 Kernel Installation"},{"location":"selinux/","text":"10.1. Enable SELinux \u00b6 Info Currently, I only use SELinux on servers, and only \"mcs\" policy type to be able to better isolate virtual machines from each other. Reduce the number of services: systemctl mask user@.service && \\ systemctl disable systemd-userdbd.socket && \\ cp -av /etc/nsswitch.conf /etc/._cfg0000_nsswitch.conf && \\ sed -i 's/^hosts:\\([[:space:]]*\\)mymachines \\(.*\\)$/hosts:\\1\\2/' /etc/._cfg0000_nsswitch.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup \"make.conf\": cp -av /etc/portage/make.conf /etc/portage/._cfg0000_make.conf && \\ echo -e 'POLICY_TYPES=\"mcs\"\\n' >> /etc/portage/._cfg0000_make.conf && \\ sed -i 's/^USE_HARDENED=\"\\(.*\\)\"/USE_HARDENED=\"\\1 -ubac -unconfined\"/' /etc/portage/._cfg0000_make.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Initial SELinux installation: eselect profile set \"duxsco:hardened-systemd-selinux\" && \\ echo 'sec-policy/* ~amd64' >> /etc/portage/package.accept_keywords/main && \\ # To get a nice looking html site in /usr/share/doc/selinux-base-<VERSION>/mcs/html: echo 'sec-policy/selinux-base doc' >> /etc/portage/package.use/main && \\ FEATURES = \"-selinux\" emerge -1 selinux-base && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Configure SELinux: cp -av /etc/selinux/config /etc/selinux/._cfg0000_config && \\ sed -i 's/^SELINUXTYPE=strict$/SELINUXTYPE=mcs/' /etc/selinux/._cfg0000_config && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Update packages: FEATURES = \"-selinux -sesandbox\" emerge -1 selinux-base && \\ FEATURES = \"-selinux -sesandbox\" emerge -1 selinux-base-policy && \\ emerge -atuDN @world Enable auditd logging: systemctl enable auditd.service && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Rebuild the kernel with SELinux support: emerge sys-kernel/gentoo-kernel-bin && \\ rm -v /boot/efi*/EFI/Linux/gentoo-*-gentoo-dist.efi && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Reboot with permissive kernel . Make sure that UBAC gets disabled: bash -c '( cd /usr/share/selinux/mcs && \\ semodule -i base.pp -i $(ls *.pp | grep -v base.pp) && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" )' 10.2. Relabel \u00b6 Relabel the entire system : mkdir /mnt/gentoo && \\ mount -o bind / /mnt/gentoo && \\ setfiles -r /mnt/gentoo /etc/selinux/mcs/contexts/files/file_contexts /mnt/gentoo/ { dev,home,proc,run,sys,tmp,boot/efi*,var/cache/binpkgs,var/cache/distfiles,var/db/repos/gentoo,var/tmp } && \\ umount /mnt/gentoo && \\ rlpkg -a -r && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Make sure that nothing (except perhaps \".keep\" files) is unlabeled: export tmpdir = \" $( mktemp -d ) \" && \\ mount --bind / \" $tmpdir \" && \\ find \" $tmpdir \" -context system_u:object_r:unlabeled_t:s0 && \\ umount \" $tmpdir \" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" If \"/proc\" was listed by above codeblock you have to relabel to avoid a denial: \u276f cat <<EOF | audit2allow [ 19.902620] audit: type=1400 audit(1663630933.439:3): avc: denied { mounton } for pid=1062 comm=\"(auditd)\" path=\"/run/systemd/unit-root/proc\" dev=\"dm-3\" ino=67581 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:unlabeled_t:s0 tclass=dir permissive=1 EOF #============= init_t ============== allow init_t unlabeled_t:dir mounton ; # Credits: grift :) \u276f export tmpdir = \" $( mktemp -d ) \" && mount --bind / \" $tmpdir \" && chcon system_u:object_r:proc_t:s0 \" $tmpdir \" /proc && umount \" $tmpdir \" && echo -e \"\\e[1;32mSUCCESS\\e[0m\" In section 6.7. Additional Packages , the SSH port has been changed to 50022. This needs to be considered for no SELinux denials to occur: \u276f semanage port -l | grep -e ssh -e Port SELinux Port Type Proto Port Number ssh_port_t tcp 22 \u276f semanage port -a -t ssh_port_t -p tcp 50022 \u276f semanage port -l | grep -e ssh -e Port SELinux Port Type Proto Port Number ssh_port_t tcp 50022 , 22 10.3. Users and services \u00b6 Default \"mcs\" SELinux \"login\" and \"user\" settings: \u276f semanage login -l Login Name SELinux User MLS/MCS Range Service __default__ user_u s0-s0 * root root s0-s0:c0.c1023 * \u276f semanage user -l Labeling MLS/ MLS/ SELinux User Prefix MCS Level MCS Range SELinux Roles root sysadm s0 s0-s0:c0.c1023 staff_r sysadm_r staff_u staff s0 s0-s0:c0.c1023 staff_r sysadm_r sysadm_u sysadm s0 s0-s0:c0.c1023 sysadm_r system_u user s0 s0-s0:c0.c1023 system_r unconfined_u unconfined s0 s0-s0:c0.c1023 unconfined_r user_u user s0 s0 user_r Add the initial user to the administration SELinux user : semanage login -a -s staff_u david && \\ restorecon -RFv /home/david && \\ bash -c 'echo \"%wheel ALL=(ALL) TYPE=sysadm_t ROLE=sysadm_r ALL\" | EDITOR=\"tee\" visudo -f /etc/sudoers.d/wheel && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"' Now, we should have: \u276f semanage login -l Login Name SELinux User MLS/MCS Range Service __default__ user_u s0-s0 * david staff_u s0-s0:c0.c1023 * root root s0-s0:c0.c1023 * Create \"/var/lib/sepolgen/interface_info\" for \"audit2why -R\" to work: sepolgen-ifgen -i /usr/share/selinux/mcs/include/support/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 10.4. SELinux policies \u00b6 At this point, you can reboot into permissive mode again and use the selinux-policy-creator.sh script.","title":"10. SELinux (optional)"},{"location":"selinux/#101-enable-selinux","text":"Info Currently, I only use SELinux on servers, and only \"mcs\" policy type to be able to better isolate virtual machines from each other. Reduce the number of services: systemctl mask user@.service && \\ systemctl disable systemd-userdbd.socket && \\ cp -av /etc/nsswitch.conf /etc/._cfg0000_nsswitch.conf && \\ sed -i 's/^hosts:\\([[:space:]]*\\)mymachines \\(.*\\)$/hosts:\\1\\2/' /etc/._cfg0000_nsswitch.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup \"make.conf\": cp -av /etc/portage/make.conf /etc/portage/._cfg0000_make.conf && \\ echo -e 'POLICY_TYPES=\"mcs\"\\n' >> /etc/portage/._cfg0000_make.conf && \\ sed -i 's/^USE_HARDENED=\"\\(.*\\)\"/USE_HARDENED=\"\\1 -ubac -unconfined\"/' /etc/portage/._cfg0000_make.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Initial SELinux installation: eselect profile set \"duxsco:hardened-systemd-selinux\" && \\ echo 'sec-policy/* ~amd64' >> /etc/portage/package.accept_keywords/main && \\ # To get a nice looking html site in /usr/share/doc/selinux-base-<VERSION>/mcs/html: echo 'sec-policy/selinux-base doc' >> /etc/portage/package.use/main && \\ FEATURES = \"-selinux\" emerge -1 selinux-base && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Configure SELinux: cp -av /etc/selinux/config /etc/selinux/._cfg0000_config && \\ sed -i 's/^SELINUXTYPE=strict$/SELINUXTYPE=mcs/' /etc/selinux/._cfg0000_config && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Update packages: FEATURES = \"-selinux -sesandbox\" emerge -1 selinux-base && \\ FEATURES = \"-selinux -sesandbox\" emerge -1 selinux-base-policy && \\ emerge -atuDN @world Enable auditd logging: systemctl enable auditd.service && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Rebuild the kernel with SELinux support: emerge sys-kernel/gentoo-kernel-bin && \\ rm -v /boot/efi*/EFI/Linux/gentoo-*-gentoo-dist.efi && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Reboot with permissive kernel . Make sure that UBAC gets disabled: bash -c '( cd /usr/share/selinux/mcs && \\ semodule -i base.pp -i $(ls *.pp | grep -v base.pp) && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" )'","title":"10.1. Enable SELinux"},{"location":"selinux/#102-relabel","text":"Relabel the entire system : mkdir /mnt/gentoo && \\ mount -o bind / /mnt/gentoo && \\ setfiles -r /mnt/gentoo /etc/selinux/mcs/contexts/files/file_contexts /mnt/gentoo/ { dev,home,proc,run,sys,tmp,boot/efi*,var/cache/binpkgs,var/cache/distfiles,var/db/repos/gentoo,var/tmp } && \\ umount /mnt/gentoo && \\ rlpkg -a -r && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Make sure that nothing (except perhaps \".keep\" files) is unlabeled: export tmpdir = \" $( mktemp -d ) \" && \\ mount --bind / \" $tmpdir \" && \\ find \" $tmpdir \" -context system_u:object_r:unlabeled_t:s0 && \\ umount \" $tmpdir \" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" If \"/proc\" was listed by above codeblock you have to relabel to avoid a denial: \u276f cat <<EOF | audit2allow [ 19.902620] audit: type=1400 audit(1663630933.439:3): avc: denied { mounton } for pid=1062 comm=\"(auditd)\" path=\"/run/systemd/unit-root/proc\" dev=\"dm-3\" ino=67581 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:unlabeled_t:s0 tclass=dir permissive=1 EOF #============= init_t ============== allow init_t unlabeled_t:dir mounton ; # Credits: grift :) \u276f export tmpdir = \" $( mktemp -d ) \" && mount --bind / \" $tmpdir \" && chcon system_u:object_r:proc_t:s0 \" $tmpdir \" /proc && umount \" $tmpdir \" && echo -e \"\\e[1;32mSUCCESS\\e[0m\" In section 6.7. Additional Packages , the SSH port has been changed to 50022. This needs to be considered for no SELinux denials to occur: \u276f semanage port -l | grep -e ssh -e Port SELinux Port Type Proto Port Number ssh_port_t tcp 22 \u276f semanage port -a -t ssh_port_t -p tcp 50022 \u276f semanage port -l | grep -e ssh -e Port SELinux Port Type Proto Port Number ssh_port_t tcp 50022 , 22","title":"10.2. Relabel"},{"location":"selinux/#103-users-and-services","text":"Default \"mcs\" SELinux \"login\" and \"user\" settings: \u276f semanage login -l Login Name SELinux User MLS/MCS Range Service __default__ user_u s0-s0 * root root s0-s0:c0.c1023 * \u276f semanage user -l Labeling MLS/ MLS/ SELinux User Prefix MCS Level MCS Range SELinux Roles root sysadm s0 s0-s0:c0.c1023 staff_r sysadm_r staff_u staff s0 s0-s0:c0.c1023 staff_r sysadm_r sysadm_u sysadm s0 s0-s0:c0.c1023 sysadm_r system_u user s0 s0-s0:c0.c1023 system_r unconfined_u unconfined s0 s0-s0:c0.c1023 unconfined_r user_u user s0 s0 user_r Add the initial user to the administration SELinux user : semanage login -a -s staff_u david && \\ restorecon -RFv /home/david && \\ bash -c 'echo \"%wheel ALL=(ALL) TYPE=sysadm_t ROLE=sysadm_r ALL\" | EDITOR=\"tee\" visudo -f /etc/sudoers.d/wheel && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"' Now, we should have: \u276f semanage login -l Login Name SELinux User MLS/MCS Range Service __default__ user_u s0-s0 * david staff_u s0-s0:c0.c1023 * root root s0-s0:c0.c1023 * Create \"/var/lib/sepolgen/interface_info\" for \"audit2why -R\" to work: sepolgen-ifgen -i /usr/share/selinux/mcs/include/support/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"10.3. Users and services"},{"location":"selinux/#104-selinux-policies","text":"At this point, you can reboot into permissive mode again and use the selinux-policy-creator.sh script.","title":"10.4. SELinux policies"},{"location":"system_setup/","text":"6.1. Portage Setup \u00b6 Make dispatch-conf show diffs in color and use vimdiff for merging: rsync -av /etc/dispatch-conf.conf /etc/._cfg0000_dispatch-conf.conf && \\ sed -i \\ -e \"s/diff=\\\"diff -Nu '%s' '%s'\\\"/diff=\\\"diff --color=always -Nu '%s' '%s'\\\"/\" \\ -e \"s/merge=\\\"sdiff --suppress-common-lines --output='%s' '%s' '%s'\\\"/merge=\\\"vimdiff -c'saveas %s' -c next -c'setlocal noma readonly' -c prev %s %s\\\"/\" \\ /etc/._cfg0000_dispatch-conf.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Install to be able to configure make.conf : emerge -1 app-portage/cpuid2cpuflags Configure make.conf (copy&paste one after the other): rsync -av /etc/portage/make.conf /etc/portage/._cfg0000_make.conf # If you use distcc, beware of: # https://wiki.gentoo.org/wiki/Distcc#-march.3Dnative # # You could resolve \"-march=native\" with app-misc/resolve-march-native sed -i 's/COMMON_FLAGS=\"-O2 -pipe\"/COMMON_FLAGS=\"-march=native -O2 -pipe\"/' /etc/portage/._cfg0000_make.conf echo 'EMERGE_DEFAULT_OPTS=\"--buildpkg --buildpkg-exclude ' \\' '*/*-bin sys-kernel/* virtual/*' \\' ' --noconfmem --with-bdeps=y --complete-graph=y\" L10N=\"de\" LINGUAS=\"${L10N}\" GENTOO_MIRRORS=\"https://ftp-stud.hs-esslingen.de/pub/Mirrors/gentoo/ https://ftp.fau.de/gentoo/ https://ftp.tu-ilmenau.de/mirror/gentoo/\" FETCHCOMMAND=\"curl --fail --silent --show-error --location --proto ' \\' '=https' \\' ' --tlsv1.2 --ciphers ' \\' 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' \\' ' --retry 2 --connect-timeout 60 -o \\\"\\${DISTDIR}/\\${FILE}\\\" \\\"\\${URI}\\\"\" RESUMECOMMAND=\"${FETCHCOMMAND} --continue-at -\" USE_HARDENED=\"pie -sslv3 -suid verify-sig\" USE=\"${USE_HARDENED} fish-completion\" ' >> /etc/portage/._cfg0000_make.conf echo \"*/* $( cpuid2cpuflags ) \" > /etc/portage/package.use/00cpu-flags (Optional) Change GENTOO_MIRRORS in \"/etc/portage/make.conf\" (copy&paste one after the other): # Install app-misc/yq ACCEPT_KEYWORDS = ~amd64 emerge -1 app-misc/yq # Get a list of country codes and names: curl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | xq -r '.mirrors.mirrorgroup[] | \"\\(.[\"@country\"]) \\(.[\"@countryname\"])\"' | sort -k2.2 # Choose your countries the mirrors should be located in: country = '\"AU\",\"BE\",\"BR\",\"CA\",\"CH\",\"CL\",\"CN\",\"CZ\",\"DE\",\"DK\",\"ES\",\"FR\",\"GR\",\"HK\",\"IL\",\"IT\",\"JP\",\"KR\",\"KZ\",\"LU\",\"NA\",\"NC\",\"NL\",\"PH\",\"PL\",\"PT\",\"RO\",\"RU\",\"SG\",\"SK\",\"TR\",\"TW\",\"UK\",\"US\",\"ZA\"' # Get a list of mirrors available over IPv4/IPv6 dual-stack in the countries of your choice with TLSv1.3 support curl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | xq -r \".mirrors.mirrorgroup[] | select([.\\\"@country\\\"] | inside([ ${ country } ])) | .mirror | if type==\\\"array\\\" then .[] else . end | .uri | if type==\\\"array\\\" then .[] else . end | select(.\\\"@protocol\\\" == \\\"http\\\" and .\\\"@ipv4\\\" == \\\"y\\\" and .\\\"@ipv6\\\" == \\\"y\\\" and (.\\\"#text\\\" | startswith(\\\"https://\\\"))) | .\\\"#text\\\"\" | while read -r i ; do if curl -fs --proto '=https' --tlsv1.3 -I \" ${ i } \" >/dev/null ; then echo \" ${ i } \" fi done I prefer English manpages and ignore above \"L10N\" setting for \"sys-apps/man-pages\". Makes using Stackoverflow easier \ud83d\ude09. echo \"sys-apps/man-pages -l10n_de\" >> /etc/portage/package.use/main && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Mitigate CVE-2022-29154 among others before using \"rsync\" via \"eix-sync\": echo 'net-misc/rsync ~amd64' >> /etc/portage/package.accept_keywords/main && \\ emerge -1 net-misc/rsync && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Install app-portage/eix : emerge -at app-portage/eix Execute \"eix-sync\" : eix-sync && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Read Gentoo news items : eselect news list # eselect news read 1 # eselect news read 2 # etc. Switch over to the custom hardened/merged-usr profile : env ACCEPT_KEYWORDS = \"~amd64\" emerge -1 sys-apps/merge-usr && \\ merge-usr && \\ eselect profile set duxsco:hardened-systemd && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ emerge -1 sys-devel/gcc && \\ emerge -1 sys-devel/binutils sys-libs/glibc && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ emerge -e @world && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Update the system: touch /etc/sysctl.conf && \\ echo \"sys-apps/systemd cryptsetup gnuefi\" >> /etc/portage/package.use/main && \\ emerge -atuDN @world 6.2. Non-Root User Creation \u00b6 Create a non-root user and set a temporary password \"compatible\" with English keyboard layout. After rebooting you have to take care of localisation and will be able to set a secure password of your choice thereafter. useradd -m -G wheel -s /bin/bash david && \\ chmod u = rwx,og = /home/david && \\ echo -e 'alias cp=\"cp -i\"\\nalias mv=\"mv -i\"\\nalias rm=\"rm -i\"' >> /home/david/.bash_aliases && \\ chown david:david /home/david/.bash_aliases && \\ echo 'source \"${HOME}/.bash_aliases\"' >> /home/david/.bashrc && \\ passwd david (Optional) Create your ~/.ssh/authorized_keys : rsync -av --chown = david:david /etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys /home/david/.ssh/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup app-admin/sudo : echo \"app-admin/sudo -sendmail\" >> /etc/portage/package.use/main && \\ emerge app-admin/sudo && \\ { [[ -d /etc/sudoers.d ]] || mkdir -m u = rwx,g = rx,o = /etc/sudoers.d ; } && \\ echo \"%wheel ALL=(ALL) ALL\" | EDITOR = \"tee\" visudo -f /etc/sudoers.d/wheel && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup app-editors/vim : USE = \"-verify-sig\" emerge -1 dev-libs/libsodium && \\ emerge -1 dev-libs/libsodium app-editors/vim app-vim/molokai && \\ emerge --select --noreplace app-editors/vim app-vim/molokai && \\ cp -av /etc/portage/make.conf /etc/portage/._cfg0000_make.conf && \\ sed -i 's/^USE=\"\\([^\"]*\\)\"$/USE=\"\\1 vim-syntax\"/' /etc/portage/._cfg0000_make.conf && \\ echo \"filetype plugin on filetype indent on set number set paste syntax on colorscheme molokai\" | tee -a /root/.vimrc >> /home/david/.vimrc && \\ chown david:david /home/david/.vimrc && \\ eselect editor set vi && \\ eselect vi set vim && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 6.3. Configuration of /etc/fstab \u00b6 Setup /etc/fstab : SWAP_UUID = \" $( blkid -s UUID -o value /mapperSwap ) \" && \\ SYSTEM_UUID = \" $( blkid -s UUID -o value /mapperSystem ) \" && \\ echo \"\" >> /etc/fstab && \\ echo \" $( find /devEfi* -maxdepth 0 | while read -r i ; do echo \"UUID= $( blkid -s UUID -o value \" $i \" ) ${ i /devE/boot \\/ e } vfat noatime,dmask=0022,fmask=0133 0 0\" done) UUID= ${ SWAP_UUID } none swap sw 0 0 UUID= ${ SYSTEM_UUID } / btrfs noatime,subvol=@root 0 0 UUID= ${ SYSTEM_UUID } /home btrfs noatime,subvol=@home 0 0 UUID= ${ SYSTEM_UUID } /var/cache/binpkgs btrfs noatime,subvol=@binpkgs 0 0 UUID= ${ SYSTEM_UUID } /var/cache/distfiles btrfs noatime,subvol=@distfiles 0 0 UUID= ${ SYSTEM_UUID } /var/db/repos/gentoo btrfs noatime,subvol=@ebuilds 0 0 UUID= ${ SYSTEM_UUID } /var/tmp btrfs noatime,subvol=@var_tmp 0 0 \" | column -o \" \" -t >> /etc/fstab && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 6.4. Secure Boot \u00b6 Credits: https://www.funtoo.org/Secure_Boot https://www.rodsbooks.com/efi-bootloaders/secureboot.html https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot In order to add your custom keys, \"Setup Mode\" must have been enabled in your \"UEFI Firmware Settings\" before booting into SystemRescueCD. But, you can install Secure Boot files later on if you missed enabling \"Setup Mode\". In the following, however, you have to generate Secure Boot files either way. Install required tools: echo \"sys-boot/mokutil ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -at app-crypt/efitools app-crypt/sbsigntools sys-boot/mokutil Create Secure Boot keys and certificates: mkdir --mode = 0700 /etc/gentoo-installation/secureboot && \\ pushd /etc/gentoo-installation/secureboot && \\ # Create the keys openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=PK/\" -keyout PK.key -out PK.crt -days 7300 -nodes -sha256 && \\ openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=KEK/\" -keyout KEK.key -out KEK.crt -days 7300 -nodes -sha256 && \\ openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=db/\" -keyout db.key -out db.crt -days 7300 -nodes -sha256 && \\ # Prepare installation in EFI uuid = \" $( uuidgen --random ) \" && \\ cert-to-efi-sig-list -g \" ${ uuid } \" PK.crt PK.esl && \\ cert-to-efi-sig-list -g \" ${ uuid } \" KEK.crt KEK.esl && \\ cert-to-efi-sig-list -g \" ${ uuid } \" db.crt db.esl && \\ sign-efi-sig-list -k PK.key -c PK.crt PK PK.esl PK.auth && \\ sign-efi-sig-list -k PK.key -c PK.crt KEK KEK.esl KEK.auth && \\ sign-efi-sig-list -k KEK.key -c KEK.crt db db.esl db.auth && \\ popd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" If the following commands don't work you have to install \"db.auth\", \"KEK.auth\" and \"PK.auth\" over the \"UEFI Firmware Settings\" upon reboot after the completion of this installation guide. Further information can be found in chapter 8.2. Secure Boot Setup . Beware that the following commands delete all existing keys. pushd /etc/gentoo-installation/secureboot && \\ # Make them mutable { chattr -i /sys/firmware/efi/efivars/ { PK,KEK,db,dbx } * || true ; } && \\ # Install keys into EFI (PK last as it will enable Custom Mode locking out further unsigned changes) efi-updatevar -f db.auth db && \\ efi-updatevar -f KEK.auth KEK && \\ efi-updatevar -f PK.auth PK && \\ # Make them immutable { chattr +i /sys/firmware/efi/efivars/ { PK,KEK,db,dbx } * || true ; } && \\ popd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 6.5. Kernel Installation \u00b6 Install sys-boot/efibootmgr : emerge -at sys-boot/efibootmgr Setup ESP(s): while read -r my_esp ; do bootctl --esp-path = \"/boot/ ${ my_esp } \" install && \\ efibootmgr --create --disk \"/dev/ $( lsblk -ndo pkname \" $( readlink -f \"/ ${ my_esp /efi/devEfi } \" ) \" ) \" --part 1 --label \"gentoo31415efi ${ my_esp } \" --loader '\\EFI\\systemd\\systemd-bootx64.efi' && \\ echo -e \"timeout 10\\neditor no\" > \"/boot/ ${ my_esp } /loader/loader.conf\" && \\ mv \"/boot/ ${ my_esp } /systemrescuecd.efi\" \"/boot/ ${ my_esp } /EFI/Linux/\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/ ${ my_esp } /EFI/systemd/systemd-bootx64.efi\" \"/boot/ ${ my_esp } /EFI/systemd/systemd-bootx64.efi\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/ ${ my_esp } /EFI/BOOT/BOOTX64.EFI\" \"/boot/ ${ my_esp } /EFI/BOOT/BOOTX64.EFI\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/ ${ my_esp } /EFI/Linux/systemrescuecd.efi\" \"/boot/ ${ my_esp } /EFI/Linux/systemrescuecd.efi\" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" done < < ( grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/boot/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab ) Microcode updates are not necessary for virtual machines . Otherwise, install \"sys-firmware/intel-microcode\" if you have an Intel CPU. Or, follow the Gentoo wiki instruction to update the microcode on AMD systems. ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ grep -q \"^vendor_id[[:space:]]*:[[:space:]]*GenuineIntel $ \" /proc/cpuinfo && \\ echo \"sys-firmware/intel-microcode intel-ucode\" >> /etc/portage/package.license && \\ echo \"sys-firmware/intel-microcode hostonly\" >> /etc/portage/package.use/main && \\ emerge -at sys-firmware/intel-microcode && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup portage hooks that takes care of unified kernel image creation and Secure Boot signing: mkdir -p /etc/portage/env/sys-apps /etc/portage/env/sys-firmware /etc/portage/env/sys-kernel && \\ rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-firmware/intel-microcode && \\ rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/gentoo-kernel-bin && \\ rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/linux-firmware && \\ rm -f /root/portage_hook_kernel && \\ echo 'if [[ ${EBUILD_PHASE} == postinst ]]; then while read -r my_esp; do bootctl --esp-path=\"/boot/${my_esp}\" --no-variables --graceful update && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/${my_esp}/EFI/systemd/systemd-bootx64.efi\" \"/boot/${my_esp}/EFI/systemd/systemd-bootx64.efi\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/${my_esp}/EFI/BOOT/BOOTX64.EFI\" \"/boot/${my_esp}/EFI/BOOT/BOOTX64.EFI\" if [[ $? -ne 0 ]]; then cat <<' \\' 'EOF' \\' ' ___________________________ < Failed to Secure Boot sign! > --------------------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || EOF fi done < <(grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/boot/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab) fi' > /etc/portage/env/sys-apps/systemd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup sys-kernel/dracut (copy&paste one after the other): emerge -at sys-kernel/dracut system_uuid = \" $( blkid -s UUID -o value /mapperSystem ) \" my_crypt_root = \" $( blkid -s UUID -o value /devSystem* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s - ) \" my_crypt_swap = \" $( blkid -s UUID -o value /devSwap* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s - ) \" unset my_systemd_cryptenroll # If you intend to use systemd-cryptenroll, define this variable: # my_systemd_cryptenroll=\",tpm2-device=auto\" echo \"\\ hostonly=no hostonly_cmdline=yes use_fstab=yes compress=xz show_modules=yes uefi=yes early_microcode=yes uefi_stub=/usr/lib/systemd/boot/efi/linuxx64.efi.stub uefi_secureboot_cert=/etc/gentoo-installation/secureboot/db.crt uefi_secureboot_key=/etc/gentoo-installation/secureboot/db.key CMDLINE=( ro root=UUID= ${ system_uuid } ${ my_crypt_root } ${ my_crypt_swap } rd.luks.options=password-echo=no ${ my_systemd_cryptenroll } rootfstype=btrfs rootflags=subvol=@root mitigations=auto,nosmt ) kernel_cmdline=\" \\$ { CMDLINE [ * ]} \" unset CMDLINE\" >> /etc/dracut.conf Install tools required for booting: export install_lts_kernel = \"true\" && \\ echo \"sys-fs/btrfs-progs ~amd64 sys-kernel/gentoo-kernel-bin ~amd64 sys-kernel/linux-headers ~amd64 virtual/dist-kernel ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ { [ $install_lts_kernel = true ] && \\ echo \"\\ >=sys-fs/btrfs-progs-5.16 >=sys-kernel/gentoo-kernel-bin-5.16 >=sys-kernel/linux-headers-5.16 >=virtual/dist-kernel-5.16\" >> /etc/portage/package.mask/main || \\ true } && \\ echo \"sys-fs/btrfs-progs -convert\" >> /etc/portage/package.use/main && \\ echo \"sys-kernel/gentoo-kernel-bin -initramfs\" >> /etc/portage/package.use/main && \\ echo \"sys-kernel/linux-firmware linux-fw-redistributable no-source-code\" >> /etc/portage/package.license && \\ { [ -e /devSwapb ] && \\ emerge -at sys-fs/btrfs-progs sys-fs/mdadm sys-kernel/linux-firmware || \\ emerge -at sys-fs/btrfs-progs sys-kernel/linux-firmware } Install the kernel : emerge -at sys-kernel/gentoo-kernel-bin 6.6. Initial systemd configuration \u00b6 Do some initial configuration : systemd-firstboot --prompt --setup-machine-id If you don't intend to use SELinux, reset all installed unit files and reenable service that you want to continue to use. systemctl preset-all 6.7. Additional Packages \u00b6 Setup /etc/hosts : rsync -av /etc/hosts /etc/._cfg0000_hosts && \\ sed -i 's/localhost$/localhost micro/' /etc/._cfg0000_hosts && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" (Optional) Enable the SSH service: systemctl --no-reload enable sshd.service Install app-shells/starship : # If you have insufficient ressources, you may want to \"emerge -1 dev-lang/rust-bin\" beforehand. echo \"app-shells/starship ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge app-shells/starship && \\ mkdir --mode = 0700 /home/david/.config /root/.config && \\ touch /home/david/.config/starship.toml && \\ chown -R david:david /home/david/.config && \\ echo '[hostname] ssh_only = false format = \"[$hostname](bold red) \" ' | tee /root/.config/starship.toml > /home/david/.config/starship.toml && \\ starship preset nerd-font-symbols | tee -a /root/.config/starship.toml >> /home/david/.config/starship.toml && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Install app-shells/fish : echo \"=dev-libs/libpcre2- $( qatom -F \"%{PVR}\" \" $( portageq best_visible / dev-libs/libpcre2 ) \" ) pcre32\" >> /etc/portage/package.use/main && \\ echo \"app-shells/fish ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge app-shells/fish && \\ echo ' # Use fish in place of bash # keep this line at the bottom of ~/.bashrc if [[ -z ${chrooted} ]]; then if [[ -x /bin/fish ]]; then SHELL=/bin/fish exec /bin/fish fi elif [[ -z ${chrooted_su} ]]; then export chrooted_su=true source /etc/profile && su --login --whitelist-environment=chrooted,chrooted_su else env-update && source /etc/profile && export PS1=\"(chroot) $PS1\" fi' >> /root/.bashrc && \\ echo ' # Use fish in place of bash # keep this line at the bottom of ~/.bashrc if [[ -x /bin/fish ]]; then SHELL=/bin/fish exec /bin/fish fi' >> /home/david/.bashrc && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" \"root\" fish shell setup: /bin/fish -c fish_update_completions \"non-root\" fish shell setup: su -l david -c \"/bin/fish -c fish_update_completions\" Enable aliases and starship (copy&paste one after the other): su - exit su - david exit sed -i 's/^end$/ source \"$HOME\\/.bash_aliases\"\\n starship init fish | source\\nend/' /root/.config/fish/config.fish sed -i 's/^end$/ source \"$HOME\\/.bash_aliases\"\\n starship init fish | source\\nend/' /home/david/.config/fish/config.fish Install nerd fonts : emerge media-libs/fontconfig && \\ su -l david -c \"curl --proto '=https' --tlsv1.3 -fsSL -o /tmp/FiraCode.zip https://github.com/ryanoasis/nerd-fonts/releases/download/v2.2.2/FiraCode.zip\" && \\ b2sum -c <<< \"9f8ada87945ff10d9eced99369f7c6d469f9eaf2192490623a93b2397fe5b6ee3f0df6923b59eb87e92789840a205adf53c6278e526dbeeb25d0a6d307a07b18 /tmp/FiraCode.zip\" && \\ mkdir /tmp/FiraCode && \\ unzip -d /tmp/FiraCode /tmp/FiraCode.zip && \\ rm -f /tmp/FiraCode/*Windows* /tmp/FiraCode/Fura* && \\ mkdir /usr/share/fonts/nerd-firacode && \\ rsync -av --chown = 0 :0 --chmod = a = r /tmp/FiraCode/*.ttf /usr/share/fonts/nerd-firacode/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" If you have \"sys-fs/mdadm\" installed ( link ): [[ -e /devSwapb ]] && \\ rsync -av /etc/mdadm.conf /etc/._cfg0000_mdadm.conf && \\ echo \"\" >> /etc/._cfg0000_mdadm.conf && \\ mdadm --detail --scan >> /etc/._cfg0000_mdadm.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup \"net-misc/openssh\": rsync -av /etc/ssh/sshd_config /etc/ssh/._cfg0000_sshd_config && \\ sed -i \\ -e 's/^#Port 22$/Port 50022/' \\ -e 's/^#PermitRootLogin prohibit-password$/PermitRootLogin no/' \\ -e 's/^#KbdInteractiveAuthentication yes$/KbdInteractiveAuthentication no/' \\ -e 's/^#X11Forwarding no$/X11Forwarding no/' /etc/ssh/._cfg0000_sshd_config && \\ grep -q \"^PasswordAuthentication no $ \" /etc/ssh/._cfg0000_sshd_config && \\ echo \" AuthenticationMethods publickey KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com AllowUsers david\" >> /etc/ssh/._cfg0000_sshd_config && \\ ssh-keygen -A && \\ sshd -t && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Write down fingerprints to double check upon initial SSH connection to the Gentoo Linux machine: find /etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; Setup client SSH config: echo \"AddKeysToAgent no KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com HashKnownHosts no StrictHostKeyChecking ask VisualHostKey yes\" > /home/david/.ssh/config && \\ chown david:david /home/david/.ssh/config && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Disable \"magic SysRq\" for security sake : echo \"kernel.sysrq = 0\" > /etc/sysctl.d/99sysrq.conf Misc tools: emerge -at app-misc/screen app-portage/gentoolkit","title":"6. System Setup"},{"location":"system_setup/#61-portage-setup","text":"Make dispatch-conf show diffs in color and use vimdiff for merging: rsync -av /etc/dispatch-conf.conf /etc/._cfg0000_dispatch-conf.conf && \\ sed -i \\ -e \"s/diff=\\\"diff -Nu '%s' '%s'\\\"/diff=\\\"diff --color=always -Nu '%s' '%s'\\\"/\" \\ -e \"s/merge=\\\"sdiff --suppress-common-lines --output='%s' '%s' '%s'\\\"/merge=\\\"vimdiff -c'saveas %s' -c next -c'setlocal noma readonly' -c prev %s %s\\\"/\" \\ /etc/._cfg0000_dispatch-conf.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Install to be able to configure make.conf : emerge -1 app-portage/cpuid2cpuflags Configure make.conf (copy&paste one after the other): rsync -av /etc/portage/make.conf /etc/portage/._cfg0000_make.conf # If you use distcc, beware of: # https://wiki.gentoo.org/wiki/Distcc#-march.3Dnative # # You could resolve \"-march=native\" with app-misc/resolve-march-native sed -i 's/COMMON_FLAGS=\"-O2 -pipe\"/COMMON_FLAGS=\"-march=native -O2 -pipe\"/' /etc/portage/._cfg0000_make.conf echo 'EMERGE_DEFAULT_OPTS=\"--buildpkg --buildpkg-exclude ' \\' '*/*-bin sys-kernel/* virtual/*' \\' ' --noconfmem --with-bdeps=y --complete-graph=y\" L10N=\"de\" LINGUAS=\"${L10N}\" GENTOO_MIRRORS=\"https://ftp-stud.hs-esslingen.de/pub/Mirrors/gentoo/ https://ftp.fau.de/gentoo/ https://ftp.tu-ilmenau.de/mirror/gentoo/\" FETCHCOMMAND=\"curl --fail --silent --show-error --location --proto ' \\' '=https' \\' ' --tlsv1.2 --ciphers ' \\' 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' \\' ' --retry 2 --connect-timeout 60 -o \\\"\\${DISTDIR}/\\${FILE}\\\" \\\"\\${URI}\\\"\" RESUMECOMMAND=\"${FETCHCOMMAND} --continue-at -\" USE_HARDENED=\"pie -sslv3 -suid verify-sig\" USE=\"${USE_HARDENED} fish-completion\" ' >> /etc/portage/._cfg0000_make.conf echo \"*/* $( cpuid2cpuflags ) \" > /etc/portage/package.use/00cpu-flags (Optional) Change GENTOO_MIRRORS in \"/etc/portage/make.conf\" (copy&paste one after the other): # Install app-misc/yq ACCEPT_KEYWORDS = ~amd64 emerge -1 app-misc/yq # Get a list of country codes and names: curl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | xq -r '.mirrors.mirrorgroup[] | \"\\(.[\"@country\"]) \\(.[\"@countryname\"])\"' | sort -k2.2 # Choose your countries the mirrors should be located in: country = '\"AU\",\"BE\",\"BR\",\"CA\",\"CH\",\"CL\",\"CN\",\"CZ\",\"DE\",\"DK\",\"ES\",\"FR\",\"GR\",\"HK\",\"IL\",\"IT\",\"JP\",\"KR\",\"KZ\",\"LU\",\"NA\",\"NC\",\"NL\",\"PH\",\"PL\",\"PT\",\"RO\",\"RU\",\"SG\",\"SK\",\"TR\",\"TW\",\"UK\",\"US\",\"ZA\"' # Get a list of mirrors available over IPv4/IPv6 dual-stack in the countries of your choice with TLSv1.3 support curl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | xq -r \".mirrors.mirrorgroup[] | select([.\\\"@country\\\"] | inside([ ${ country } ])) | .mirror | if type==\\\"array\\\" then .[] else . end | .uri | if type==\\\"array\\\" then .[] else . end | select(.\\\"@protocol\\\" == \\\"http\\\" and .\\\"@ipv4\\\" == \\\"y\\\" and .\\\"@ipv6\\\" == \\\"y\\\" and (.\\\"#text\\\" | startswith(\\\"https://\\\"))) | .\\\"#text\\\"\" | while read -r i ; do if curl -fs --proto '=https' --tlsv1.3 -I \" ${ i } \" >/dev/null ; then echo \" ${ i } \" fi done I prefer English manpages and ignore above \"L10N\" setting for \"sys-apps/man-pages\". Makes using Stackoverflow easier \ud83d\ude09. echo \"sys-apps/man-pages -l10n_de\" >> /etc/portage/package.use/main && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Mitigate CVE-2022-29154 among others before using \"rsync\" via \"eix-sync\": echo 'net-misc/rsync ~amd64' >> /etc/portage/package.accept_keywords/main && \\ emerge -1 net-misc/rsync && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Install app-portage/eix : emerge -at app-portage/eix Execute \"eix-sync\" : eix-sync && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Read Gentoo news items : eselect news list # eselect news read 1 # eselect news read 2 # etc. Switch over to the custom hardened/merged-usr profile : env ACCEPT_KEYWORDS = \"~amd64\" emerge -1 sys-apps/merge-usr && \\ merge-usr && \\ eselect profile set duxsco:hardened-systemd && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ emerge -1 sys-devel/gcc && \\ emerge -1 sys-devel/binutils sys-libs/glibc && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ emerge -e @world && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Update the system: touch /etc/sysctl.conf && \\ echo \"sys-apps/systemd cryptsetup gnuefi\" >> /etc/portage/package.use/main && \\ emerge -atuDN @world","title":"6.1. Portage Setup"},{"location":"system_setup/#62-non-root-user-creation","text":"Create a non-root user and set a temporary password \"compatible\" with English keyboard layout. After rebooting you have to take care of localisation and will be able to set a secure password of your choice thereafter. useradd -m -G wheel -s /bin/bash david && \\ chmod u = rwx,og = /home/david && \\ echo -e 'alias cp=\"cp -i\"\\nalias mv=\"mv -i\"\\nalias rm=\"rm -i\"' >> /home/david/.bash_aliases && \\ chown david:david /home/david/.bash_aliases && \\ echo 'source \"${HOME}/.bash_aliases\"' >> /home/david/.bashrc && \\ passwd david (Optional) Create your ~/.ssh/authorized_keys : rsync -av --chown = david:david /etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys /home/david/.ssh/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup app-admin/sudo : echo \"app-admin/sudo -sendmail\" >> /etc/portage/package.use/main && \\ emerge app-admin/sudo && \\ { [[ -d /etc/sudoers.d ]] || mkdir -m u = rwx,g = rx,o = /etc/sudoers.d ; } && \\ echo \"%wheel ALL=(ALL) ALL\" | EDITOR = \"tee\" visudo -f /etc/sudoers.d/wheel && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup app-editors/vim : USE = \"-verify-sig\" emerge -1 dev-libs/libsodium && \\ emerge -1 dev-libs/libsodium app-editors/vim app-vim/molokai && \\ emerge --select --noreplace app-editors/vim app-vim/molokai && \\ cp -av /etc/portage/make.conf /etc/portage/._cfg0000_make.conf && \\ sed -i 's/^USE=\"\\([^\"]*\\)\"$/USE=\"\\1 vim-syntax\"/' /etc/portage/._cfg0000_make.conf && \\ echo \"filetype plugin on filetype indent on set number set paste syntax on colorscheme molokai\" | tee -a /root/.vimrc >> /home/david/.vimrc && \\ chown david:david /home/david/.vimrc && \\ eselect editor set vi && \\ eselect vi set vim && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"6.2. Non-Root User Creation"},{"location":"system_setup/#63-configuration-of-etcfstab","text":"Setup /etc/fstab : SWAP_UUID = \" $( blkid -s UUID -o value /mapperSwap ) \" && \\ SYSTEM_UUID = \" $( blkid -s UUID -o value /mapperSystem ) \" && \\ echo \"\" >> /etc/fstab && \\ echo \" $( find /devEfi* -maxdepth 0 | while read -r i ; do echo \"UUID= $( blkid -s UUID -o value \" $i \" ) ${ i /devE/boot \\/ e } vfat noatime,dmask=0022,fmask=0133 0 0\" done) UUID= ${ SWAP_UUID } none swap sw 0 0 UUID= ${ SYSTEM_UUID } / btrfs noatime,subvol=@root 0 0 UUID= ${ SYSTEM_UUID } /home btrfs noatime,subvol=@home 0 0 UUID= ${ SYSTEM_UUID } /var/cache/binpkgs btrfs noatime,subvol=@binpkgs 0 0 UUID= ${ SYSTEM_UUID } /var/cache/distfiles btrfs noatime,subvol=@distfiles 0 0 UUID= ${ SYSTEM_UUID } /var/db/repos/gentoo btrfs noatime,subvol=@ebuilds 0 0 UUID= ${ SYSTEM_UUID } /var/tmp btrfs noatime,subvol=@var_tmp 0 0 \" | column -o \" \" -t >> /etc/fstab && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"6.3. Configuration of /etc/fstab"},{"location":"system_setup/#64-secure-boot","text":"Credits: https://www.funtoo.org/Secure_Boot https://www.rodsbooks.com/efi-bootloaders/secureboot.html https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot In order to add your custom keys, \"Setup Mode\" must have been enabled in your \"UEFI Firmware Settings\" before booting into SystemRescueCD. But, you can install Secure Boot files later on if you missed enabling \"Setup Mode\". In the following, however, you have to generate Secure Boot files either way. Install required tools: echo \"sys-boot/mokutil ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -at app-crypt/efitools app-crypt/sbsigntools sys-boot/mokutil Create Secure Boot keys and certificates: mkdir --mode = 0700 /etc/gentoo-installation/secureboot && \\ pushd /etc/gentoo-installation/secureboot && \\ # Create the keys openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=PK/\" -keyout PK.key -out PK.crt -days 7300 -nodes -sha256 && \\ openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=KEK/\" -keyout KEK.key -out KEK.crt -days 7300 -nodes -sha256 && \\ openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=db/\" -keyout db.key -out db.crt -days 7300 -nodes -sha256 && \\ # Prepare installation in EFI uuid = \" $( uuidgen --random ) \" && \\ cert-to-efi-sig-list -g \" ${ uuid } \" PK.crt PK.esl && \\ cert-to-efi-sig-list -g \" ${ uuid } \" KEK.crt KEK.esl && \\ cert-to-efi-sig-list -g \" ${ uuid } \" db.crt db.esl && \\ sign-efi-sig-list -k PK.key -c PK.crt PK PK.esl PK.auth && \\ sign-efi-sig-list -k PK.key -c PK.crt KEK KEK.esl KEK.auth && \\ sign-efi-sig-list -k KEK.key -c KEK.crt db db.esl db.auth && \\ popd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" If the following commands don't work you have to install \"db.auth\", \"KEK.auth\" and \"PK.auth\" over the \"UEFI Firmware Settings\" upon reboot after the completion of this installation guide. Further information can be found in chapter 8.2. Secure Boot Setup . Beware that the following commands delete all existing keys. pushd /etc/gentoo-installation/secureboot && \\ # Make them mutable { chattr -i /sys/firmware/efi/efivars/ { PK,KEK,db,dbx } * || true ; } && \\ # Install keys into EFI (PK last as it will enable Custom Mode locking out further unsigned changes) efi-updatevar -f db.auth db && \\ efi-updatevar -f KEK.auth KEK && \\ efi-updatevar -f PK.auth PK && \\ # Make them immutable { chattr +i /sys/firmware/efi/efivars/ { PK,KEK,db,dbx } * || true ; } && \\ popd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"6.4. Secure Boot"},{"location":"system_setup/#65-kernel-installation","text":"Install sys-boot/efibootmgr : emerge -at sys-boot/efibootmgr Setup ESP(s): while read -r my_esp ; do bootctl --esp-path = \"/boot/ ${ my_esp } \" install && \\ efibootmgr --create --disk \"/dev/ $( lsblk -ndo pkname \" $( readlink -f \"/ ${ my_esp /efi/devEfi } \" ) \" ) \" --part 1 --label \"gentoo31415efi ${ my_esp } \" --loader '\\EFI\\systemd\\systemd-bootx64.efi' && \\ echo -e \"timeout 10\\neditor no\" > \"/boot/ ${ my_esp } /loader/loader.conf\" && \\ mv \"/boot/ ${ my_esp } /systemrescuecd.efi\" \"/boot/ ${ my_esp } /EFI/Linux/\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/ ${ my_esp } /EFI/systemd/systemd-bootx64.efi\" \"/boot/ ${ my_esp } /EFI/systemd/systemd-bootx64.efi\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/ ${ my_esp } /EFI/BOOT/BOOTX64.EFI\" \"/boot/ ${ my_esp } /EFI/BOOT/BOOTX64.EFI\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/ ${ my_esp } /EFI/Linux/systemrescuecd.efi\" \"/boot/ ${ my_esp } /EFI/Linux/systemrescuecd.efi\" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" done < < ( grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/boot/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab ) Microcode updates are not necessary for virtual machines . Otherwise, install \"sys-firmware/intel-microcode\" if you have an Intel CPU. Or, follow the Gentoo wiki instruction to update the microcode on AMD systems. ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ grep -q \"^vendor_id[[:space:]]*:[[:space:]]*GenuineIntel $ \" /proc/cpuinfo && \\ echo \"sys-firmware/intel-microcode intel-ucode\" >> /etc/portage/package.license && \\ echo \"sys-firmware/intel-microcode hostonly\" >> /etc/portage/package.use/main && \\ emerge -at sys-firmware/intel-microcode && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup portage hooks that takes care of unified kernel image creation and Secure Boot signing: mkdir -p /etc/portage/env/sys-apps /etc/portage/env/sys-firmware /etc/portage/env/sys-kernel && \\ rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-firmware/intel-microcode && \\ rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/gentoo-kernel-bin && \\ rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/linux-firmware && \\ rm -f /root/portage_hook_kernel && \\ echo 'if [[ ${EBUILD_PHASE} == postinst ]]; then while read -r my_esp; do bootctl --esp-path=\"/boot/${my_esp}\" --no-variables --graceful update && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/${my_esp}/EFI/systemd/systemd-bootx64.efi\" \"/boot/${my_esp}/EFI/systemd/systemd-bootx64.efi\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/${my_esp}/EFI/BOOT/BOOTX64.EFI\" \"/boot/${my_esp}/EFI/BOOT/BOOTX64.EFI\" if [[ $? -ne 0 ]]; then cat <<' \\' 'EOF' \\' ' ___________________________ < Failed to Secure Boot sign! > --------------------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || EOF fi done < <(grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/boot/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab) fi' > /etc/portage/env/sys-apps/systemd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup sys-kernel/dracut (copy&paste one after the other): emerge -at sys-kernel/dracut system_uuid = \" $( blkid -s UUID -o value /mapperSystem ) \" my_crypt_root = \" $( blkid -s UUID -o value /devSystem* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s - ) \" my_crypt_swap = \" $( blkid -s UUID -o value /devSwap* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s - ) \" unset my_systemd_cryptenroll # If you intend to use systemd-cryptenroll, define this variable: # my_systemd_cryptenroll=\",tpm2-device=auto\" echo \"\\ hostonly=no hostonly_cmdline=yes use_fstab=yes compress=xz show_modules=yes uefi=yes early_microcode=yes uefi_stub=/usr/lib/systemd/boot/efi/linuxx64.efi.stub uefi_secureboot_cert=/etc/gentoo-installation/secureboot/db.crt uefi_secureboot_key=/etc/gentoo-installation/secureboot/db.key CMDLINE=( ro root=UUID= ${ system_uuid } ${ my_crypt_root } ${ my_crypt_swap } rd.luks.options=password-echo=no ${ my_systemd_cryptenroll } rootfstype=btrfs rootflags=subvol=@root mitigations=auto,nosmt ) kernel_cmdline=\" \\$ { CMDLINE [ * ]} \" unset CMDLINE\" >> /etc/dracut.conf Install tools required for booting: export install_lts_kernel = \"true\" && \\ echo \"sys-fs/btrfs-progs ~amd64 sys-kernel/gentoo-kernel-bin ~amd64 sys-kernel/linux-headers ~amd64 virtual/dist-kernel ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ { [ $install_lts_kernel = true ] && \\ echo \"\\ >=sys-fs/btrfs-progs-5.16 >=sys-kernel/gentoo-kernel-bin-5.16 >=sys-kernel/linux-headers-5.16 >=virtual/dist-kernel-5.16\" >> /etc/portage/package.mask/main || \\ true } && \\ echo \"sys-fs/btrfs-progs -convert\" >> /etc/portage/package.use/main && \\ echo \"sys-kernel/gentoo-kernel-bin -initramfs\" >> /etc/portage/package.use/main && \\ echo \"sys-kernel/linux-firmware linux-fw-redistributable no-source-code\" >> /etc/portage/package.license && \\ { [ -e /devSwapb ] && \\ emerge -at sys-fs/btrfs-progs sys-fs/mdadm sys-kernel/linux-firmware || \\ emerge -at sys-fs/btrfs-progs sys-kernel/linux-firmware } Install the kernel : emerge -at sys-kernel/gentoo-kernel-bin","title":"6.5. Kernel Installation"},{"location":"system_setup/#66-initial-systemd-configuration","text":"Do some initial configuration : systemd-firstboot --prompt --setup-machine-id If you don't intend to use SELinux, reset all installed unit files and reenable service that you want to continue to use. systemctl preset-all","title":"6.6. Initial systemd configuration"},{"location":"system_setup/#67-additional-packages","text":"Setup /etc/hosts : rsync -av /etc/hosts /etc/._cfg0000_hosts && \\ sed -i 's/localhost$/localhost micro/' /etc/._cfg0000_hosts && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" (Optional) Enable the SSH service: systemctl --no-reload enable sshd.service Install app-shells/starship : # If you have insufficient ressources, you may want to \"emerge -1 dev-lang/rust-bin\" beforehand. echo \"app-shells/starship ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge app-shells/starship && \\ mkdir --mode = 0700 /home/david/.config /root/.config && \\ touch /home/david/.config/starship.toml && \\ chown -R david:david /home/david/.config && \\ echo '[hostname] ssh_only = false format = \"[$hostname](bold red) \" ' | tee /root/.config/starship.toml > /home/david/.config/starship.toml && \\ starship preset nerd-font-symbols | tee -a /root/.config/starship.toml >> /home/david/.config/starship.toml && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Install app-shells/fish : echo \"=dev-libs/libpcre2- $( qatom -F \"%{PVR}\" \" $( portageq best_visible / dev-libs/libpcre2 ) \" ) pcre32\" >> /etc/portage/package.use/main && \\ echo \"app-shells/fish ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge app-shells/fish && \\ echo ' # Use fish in place of bash # keep this line at the bottom of ~/.bashrc if [[ -z ${chrooted} ]]; then if [[ -x /bin/fish ]]; then SHELL=/bin/fish exec /bin/fish fi elif [[ -z ${chrooted_su} ]]; then export chrooted_su=true source /etc/profile && su --login --whitelist-environment=chrooted,chrooted_su else env-update && source /etc/profile && export PS1=\"(chroot) $PS1\" fi' >> /root/.bashrc && \\ echo ' # Use fish in place of bash # keep this line at the bottom of ~/.bashrc if [[ -x /bin/fish ]]; then SHELL=/bin/fish exec /bin/fish fi' >> /home/david/.bashrc && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" \"root\" fish shell setup: /bin/fish -c fish_update_completions \"non-root\" fish shell setup: su -l david -c \"/bin/fish -c fish_update_completions\" Enable aliases and starship (copy&paste one after the other): su - exit su - david exit sed -i 's/^end$/ source \"$HOME\\/.bash_aliases\"\\n starship init fish | source\\nend/' /root/.config/fish/config.fish sed -i 's/^end$/ source \"$HOME\\/.bash_aliases\"\\n starship init fish | source\\nend/' /home/david/.config/fish/config.fish Install nerd fonts : emerge media-libs/fontconfig && \\ su -l david -c \"curl --proto '=https' --tlsv1.3 -fsSL -o /tmp/FiraCode.zip https://github.com/ryanoasis/nerd-fonts/releases/download/v2.2.2/FiraCode.zip\" && \\ b2sum -c <<< \"9f8ada87945ff10d9eced99369f7c6d469f9eaf2192490623a93b2397fe5b6ee3f0df6923b59eb87e92789840a205adf53c6278e526dbeeb25d0a6d307a07b18 /tmp/FiraCode.zip\" && \\ mkdir /tmp/FiraCode && \\ unzip -d /tmp/FiraCode /tmp/FiraCode.zip && \\ rm -f /tmp/FiraCode/*Windows* /tmp/FiraCode/Fura* && \\ mkdir /usr/share/fonts/nerd-firacode && \\ rsync -av --chown = 0 :0 --chmod = a = r /tmp/FiraCode/*.ttf /usr/share/fonts/nerd-firacode/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" If you have \"sys-fs/mdadm\" installed ( link ): [[ -e /devSwapb ]] && \\ rsync -av /etc/mdadm.conf /etc/._cfg0000_mdadm.conf && \\ echo \"\" >> /etc/._cfg0000_mdadm.conf && \\ mdadm --detail --scan >> /etc/._cfg0000_mdadm.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup \"net-misc/openssh\": rsync -av /etc/ssh/sshd_config /etc/ssh/._cfg0000_sshd_config && \\ sed -i \\ -e 's/^#Port 22$/Port 50022/' \\ -e 's/^#PermitRootLogin prohibit-password$/PermitRootLogin no/' \\ -e 's/^#KbdInteractiveAuthentication yes$/KbdInteractiveAuthentication no/' \\ -e 's/^#X11Forwarding no$/X11Forwarding no/' /etc/ssh/._cfg0000_sshd_config && \\ grep -q \"^PasswordAuthentication no $ \" /etc/ssh/._cfg0000_sshd_config && \\ echo \" AuthenticationMethods publickey KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com AllowUsers david\" >> /etc/ssh/._cfg0000_sshd_config && \\ ssh-keygen -A && \\ sshd -t && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Write down fingerprints to double check upon initial SSH connection to the Gentoo Linux machine: find /etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; Setup client SSH config: echo \"AddKeysToAgent no KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com HashKnownHosts no StrictHostKeyChecking ask VisualHostKey yes\" > /home/david/.ssh/config && \\ chown david:david /home/david/.ssh/config && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Disable \"magic SysRq\" for security sake : echo \"kernel.sysrq = 0\" > /etc/sysctl.d/99sysrq.conf Misc tools: emerge -at app-misc/screen app-portage/gentoolkit","title":"6.7. Additional Packages"},{"location":"virtual_server/","text":"Note I connect to libvirtd via TCP and tunnel the connection over SSH, because I want to use my SSH key which is secured on a hardware token, and \"virt-manager\" doesn't seem to support it directly. Thus, I can't use s.th. like qemu+ssh://david@192.168.10.3:50022/system . I prefer managing installation media downloads and network myself: echo \"\\ app-emulation/libvirt -virt-network app-emulation/qemu -curl\" >> /etc/portage/package.use/main Setup the internal network on the VM host: echo '[NetDev] Name=br0 Kind=bridge' > /etc/systemd/network/br0.netdev && \\ echo '[Match] Name=br0 [Network] Address=192.168.110.1/24 ConfigureWithoutCarrier=true' > /etc/systemd/network/br0.network && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Install \"app-emulation/libvirt\": emerge -av app-emulation/libvirt Enable libvirt's TCP transport : systemctl enable libvirtd-tcp.socket && \\ systemctl enable libvirt-guests.service && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" After the start of \"libvirtd-tcp.socket\", systemd should listen on TCP port 16509: \u276f lsof -nP -iTCP -sTCP:LISTEN COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME systemd 1 root 48u IPv6 50548 0t0 TCP *:16509 ( LISTEN ) systemd-r 1063 systemd-resolve 12u IPv4 18306 0t0 TCP *:5355 ( LISTEN ) systemd-r 1063 systemd-resolve 14u IPv6 18309 0t0 TCP *:5355 ( LISTEN ) systemd-r 1063 systemd-resolve 18u IPv4 18313 0t0 TCP 127 .0.0.53:53 ( LISTEN ) systemd-r 1063 systemd-resolve 20u IPv4 18315 0t0 TCP 127 .0.0.54:53 ( LISTEN ) sshd 1096 root 3u IPv4 18400 0t0 TCP *:50022 ( LISTEN ) sshd 1096 root 4u IPv6 18401 0t0 TCP *:50022 ( LISTEN ) Tunnel the connection via SSH with: ssh -NL 56509 :127.0.0.1:16509 -p 50022 david@192.168.10.3 Add this connection in \"virt-manager\": qemu+tcp://127.0.0.1:56509/system","title":"9. Virtual Server (optional)"}]}