{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"1.1. Disclaimer \u00b6 Warning Don't blindly copy&paste the commands! Understand what you are going to do and adjust commands if required! I point this out, even though it should go without saying... System Requirements The installation guide builds heavily on Secure Boot and requires TPM 2.0 for Measured Boot . Make sure that the system is in Setup Mode in order to be able to add your custom Secure Boot keys. You can, however, boot without Setup Mode and import the Secure Boot keys later on depending on the hardware in use. For this, you can follow the instructions in section 8.2. Secure Boot Setup . 1.2. Technologies \u00b6 The following installation guide results in a system that is/uses: Secure Boot : EFI binary/binaries in ESP(s) are Secure Boot signed. Measured Boot : systemd-cryptenroll or clevis is used to check the system for manipulations via TPM2 PCRs (Platform Configuration Registers). Fully encrypted : Except ESP(s), all partitions are LUKS encrypted. RAID : If the number of disks is >=2, mdadm and Btrfs based RAID are used for all partitions other than ESP(s). Rescue system based on a customised SystemRescueCD that provides the chroot.sh script to conveniently chroot into your Gentoo installation. 1.3. SSH Connectivity \u00b6 After completion of this installation guide, SSH connections will be (optionally) possible via SSH public key authentication to the: Gentoo Linux system: ssh -p 50022 david@<IP address> Rescue system: ssh -p 50023 root@<IP address> Both boot options are available in the boot menu. 1.4. Disk Layout \u00b6 ESPs each with their own EFI entry are created one for each disk. Except for ESP, Btrfs/mdadm RAID 1 is used for all other partitions with RAID 5, RAID 6 and RAID 10 being further options for swap . Single disk: PC\u2215Laptop \u2514\u2500\u2500 \u2215dev\u2215sda \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 2. LUKS \u2502 \u2514\u2500\u2500 Btrfs (single) \u2502 \u2514\u2500\u2500 rescue \u251c\u2500\u2500 3. LUKS \u2502 \u2514\u2500\u2500 SWAP \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 Btrfs (single) \u2514\u2500\u2500 subvolumes \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @home \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @root \u2514\u2500\u2500 @var_tmp Two disks: PC\u2215Laptop\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500 \u2215dev\u2215sda \u2514\u2500\u2500 \u2215dev\u2215sdb \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u2502 \u2514\u2500\u2500 MDADM RAID 1 \u2502 \u2514\u2500\u2500 MDADM RAID 1 \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 Btrfs raid1 \u2514\u2500\u2500 Btrfs raid1 \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @root \u251c\u2500\u2500 @root \u2514\u2500\u2500 @var_tmp \u2514\u2500\u2500 @var_tmp Three disks: PC\u2215Laptop\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500 \u2215dev\u2215sda \u2514\u2500\u2500 \u2215dev\u2215sdb \u2514\u2500\u2500 \u2215dev\u2215sdc \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u2502 \u2514\u2500\u2500 MDADM RAID 1|5 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5 \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 Btrfs raid1c3 \u2514\u2500\u2500 Btrfs raid1c3 \u2514\u2500\u2500 Btrfs raid1c3 \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @root \u251c\u2500\u2500 @root \u251c\u2500\u2500 @root \u2514\u2500\u2500 @var_tmp \u2514\u2500\u2500 @var_tmp \u2514\u2500\u2500 @var_tmp Four disks: PC\u2215Laptop\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500 \u2215dev\u2215sda \u2514\u2500\u2500 \u2215dev\u2215sdb \u2514\u2500\u2500 \u2215dev\u2215sdc \u2514\u2500\u2500 \u2215dev\u2215sdd \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u2502 \u2514\u2500\u2500 MDADM RAID 1|5|6|10 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5|6|10 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5|6|10 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5|6|10 \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 Btrfs raid1c4 \u2514\u2500\u2500 Btrfs raid1c4 \u2514\u2500\u2500 Btrfs raid1c4 \u2514\u2500\u2500 Btrfs raid1c4 \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @root \u251c\u2500\u2500 @root \u251c\u2500\u2500 @root \u251c\u2500\u2500 @root \u2514\u2500\u2500 @var_tmp \u2514\u2500\u2500 @var_tmp \u2514\u2500\u2500 @var_tmp \u2514\u2500\u2500 @var_tmp More disks can be used (see: man mkfs.btrfs | sed -n '/^PROFILES$/,/^[[:space:]]*\u2514/p' ). RAID 10 is only available to setups with an even number of disks. 1.5. LUKS Key Slots \u00b6 On the rescue partition, LUKS key slots are set as follows: 0: Rescue password On all other LUKS volumes, LUKS key slots are set as follows: 0: Fallback password for emergency 1: Measured Boot Option A: TPM 2.0 with optional pin to unlock with systemd-cryptenroll Option B: Shamir Secret Sharing combining TPM2 and Tang pin ( Tang project ) to automatically unlock with Clevis The following steps are basically those in the official Gentoo Linux installation handbook with some customisations added.","title":"1. Introduction"},{"location":"#11-disclaimer","text":"Warning Don't blindly copy&paste the commands! Understand what you are going to do and adjust commands if required! I point this out, even though it should go without saying... System Requirements The installation guide builds heavily on Secure Boot and requires TPM 2.0 for Measured Boot . Make sure that the system is in Setup Mode in order to be able to add your custom Secure Boot keys. You can, however, boot without Setup Mode and import the Secure Boot keys later on depending on the hardware in use. For this, you can follow the instructions in section 8.2. Secure Boot Setup .","title":"1.1. Disclaimer"},{"location":"#12-technologies","text":"The following installation guide results in a system that is/uses: Secure Boot : EFI binary/binaries in ESP(s) are Secure Boot signed. Measured Boot : systemd-cryptenroll or clevis is used to check the system for manipulations via TPM2 PCRs (Platform Configuration Registers). Fully encrypted : Except ESP(s), all partitions are LUKS encrypted. RAID : If the number of disks is >=2, mdadm and Btrfs based RAID are used for all partitions other than ESP(s). Rescue system based on a customised SystemRescueCD that provides the chroot.sh script to conveniently chroot into your Gentoo installation.","title":"1.2. Technologies"},{"location":"#13-ssh-connectivity","text":"After completion of this installation guide, SSH connections will be (optionally) possible via SSH public key authentication to the: Gentoo Linux system: ssh -p 50022 david@<IP address> Rescue system: ssh -p 50023 root@<IP address> Both boot options are available in the boot menu.","title":"1.3. SSH Connectivity"},{"location":"#14-disk-layout","text":"ESPs each with their own EFI entry are created one for each disk. Except for ESP, Btrfs/mdadm RAID 1 is used for all other partitions with RAID 5, RAID 6 and RAID 10 being further options for swap . Single disk: PC\u2215Laptop \u2514\u2500\u2500 \u2215dev\u2215sda \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 2. LUKS \u2502 \u2514\u2500\u2500 Btrfs (single) \u2502 \u2514\u2500\u2500 rescue \u251c\u2500\u2500 3. LUKS \u2502 \u2514\u2500\u2500 SWAP \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 Btrfs (single) \u2514\u2500\u2500 subvolumes \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @home \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @root \u2514\u2500\u2500 @var_tmp Two disks: PC\u2215Laptop\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500 \u2215dev\u2215sda \u2514\u2500\u2500 \u2215dev\u2215sdb \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u2502 \u2514\u2500\u2500 MDADM RAID 1 \u2502 \u2514\u2500\u2500 MDADM RAID 1 \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 Btrfs raid1 \u2514\u2500\u2500 Btrfs raid1 \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @root \u251c\u2500\u2500 @root \u2514\u2500\u2500 @var_tmp \u2514\u2500\u2500 @var_tmp Three disks: PC\u2215Laptop\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500 \u2215dev\u2215sda \u2514\u2500\u2500 \u2215dev\u2215sdb \u2514\u2500\u2500 \u2215dev\u2215sdc \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u2502 \u2514\u2500\u2500 MDADM RAID 1|5 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5 \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 Btrfs raid1c3 \u2514\u2500\u2500 Btrfs raid1c3 \u2514\u2500\u2500 Btrfs raid1c3 \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @root \u251c\u2500\u2500 @root \u251c\u2500\u2500 @root \u2514\u2500\u2500 @var_tmp \u2514\u2500\u2500 @var_tmp \u2514\u2500\u2500 @var_tmp Four disks: PC\u2215Laptop\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500 \u2215dev\u2215sda \u2514\u2500\u2500 \u2215dev\u2215sdb \u2514\u2500\u2500 \u2215dev\u2215sdc \u2514\u2500\u2500 \u2215dev\u2215sdd \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u2502 \u2514\u2500\u2500 MDADM RAID 1|5|6|10 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5|6|10 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5|6|10 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5|6|10 \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 Btrfs raid1c4 \u2514\u2500\u2500 Btrfs raid1c4 \u2514\u2500\u2500 Btrfs raid1c4 \u2514\u2500\u2500 Btrfs raid1c4 \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @root \u251c\u2500\u2500 @root \u251c\u2500\u2500 @root \u251c\u2500\u2500 @root \u2514\u2500\u2500 @var_tmp \u2514\u2500\u2500 @var_tmp \u2514\u2500\u2500 @var_tmp \u2514\u2500\u2500 @var_tmp More disks can be used (see: man mkfs.btrfs | sed -n '/^PROFILES$/,/^[[:space:]]*\u2514/p' ). RAID 10 is only available to setups with an even number of disks.","title":"1.4. Disk Layout"},{"location":"#15-luks-key-slots","text":"On the rescue partition, LUKS key slots are set as follows: 0: Rescue password On all other LUKS volumes, LUKS key slots are set as follows: 0: Fallback password for emergency 1: Measured Boot Option A: TPM 2.0 with optional pin to unlock with systemd-cryptenroll Option B: Shamir Secret Sharing combining TPM2 and Tang pin ( Tang project ) to automatically unlock with Clevis The following steps are basically those in the official Gentoo Linux installation handbook with some customisations added.","title":"1.5. LUKS Key Slots"},{"location":"chrooting/","text":"Set resolv.conf: cp --dereference /etc/resolv.conf /mnt/gentoo/etc/ Set .bashrc etc.: rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /mnt/gentoo/etc/skel/.bash* /mnt/gentoo/root/ && \\ rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rwX,go = /mnt/gentoo/etc/skel/.ssh /mnt/gentoo/root/ && \\ echo -e 'alias cp=\"cp -i\"\\nalias mv=\"mv -i\"\\nalias rm=\"rm -i\"' >> /mnt/gentoo/root/.bash_aliases && \\ echo 'source \"${HOME}/.bash_aliases\" # Raise an alert if something is wrong with btrfs or mdadm if { [[ -f /proc/mdstat ]] && grep -q \"\\[[U_]*_[U_]*\\]\" /proc/mdstat; } || \\ [[ $(find /sys/fs/btrfs -type f -name \"error_stats\" -exec awk ' \\' '{sum += $2} END {print sum}' \\' ' {} +) -ne 0 ]]; then echo ' \\' ' _________________ < Something smells! > ----------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || ' \\' ' fi' >> /mnt/gentoo/root/.bashrc && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Set locale: echo \"C.UTF-8 UTF-8 de_DE.UTF-8 UTF-8 en_US.UTF-8 UTF-8\" > /mnt/gentoo/etc/locale.gen && \\ echo 'LANG=\"de_DE.UTF-8\" LC_COLLATE=\"C.UTF-8\" LC_MESSAGES=\"en_US.UTF-8\"' > /mnt/gentoo/etc/env.d/02locale && \\ chroot /mnt/gentoo /bin/bash -c \"source /etc/profile && locale-gen\" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Set MAKEOPTS : ram_size = \" $( dmidecode -t memory | grep -Pio \"^[[:space:]]Size:[[:space:]]+\\K[0-9]*(?=[[:space:]]*GB $ )\" | paste -d '+' -s - | bc ) \" && \\ number_cores = \" $( nproc --all ) \" && \\ [[ $(( number_cores*2 )) -le ${ ram_size } ]] && jobs = \" ${ number_cores } \" || jobs = \" $( bc <<< \" ${ ram_size } / 2\" ) \" && \\ echo -e \"\\nMAKEOPTS=\\\"-j ${ jobs } \\\"\" >> /mnt/gentoo/etc/portage/make.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Chroot (copy&paste one after the other): chroot /mnt/gentoo /bin/bash source /etc/profile su - env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" Application of configuration changes starting with chapter 6 Execute dispatch-conf after every code block where a file with prefix ._cfg0000_ has been created.","title":"5. Chrooting"},{"location":"cleanup_and_reboot/","text":"Setup network (copy&paste one after the other): echo \"\\ [Match] Name=enp1s0 [Network] Address=192.168.10.2/24 Gateway=192.168.10.1 # https://wiki.archlinux.org/title/IPv6#systemd-networkd_3 LinkLocalAddressing=no IPv6AcceptRA=no\\ \" >> /etc/systemd/network/50-static.network systemctl --no-reload enable systemd-networkd.service Setup DNS (copy&paste one after the other): # https://wiki.gentoo.org/wiki/Resolv.conf # https://wiki.archlinux.org/title/systemd-resolved ln -rsf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf cp -av /etc/systemd/resolved.conf /etc/systemd/._cfg0000_resolved.conf # https://www.kuketz-blog.de/empfehlungsecke/#dns sed -i \\ -e 's/#DNS=.*/DNS=2001:678:e68:f000::#dot.ffmuc.net 2001:678:ed0:f000::#dot.ffmuc.net 5.1.66.255#dot.ffmuc.net 185.150.99.255#dot.ffmuc.net/' \\ -e 's/#FallbackDNS=.*/FallbackDNS=2a01:4f8:251:554::2#dns3.digitalcourage.de 5.9.164.112#dns3.digitalcourage.de/' \\ -e 's/#Domains=.*/Domains=~./' \\ -e 's/#DNSSEC=.*/DNSSEC=true/' \\ -e 's/#DNSOverTLS=.*/DNSOverTLS=true/' \\ /etc/systemd/._cfg0000_resolved.conf systemctl --no-reload enable systemd-resolved.service After reboot into Gentoo Linux, test DNS resolving ( link ) and check resolvectl status output. stage3 and dev* files: rm -fv /stage3-* /portage-latest.tar.xz* /devEfi* /devRescue /devSystem* /devSwap* /mapperRescue /mapperSwap /mapperSystem && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" exit and reboot (copy&paste one after the other): exit exit exit cd umount -l /mnt/gentoo/dev { /shm,/pts, } umount -R /mnt/gentoo reboot","title":"7. Cleanup And Reboot"},{"location":"disk_setup/","text":"3.1. Wiping Disks \u00b6 disk.sh expects the disks, where you want to install Gentoo Linux on, to be completely empty. If you use SSD(s) I recommend a Secure Erase . Alternatively, you can do a fast wipe the following way given that no LUKS, MDADM, SWAP etc. device is open on the disk: # Change disk name to the one you want to wipe disk = \"/dev/sda\" lsblk -npo kname \" ${ disk } \" | grep \"^ ${ disk } \" | sort -r | while read -r i ; do wipefs -a \" $i \" ; done Tip If you have confidential data stored in a non-encrypted way and don't want to risk the data landing in foreign hands I recommend the use of something like dd , e.g. https://wiki.archlinux.org/title/Securely_wipe_disk ! 3.2. Partitioning And Formating \u00b6 Prepare the disks (copy&paste one after the other): bash /tmp/disk.sh -h # disable bash history set +o history # adjust to your liking bash /tmp/disk.sh -f fallbackfallback -r rescuerescue -d \"/dev/sda /dev/sdb etc.\" -s 12 # enable bash history set -o history disk.sh creates user \"meh\" which will be used later on to act as non-root. 3.3. /mnt/gentoo Content \u00b6 Result of a single disk setup: \u276f tree -a /mnt/gentoo/ /mnt/gentoo/ \u251c\u2500\u2500 devEfia -> /dev/sda1 \u251c\u2500\u2500 devRescue -> /dev/sda2 \u251c\u2500\u2500 devSwapa -> /dev/sda3 \u251c\u2500\u2500 devSystema -> /dev/sda4 \u251c\u2500\u2500 mapperRescue -> /dev/mapper/sda2 \u251c\u2500\u2500 mapperSwap -> /dev/mapper/sda3 \u251c\u2500\u2500 mapperSystem -> /dev/mapper/sda4 \u251c\u2500\u2500 portage-latest.tar.xz \u251c\u2500\u2500 portage-latest.tar.xz.gpgsig \u251c\u2500\u2500 stage3-amd64-systemd-20220529T170531Z.tar.xz \u2514\u2500\u2500 stage3-amd64-systemd-20220529T170531Z.tar.xz.asc 0 directories, 13 files Result of the four disk setup: \u276f tree -a /mnt/gentoo/ /mnt/gentoo/ \u251c\u2500\u2500 devEfia -> /dev/sda1 \u251c\u2500\u2500 devEfib -> /dev/sdb1 \u251c\u2500\u2500 devEfic -> /dev/sdc1 \u251c\u2500\u2500 devEfid -> /dev/sdd1 \u251c\u2500\u2500 devRescue -> /dev/md0 \u251c\u2500\u2500 devSwapa -> /dev/sda3 \u251c\u2500\u2500 devSwapb -> /dev/sdb3 \u251c\u2500\u2500 devSwapc -> /dev/sdc3 \u251c\u2500\u2500 devSwapd -> /dev/sdd3 \u251c\u2500\u2500 devSystema -> /dev/sda4 \u251c\u2500\u2500 devSystemb -> /dev/sdb4 \u251c\u2500\u2500 devSystemc -> /dev/sdc4 \u251c\u2500\u2500 devSystemd -> /dev/sdd4 \u251c\u2500\u2500 mapperRescue -> /dev/mapper/md0 \u251c\u2500\u2500 mapperSwap -> /dev/md1 \u251c\u2500\u2500 mapperSystem -> /dev/mapper/sda4 \u251c\u2500\u2500 portage-latest.tar.xz \u251c\u2500\u2500 portage-latest.tar.xz.gpgsig \u251c\u2500\u2500 stage3-amd64-systemd-20220529T170531Z.tar.xz \u2514\u2500\u2500 stage3-amd64-systemd-20220529T170531Z.tar.xz.asc 0 directories, 25 files 3.4. Tarball Extraction \u00b6 Info Current stage3-amd64-systemd-*.tar.xz is downloaded by default. Download and extract your stage3 flavour if it fits your needs more, but choose a systemd flavour of stage3, because this is required later on. Check the official handbook for the steps to be taken, especially in regards to verification. Extract stage3 tarball and copy firewall.nft : tar -C /mnt/gentoo/ -xpvf /mnt/gentoo/stage3-*.tar.xz --xattrs-include = '*.*' --numeric-owner && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rwx,go = r /tmp/firewall.nft /mnt/gentoo/usr/local/sbin/ && \\ rsync -a /tmp/portage_hook_kernel /mnt/gentoo/root/ && \\ mkdir -p /mnt/gentoo/etc/gentoo-installation && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Extract portage tarball: mkdir /mnt/gentoo/var/db/repos/gentoo && \\ touch /mnt/gentoo/var/db/repos/gentoo/.keep && \\ mount -o noatime,subvol = @ebuilds /mnt/gentoo/mapperSystem /mnt/gentoo/var/db/repos/gentoo && \\ tar --transform 's/^portage/gentoo/' -C /mnt/gentoo/var/db/repos/ -xvpJf /mnt/gentoo/portage-latest.tar.xz && \\ rsync -av --numeric-ids --chown = 250 :250 /tmp/overlay/duxsco /mnt/gentoo/var/db/repos/ && \\ mkdir /mnt/gentoo/etc/portage/repos.conf && \\ echo '[duxsco] location = /var/db/repos/duxsco auto-sync = false' > /mnt/gentoo/etc/portage/repos.conf/duxsco.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 3.5. Mounting \u00b6 mount -t tmpfs -o noatime,nodev,nosuid,mode = 1777 ,uid = root,gid = root tmpfs /mnt/gentoo/tmp && \\ mount --types proc /proc /mnt/gentoo/proc && \\ mount --rbind /sys /mnt/gentoo/sys && \\ mount --make-rslave /mnt/gentoo/sys && \\ mount --rbind /dev /mnt/gentoo/dev && \\ mount --make-rslave /mnt/gentoo/dev && \\ mount --bind /run /mnt/gentoo/run && \\ mount --make-slave /mnt/gentoo/run && \\ mount -o noatime,subvol = @home /mnt/gentoo/mapperSystem /mnt/gentoo/home && \\ touch /mnt/gentoo/var/cache/binpkgs/.keep && \\ mount -o noatime,subvol = @binpkgs /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/binpkgs && \\ touch /mnt/gentoo/var/cache/distfiles/.keep && \\ mount -o noatime,subvol = @distfiles /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/distfiles && \\ touch /mnt/gentoo/var/tmp/.keep && \\ mount -o noatime,subvol = @var_tmp /mnt/gentoo/mapperSystem /mnt/gentoo/var/tmp && \\ chmod 1777 /mnt/gentoo/var/tmp && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"3. Disk Setup"},{"location":"disk_setup/#31-wiping-disks","text":"disk.sh expects the disks, where you want to install Gentoo Linux on, to be completely empty. If you use SSD(s) I recommend a Secure Erase . Alternatively, you can do a fast wipe the following way given that no LUKS, MDADM, SWAP etc. device is open on the disk: # Change disk name to the one you want to wipe disk = \"/dev/sda\" lsblk -npo kname \" ${ disk } \" | grep \"^ ${ disk } \" | sort -r | while read -r i ; do wipefs -a \" $i \" ; done Tip If you have confidential data stored in a non-encrypted way and don't want to risk the data landing in foreign hands I recommend the use of something like dd , e.g. https://wiki.archlinux.org/title/Securely_wipe_disk !","title":"3.1. Wiping Disks"},{"location":"disk_setup/#32-partitioning-and-formating","text":"Prepare the disks (copy&paste one after the other): bash /tmp/disk.sh -h # disable bash history set +o history # adjust to your liking bash /tmp/disk.sh -f fallbackfallback -r rescuerescue -d \"/dev/sda /dev/sdb etc.\" -s 12 # enable bash history set -o history disk.sh creates user \"meh\" which will be used later on to act as non-root.","title":"3.2. Partitioning And Formating"},{"location":"disk_setup/#33-mntgentoo-content","text":"Result of a single disk setup: \u276f tree -a /mnt/gentoo/ /mnt/gentoo/ \u251c\u2500\u2500 devEfia -> /dev/sda1 \u251c\u2500\u2500 devRescue -> /dev/sda2 \u251c\u2500\u2500 devSwapa -> /dev/sda3 \u251c\u2500\u2500 devSystema -> /dev/sda4 \u251c\u2500\u2500 mapperRescue -> /dev/mapper/sda2 \u251c\u2500\u2500 mapperSwap -> /dev/mapper/sda3 \u251c\u2500\u2500 mapperSystem -> /dev/mapper/sda4 \u251c\u2500\u2500 portage-latest.tar.xz \u251c\u2500\u2500 portage-latest.tar.xz.gpgsig \u251c\u2500\u2500 stage3-amd64-systemd-20220529T170531Z.tar.xz \u2514\u2500\u2500 stage3-amd64-systemd-20220529T170531Z.tar.xz.asc 0 directories, 13 files Result of the four disk setup: \u276f tree -a /mnt/gentoo/ /mnt/gentoo/ \u251c\u2500\u2500 devEfia -> /dev/sda1 \u251c\u2500\u2500 devEfib -> /dev/sdb1 \u251c\u2500\u2500 devEfic -> /dev/sdc1 \u251c\u2500\u2500 devEfid -> /dev/sdd1 \u251c\u2500\u2500 devRescue -> /dev/md0 \u251c\u2500\u2500 devSwapa -> /dev/sda3 \u251c\u2500\u2500 devSwapb -> /dev/sdb3 \u251c\u2500\u2500 devSwapc -> /dev/sdc3 \u251c\u2500\u2500 devSwapd -> /dev/sdd3 \u251c\u2500\u2500 devSystema -> /dev/sda4 \u251c\u2500\u2500 devSystemb -> /dev/sdb4 \u251c\u2500\u2500 devSystemc -> /dev/sdc4 \u251c\u2500\u2500 devSystemd -> /dev/sdd4 \u251c\u2500\u2500 mapperRescue -> /dev/mapper/md0 \u251c\u2500\u2500 mapperSwap -> /dev/md1 \u251c\u2500\u2500 mapperSystem -> /dev/mapper/sda4 \u251c\u2500\u2500 portage-latest.tar.xz \u251c\u2500\u2500 portage-latest.tar.xz.gpgsig \u251c\u2500\u2500 stage3-amd64-systemd-20220529T170531Z.tar.xz \u2514\u2500\u2500 stage3-amd64-systemd-20220529T170531Z.tar.xz.asc 0 directories, 25 files","title":"3.3. /mnt/gentoo Content"},{"location":"disk_setup/#34-tarball-extraction","text":"Info Current stage3-amd64-systemd-*.tar.xz is downloaded by default. Download and extract your stage3 flavour if it fits your needs more, but choose a systemd flavour of stage3, because this is required later on. Check the official handbook for the steps to be taken, especially in regards to verification. Extract stage3 tarball and copy firewall.nft : tar -C /mnt/gentoo/ -xpvf /mnt/gentoo/stage3-*.tar.xz --xattrs-include = '*.*' --numeric-owner && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rwx,go = r /tmp/firewall.nft /mnt/gentoo/usr/local/sbin/ && \\ rsync -a /tmp/portage_hook_kernel /mnt/gentoo/root/ && \\ mkdir -p /mnt/gentoo/etc/gentoo-installation && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Extract portage tarball: mkdir /mnt/gentoo/var/db/repos/gentoo && \\ touch /mnt/gentoo/var/db/repos/gentoo/.keep && \\ mount -o noatime,subvol = @ebuilds /mnt/gentoo/mapperSystem /mnt/gentoo/var/db/repos/gentoo && \\ tar --transform 's/^portage/gentoo/' -C /mnt/gentoo/var/db/repos/ -xvpJf /mnt/gentoo/portage-latest.tar.xz && \\ rsync -av --numeric-ids --chown = 250 :250 /tmp/overlay/duxsco /mnt/gentoo/var/db/repos/ && \\ mkdir /mnt/gentoo/etc/portage/repos.conf && \\ echo '[duxsco] location = /var/db/repos/duxsco auto-sync = false' > /mnt/gentoo/etc/portage/repos.conf/duxsco.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"3.4. Tarball Extraction"},{"location":"disk_setup/#35-mounting","text":"mount -t tmpfs -o noatime,nodev,nosuid,mode = 1777 ,uid = root,gid = root tmpfs /mnt/gentoo/tmp && \\ mount --types proc /proc /mnt/gentoo/proc && \\ mount --rbind /sys /mnt/gentoo/sys && \\ mount --make-rslave /mnt/gentoo/sys && \\ mount --rbind /dev /mnt/gentoo/dev && \\ mount --make-rslave /mnt/gentoo/dev && \\ mount --bind /run /mnt/gentoo/run && \\ mount --make-slave /mnt/gentoo/run && \\ mount -o noatime,subvol = @home /mnt/gentoo/mapperSystem /mnt/gentoo/home && \\ touch /mnt/gentoo/var/cache/binpkgs/.keep && \\ mount -o noatime,subvol = @binpkgs /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/binpkgs && \\ touch /mnt/gentoo/var/cache/distfiles/.keep && \\ mount -o noatime,subvol = @distfiles /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/distfiles && \\ touch /mnt/gentoo/var/tmp/.keep && \\ mount -o noatime,subvol = @var_tmp /mnt/gentoo/mapperSystem /mnt/gentoo/var/tmp && \\ chmod 1777 /mnt/gentoo/var/tmp && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"3.5. Mounting"},{"location":"live-cd_environment/","text":"In the following, I am using the SystemRescueCD , not the official Gentoo Linux installation CD. If not otherwise stated, commands are executed on the remote machine where Gentoo Linux needs to be installed, in the beginning via TTY, later on over SSH. Most of the time, you can copy&paste the whole code block, but understand the commands first and make adjustments (e.g. IP address, disk names) if required. Boot into SystemRescueCD and set the correct keyboard layout: loadkeys de-latin1-nodeadkeys Make sure you have booted with UEFI: [ -d /sys/firmware/efi ] && echo UEFI || echo BIOS Disable sysrq for security sake : sysctl -w kernel.sysrq = 0 Do initial setup (copy&paste one after the other): screen -S install # If no network setup via DHCP done, use nmtui (recommended if DHCP not working) or... ip a add ... ip r add default ... echo nameserver ... > /etc/resolv.conf # Insert iptables rules at correct place for SystemRescueCD to accept SSH clients. # Verify with \"iptables -L -v -n\" iptables -I INPUT 4 -p tcp --dport 22 -j ACCEPT -m conntrack --ctstate NEW # Alternatively, setup /root/.ssh/authorized_keys passwd root Print out fingerprints to double check upon initial SSH connection to the SystemRescueCD system: find /etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; Execute following rsync and ssh command on your local machine (copy&paste one after the other): # Copy installation files to remote machine. Adjust port and IP. rsync -e \"ssh -o VisualHostKey=yes\" -av --numeric-ids --chown = 0 :0 { bin/ { portage_hook_kernel,disk.sh,fetch_files.sh,firewall.nft,firewall.sh } ,overlay } root@XXX:/tmp/ # From local machine, login into the remote machine ssh root@... Resume screen : screen -d -r install (Optional) Lock the screen on the remote machine by typing the following command on its keyboard ( not over SSH ): # If you have set /root/.ssh/authorized_keys in the previous step # and haven't executed \"passwd\" make sure to do it now for \"vlock\" to work... passwd root # Execute \"vlock\" without any flags first. # If relogin doesn't work you can switch tty and set password again. # If relogin succeeds execute vlock with flag \"-a\" to lock all tty. vlock -a Set date if system time is not correct: ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ # replace \"MMDDhhmmYYYY\" with UTC time date --utc MMDDhhmmYYYY Update hardware clock: ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ hwclock --systohc --utc","title":"2. Live-CD Environment"},{"location":"other_gentoo_linux_repos/","text":"https://github.com/duxsco?tab=repositories&q=gentoo-","title":"10. Other Gentoo Linux repos"},{"location":"post-boot_configuration/","text":"8.1. Systemd Configuration \u00b6 Some configuration needs to be done after systemd has been started. Setup localisation : /bin/bash -c ' localectl set-locale LANG=\"de_DE.UTF-8\" LC_COLLATE=\"C.UTF-8\" LC_MESSAGES=\"en_US.UTF-8\" && \\ localectl status && \\ env-update && source /etc/profile && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Setup timedatectl: /bin/bash -c ' timedatectl set-timezone Europe/Berlin && \\ if grep -q -w \"hypervisor\" <(grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo); then systemctl disable systemd-timesyncd.service echo $? else rsync -av /etc/systemd/timesyncd.conf /etc/systemd/._cfg0000_timesyncd.conf && \\ sed -i -e \"s/#NTP=/NTP=0.de.pool.ntp.org 1.de.pool.ntp.org 2.de.pool.ntp.org 3.de.pool.ntp.org/\" -e \"s/#FallbackNTP=.*/FallbackNTP=0.europe.pool.ntp.org 1.europe.pool.ntp.org 2.europe.pool.ntp.org 3.europe.pool.ntp.org/\" /etc/systemd/._cfg0000_timesyncd.conf && \\ timedatectl set-ntp true && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" fi && \\ timedatectl && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Setup nftables: emerge net-firewall/nftables && \\ rsync -a /etc/conf.d/nftables /etc/conf.d/._cfg0000_nftables && \\ sed -i 's/^SAVE_ON_STOP=\"yes\"$/SAVE_ON_STOP=\"no\"/' /etc/conf.d/._cfg0000_nftables && \\ /usr/local/sbin/firewall.nft && \\ nft list ruleset > /var/lib/nftables/rules-save && \\ systemctl enable nftables-restore && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 8.2. Secure Boot Setup \u00b6 If efi-updatevar failed in one of the previous sections , you can import Secure Boot files the following way. First, boot into the Gentoo Linux and save necessary files in DER form: /bin/bash -c ' ( ! mountpoint --quiet /boot/efia && \\ mount /boot/efia || true ) && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/db.crt -out /boot/efia/db.der && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/KEK.crt -out /boot/efia/KEK.der && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/PK.crt -out /boot/efia/PK.der && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Reboot into UEFI Firmware Settings and import db.der , KEK.der and PK.der . Thereafter, enable Secure Boot. Upon successful boot with Secure Boot enabled, you can delete db.der , KEK.der and PK.der in /boot/efia . To check whether Secure Boot is enabled execute: mokutil --sb-state To list the installed Secure Boot keys/certs: efi-readvar 8.3. Measured Boot \u00b6 You have two options for Measured Boot : systemd-cryptenroll : I prefer this on local systems where I have access to tty and can take care of (optional) pin prompts which are supported with systemd >=251. With pins, you don't have the problem of your laptop, for example, getting stolen and auto-unlocking upon boot. Furthermore, I experienced faster boot with systemd-cryptenroll than with clevis due to the use of PBKDF2 (with secure keys), and you don't have to use the app-crypt/clevis package from (unofficial) guru overlay . clevis : I prefer this on remote systems, e.g. a server in colocation, where I can take care of auto-unlock via TPM 2.0 and Tang pin. Use either systemd-cryptenroll or clevis in the following. 8.3.1.a) systemd-cryptenroll \u00b6 Install app-crypt/tpm2-tools : echo \"=app-crypt/tpm2-tools-5.2-r1 ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -av tpm2-tools Add support for TPM to dracut and systemd: sed -i \"s/\\(sys-apps\\/systemd \\)/\\1 tpm /\" /etc/portage/package.use/main && \\ echo 'add_dracutmodules+=\" tpm2-tss \"' >> /etc/dracut.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Update and make sure sys-apps/systemd got updated: emerge -atuDN @world Make sure that TPM 2.0 devices (should only be one) are recognised: systemd-cryptenroll --tpm2-device = list Make sure that the PCRs you are going to use have a valid hash and don't contain only zeroes: tpm2_pcrread sha256 Create new LUKS keyslots on all swap and system partitions. # I only use PCR7 as recommended in the first sentence after following table: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2 # # \"--tpm2-with-pin=yes\" is optional: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#--tpm2-with-pin=BOOL # systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sda3 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sda4 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sdb3 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sdb4 # etc. Reboot your system! 8.3.1.b) clevis \u00b6 If you don't have a DHCP server available to the new system, add the following network settings to the CMDLINE array variable in /etc/dracut.conf : ip=192.168.10.2::192.168.10.1:255.255.255.0:micro:enp1s0:off Install dev-vcs/git : echo 'dev-vcs/git -webdav' >> /etc/portage/package.use/main && \\ emerge -at dev-vcs/git Install app-crypt/clevis : echo \"app-crypt/clevis ~amd64 dev-libs/jose ~amd64 dev-libs/luksmeta ~amd64 app-crypt/tpm2-tools ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -at app-crypt/clevis Make sure that the PCRs you are going to use have a valid hash and don't contain only zeroes: tpm2_pcrread sha256 Bind all swap and system LUKS volumes. # I only use PCR7 as recommended in the first sentence after following table: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2 # clevis luks bind -d /dev/sda3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sda4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sdb3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sdb4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' # etc. Show results: clevis luks list -d /dev/sda3 clevis luks list -d /dev/sda4 clevis luks list -d /dev/sdb3 clevis luks list -d /dev/sdb4 # etc. 8.3.2. Rebuild Unified Kernel Image \u00b6 Rebuild the unified kernel image: emerge -at sys-kernel/gentoo-kernel-bin 8.4. Package Cleanup \u00b6 Remove extraneous packages (should be only app-editors/nano , app-misc/yq and app-portage/cpuid2cpuflags ): emerge --depclean -a","title":"8. Post-Boot Configuration"},{"location":"post-boot_configuration/#81-systemd-configuration","text":"Some configuration needs to be done after systemd has been started. Setup localisation : /bin/bash -c ' localectl set-locale LANG=\"de_DE.UTF-8\" LC_COLLATE=\"C.UTF-8\" LC_MESSAGES=\"en_US.UTF-8\" && \\ localectl status && \\ env-update && source /etc/profile && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Setup timedatectl: /bin/bash -c ' timedatectl set-timezone Europe/Berlin && \\ if grep -q -w \"hypervisor\" <(grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo); then systemctl disable systemd-timesyncd.service echo $? else rsync -av /etc/systemd/timesyncd.conf /etc/systemd/._cfg0000_timesyncd.conf && \\ sed -i -e \"s/#NTP=/NTP=0.de.pool.ntp.org 1.de.pool.ntp.org 2.de.pool.ntp.org 3.de.pool.ntp.org/\" -e \"s/#FallbackNTP=.*/FallbackNTP=0.europe.pool.ntp.org 1.europe.pool.ntp.org 2.europe.pool.ntp.org 3.europe.pool.ntp.org/\" /etc/systemd/._cfg0000_timesyncd.conf && \\ timedatectl set-ntp true && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" fi && \\ timedatectl && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Setup nftables: emerge net-firewall/nftables && \\ rsync -a /etc/conf.d/nftables /etc/conf.d/._cfg0000_nftables && \\ sed -i 's/^SAVE_ON_STOP=\"yes\"$/SAVE_ON_STOP=\"no\"/' /etc/conf.d/._cfg0000_nftables && \\ /usr/local/sbin/firewall.nft && \\ nft list ruleset > /var/lib/nftables/rules-save && \\ systemctl enable nftables-restore && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"8.1. Systemd Configuration"},{"location":"post-boot_configuration/#82-secure-boot-setup","text":"If efi-updatevar failed in one of the previous sections , you can import Secure Boot files the following way. First, boot into the Gentoo Linux and save necessary files in DER form: /bin/bash -c ' ( ! mountpoint --quiet /boot/efia && \\ mount /boot/efia || true ) && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/db.crt -out /boot/efia/db.der && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/KEK.crt -out /boot/efia/KEK.der && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/PK.crt -out /boot/efia/PK.der && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ' Reboot into UEFI Firmware Settings and import db.der , KEK.der and PK.der . Thereafter, enable Secure Boot. Upon successful boot with Secure Boot enabled, you can delete db.der , KEK.der and PK.der in /boot/efia . To check whether Secure Boot is enabled execute: mokutil --sb-state To list the installed Secure Boot keys/certs: efi-readvar","title":"8.2. Secure Boot Setup"},{"location":"post-boot_configuration/#83-measured-boot","text":"You have two options for Measured Boot : systemd-cryptenroll : I prefer this on local systems where I have access to tty and can take care of (optional) pin prompts which are supported with systemd >=251. With pins, you don't have the problem of your laptop, for example, getting stolen and auto-unlocking upon boot. Furthermore, I experienced faster boot with systemd-cryptenroll than with clevis due to the use of PBKDF2 (with secure keys), and you don't have to use the app-crypt/clevis package from (unofficial) guru overlay . clevis : I prefer this on remote systems, e.g. a server in colocation, where I can take care of auto-unlock via TPM 2.0 and Tang pin. Use either systemd-cryptenroll or clevis in the following.","title":"8.3. Measured Boot"},{"location":"post-boot_configuration/#831a-systemd-cryptenroll","text":"Install app-crypt/tpm2-tools : echo \"=app-crypt/tpm2-tools-5.2-r1 ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -av tpm2-tools Add support for TPM to dracut and systemd: sed -i \"s/\\(sys-apps\\/systemd \\)/\\1 tpm /\" /etc/portage/package.use/main && \\ echo 'add_dracutmodules+=\" tpm2-tss \"' >> /etc/dracut.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Update and make sure sys-apps/systemd got updated: emerge -atuDN @world Make sure that TPM 2.0 devices (should only be one) are recognised: systemd-cryptenroll --tpm2-device = list Make sure that the PCRs you are going to use have a valid hash and don't contain only zeroes: tpm2_pcrread sha256 Create new LUKS keyslots on all swap and system partitions. # I only use PCR7 as recommended in the first sentence after following table: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2 # # \"--tpm2-with-pin=yes\" is optional: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#--tpm2-with-pin=BOOL # systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sda3 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sda4 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sdb3 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sdb4 # etc. Reboot your system!","title":"8.3.1.a) systemd-cryptenroll"},{"location":"post-boot_configuration/#831b-clevis","text":"If you don't have a DHCP server available to the new system, add the following network settings to the CMDLINE array variable in /etc/dracut.conf : ip=192.168.10.2::192.168.10.1:255.255.255.0:micro:enp1s0:off Install dev-vcs/git : echo 'dev-vcs/git -webdav' >> /etc/portage/package.use/main && \\ emerge -at dev-vcs/git Install app-crypt/clevis : echo \"app-crypt/clevis ~amd64 dev-libs/jose ~amd64 dev-libs/luksmeta ~amd64 app-crypt/tpm2-tools ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -at app-crypt/clevis Make sure that the PCRs you are going to use have a valid hash and don't contain only zeroes: tpm2_pcrread sha256 Bind all swap and system LUKS volumes. # I only use PCR7 as recommended in the first sentence after following table: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2 # clevis luks bind -d /dev/sda3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sda4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sdb3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sdb4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' # etc. Show results: clevis luks list -d /dev/sda3 clevis luks list -d /dev/sda4 clevis luks list -d /dev/sdb3 clevis luks list -d /dev/sdb4 # etc.","title":"8.3.1.b) clevis"},{"location":"post-boot_configuration/#832-rebuild-unified-kernel-image","text":"Rebuild the unified kernel image: emerge -at sys-kernel/gentoo-kernel-bin","title":"8.3.2. Rebuild Unified Kernel Image"},{"location":"post-boot_configuration/#84-package-cleanup","text":"Remove extraneous packages (should be only app-editors/nano , app-misc/yq and app-portage/cpuid2cpuflags ): emerge --depclean -a","title":"8.4. Package Cleanup"},{"location":"rescue_system/","text":"Info A feature request has been opened to get the rescue system support \"measured boot\". While we are still on SystemRescueCD and not in chroot, download and customise the SystemRescueCD .iso file. 4.1. Downloads And Verification \u00b6 Prepare the working directory: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ chown meh:meh /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Import Gnupg public key: su -l meh -c \" mkdir --mode=0700 /tmp/gpgHomeDir && \\ curl -fsSL --proto '=https' --tlsv1.3 https://www.system-rescue.org/security/signing-keys/gnupg-pubkey-fdupoux-20210704-v001.pem | gpg --homedir /tmp/gpgHomeDir --import && \\ gpg --homedir /tmp/gpgHomeDir --import-ownertrust <<<'62989046EB5C7E985ECDF5DD3B0FEA9BE13CA3C9:6:' && \\ gpgconf --homedir /tmp/gpgHomeDir --kill all && \\ echo -e '\\e[1;32mSUCCESS\\e[0m' \" Download .iso and .asc file: rescue_system_version = \" $( su -l meh -c \"curl -fsS --proto '=https' --tlsv1.3 https://gitlab.com/systemrescue/systemrescue-sources/-/raw/main/VERSION\" ) \" && \\ su -l meh -c \" curl --continue-at - -L --proto '=https' --tlsv1.2 --ciphers 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso \\\"https://sourceforge.net/projects/systemrescuecd/files/sysresccd-x86/ ${ rescue_system_version } /systemrescue- ${ rescue_system_version } -amd64.iso/download?use_mirror=netcologne\\\" && \\ curl -fsSL --proto '=https' --tlsv1.3 --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc \\\"https://www.system-rescue.org/releases/ ${ rescue_system_version } /systemrescue- ${ rescue_system_version } -amd64.iso.asc\\\" && \\ echo -e '\\e[1;32mSUCCESS\\e[0m' \" Verify the .iso file: su -l meh -c \" gpg --homedir /tmp/gpgHomeDir --verify /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso && \\ gpgconf --homedir /tmp/gpgHomeDir --kill all \" && \\ chown -R 0 :0 /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 4.2. Configuration \u00b6 Create folder structure: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/ { recipe/ { iso_delete,iso_add/ { autorun,sysresccd,sysrescue.d } ,iso_patch_and_script,build_into_srm/ { etc/ { ssh,sysctl.d } ,usr/local/sbin }} ,work } I you want to be able to access Gentoo Linux as well as the rescue system via SSH do (copy&paste one after the other): mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh # add your ssh public keys to # /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys # set correct modes chmod u = rwx,g = rx,o = /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root chmod -R u = rwX,go = /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh Configure OpenSSH if you decided to setup public key authentication in the previous step: rsync -a /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ # do some ssh server hardening sed -i \\ -e 's/^#Port 22$/Port 50023/' \\ -e 's/^#PasswordAuthentication yes/PasswordAuthentication no/' \\ -e 's/^#X11Forwarding no$/X11Forwarding no/' /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ grep -q \"^KbdInteractiveAuthentication no $ \" /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ echo \" AuthenticationMethods publickey KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com\" >> /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ # create ssh_host_* files in build_into_srm/etc/ssh/ ssh-keygen -A -f /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm && \\ diff /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config Disable magic SysRq key for security sake : echo \"kernel.sysrq = 0\" > /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/sysctl.d/99sysrq.conf Copy chroot.sh created by disk.sh : rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rwx,go = r /tmp/chroot.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/usr/local/sbin/ Create settings YAML (copy&paste one after the other): # disable bash history set +o history # replace \"MyPassWord123\" with the password you want to use to login via TTY on SystemRescueCD crypt_pass = \" $( python3 -c 'import crypt; print(crypt.crypt(\"MyPassWord123\", crypt.mksalt(crypt.METHOD_SHA512)))' ) \" # enable bash history set -o history # set default settings echo \"\\ --- global: copytoram: true checksum: true nofirewall: true loadsrm: true setkmap: de-latin1-nodeadkeys dostartx: false dovnc: false rootshell: /bin/bash rootcryptpass: ' ${ crypt_pass } ' autorun: ar_disable: false ar_nowait: true ar_nodel: false ar_ignorefail: false\\ \" > /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysrescue.d/500-settings.yaml # Delete variable unset crypt_pass Create firewall rules: # set firewall rules upon bootup. rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /tmp/firewall.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/autorun/autorun Write down fingerprints to double check upon initial SSH connection to the SystemRescueCD system: find /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; Integrate additional packages: pacman -Sy clevis libpwquality luksmeta sbsigntools tpm2-tools && \\ cowpacman2srm /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysresccd/zz_additional_packages.srm && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 4.3. Folder Structure \u00b6 \u276f tree -a /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe \u251c\u2500\u2500 build_into_srm \u2502 \u251c\u2500\u2500 etc \u2502 \u2502 \u251c\u2500\u2500 ssh \u2502 \u2502 \u2502 \u251c\u2500\u2500 sshd_config \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_dsa_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_dsa_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ecdsa_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ecdsa_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ed25519_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ed25519_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_rsa_key \u2502 \u2502 \u2502 \u2514\u2500\u2500 ssh_host_rsa_key.pub \u2502 \u2502 \u2514\u2500\u2500 sysctl.d \u2502 \u2502 \u2514\u2500\u2500 99sysrq.conf \u2502 \u251c\u2500\u2500 root \u2502 \u2502 \u2514\u2500\u2500 .ssh \u2502 \u2502 \u2514\u2500\u2500 authorized_keys \u2502 \u2514\u2500\u2500 usr \u2502 \u2514\u2500\u2500 local \u2502 \u2514\u2500\u2500 sbin \u2502 \u2514\u2500\u2500 chroot.sh \u251c\u2500\u2500 iso_add \u2502 \u251c\u2500\u2500 autorun \u2502 \u2502 \u2514\u2500\u2500 autorun \u2502 \u251c\u2500\u2500 sysresccd \u2502 \u2502 \u2514\u2500\u2500 zz_additional_packages.srm \u2502 \u2514\u2500\u2500 sysrescue.d \u2502 \u2514\u2500\u2500 500 -settings.yaml \u251c\u2500\u2500 iso_delete \u2514\u2500\u2500 iso_patch_and_script 15 directories, 15 files 4.4. ISO And Rescue Partition \u00b6 Create customised ISO: sysrescue-customize --auto --overwrite -s /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso -d /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_ssh.iso -r /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe -w /mnt/gentoo/etc/gentoo-installation/systemrescuecd/work && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Copy ISO files to the rescue partition: mkdir /mnt/iso /mnt/gentoo/mnt/rescue && \\ mount -o loop,ro /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_ssh.iso /mnt/iso && \\ mount -o noatime /mnt/gentoo/mapperRescue /mnt/gentoo/mnt/rescue && \\ rsync -HAXSacv --delete /mnt/iso/ { autorun,sysresccd,sysrescue.d } /mnt/gentoo/mnt/rescue/ && \\ umount /mnt/iso && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 4.5 Kernel Installation \u00b6 Setup the unified kernel image: echo \"cryptdevice=UUID= $( blkid -s UUID -o value /mnt/gentoo/devRescue ) :root root=/dev/mapper/root archisobasedir=sysresccd archisolabel=rescue31415fs noautologin loadsrm=y\" > /tmp/my_cmdline && \\ objcopy \\ --add-section .osrel = \"/usr/lib/os-release\" --change-section-vma .osrel = 0x20000 \\ --add-section .cmdline = \"/tmp/my_cmdline\" --change-section-vma .cmdline = 0x30000 \\ --add-section .linux = \"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/vmlinuz\" --change-section-vma .linux = 0x2000000 \\ --add-section .initrd = \"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/sysresccd.img\" --change-section-vma .initrd = 0x3000000 \\ \"/usr/lib/systemd/boot/efi/linuxx64.efi.stub\" \"/tmp/systemrescuecd.efi\" && \\ while read -r my_esp ; do mkdir \" ${ my_esp /devE/boot \\/ e } \" && \\ mount -o noatime,dmask = 0022 ,fmask = 0133 \" ${ my_esp } \" \" ${ my_esp /devE/boot \\/ e } \" && \\ rsync -av \"/tmp/systemrescuecd.efi\" \" ${ my_esp /devE/boot \\/ e } /\" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" done < < ( find /mnt/gentoo/devEfi* -maxdepth 0 )","title":"4. Rescue System"},{"location":"rescue_system/#41-downloads-and-verification","text":"Prepare the working directory: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ chown meh:meh /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Import Gnupg public key: su -l meh -c \" mkdir --mode=0700 /tmp/gpgHomeDir && \\ curl -fsSL --proto '=https' --tlsv1.3 https://www.system-rescue.org/security/signing-keys/gnupg-pubkey-fdupoux-20210704-v001.pem | gpg --homedir /tmp/gpgHomeDir --import && \\ gpg --homedir /tmp/gpgHomeDir --import-ownertrust <<<'62989046EB5C7E985ECDF5DD3B0FEA9BE13CA3C9:6:' && \\ gpgconf --homedir /tmp/gpgHomeDir --kill all && \\ echo -e '\\e[1;32mSUCCESS\\e[0m' \" Download .iso and .asc file: rescue_system_version = \" $( su -l meh -c \"curl -fsS --proto '=https' --tlsv1.3 https://gitlab.com/systemrescue/systemrescue-sources/-/raw/main/VERSION\" ) \" && \\ su -l meh -c \" curl --continue-at - -L --proto '=https' --tlsv1.2 --ciphers 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso \\\"https://sourceforge.net/projects/systemrescuecd/files/sysresccd-x86/ ${ rescue_system_version } /systemrescue- ${ rescue_system_version } -amd64.iso/download?use_mirror=netcologne\\\" && \\ curl -fsSL --proto '=https' --tlsv1.3 --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc \\\"https://www.system-rescue.org/releases/ ${ rescue_system_version } /systemrescue- ${ rescue_system_version } -amd64.iso.asc\\\" && \\ echo -e '\\e[1;32mSUCCESS\\e[0m' \" Verify the .iso file: su -l meh -c \" gpg --homedir /tmp/gpgHomeDir --verify /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso && \\ gpgconf --homedir /tmp/gpgHomeDir --kill all \" && \\ chown -R 0 :0 /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"4.1. Downloads And Verification"},{"location":"rescue_system/#42-configuration","text":"Create folder structure: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/ { recipe/ { iso_delete,iso_add/ { autorun,sysresccd,sysrescue.d } ,iso_patch_and_script,build_into_srm/ { etc/ { ssh,sysctl.d } ,usr/local/sbin }} ,work } I you want to be able to access Gentoo Linux as well as the rescue system via SSH do (copy&paste one after the other): mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh # add your ssh public keys to # /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys # set correct modes chmod u = rwx,g = rx,o = /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root chmod -R u = rwX,go = /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh Configure OpenSSH if you decided to setup public key authentication in the previous step: rsync -a /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ # do some ssh server hardening sed -i \\ -e 's/^#Port 22$/Port 50023/' \\ -e 's/^#PasswordAuthentication yes/PasswordAuthentication no/' \\ -e 's/^#X11Forwarding no$/X11Forwarding no/' /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ grep -q \"^KbdInteractiveAuthentication no $ \" /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ echo \" AuthenticationMethods publickey KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com\" >> /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ # create ssh_host_* files in build_into_srm/etc/ssh/ ssh-keygen -A -f /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm && \\ diff /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config Disable magic SysRq key for security sake : echo \"kernel.sysrq = 0\" > /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/sysctl.d/99sysrq.conf Copy chroot.sh created by disk.sh : rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rwx,go = r /tmp/chroot.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/usr/local/sbin/ Create settings YAML (copy&paste one after the other): # disable bash history set +o history # replace \"MyPassWord123\" with the password you want to use to login via TTY on SystemRescueCD crypt_pass = \" $( python3 -c 'import crypt; print(crypt.crypt(\"MyPassWord123\", crypt.mksalt(crypt.METHOD_SHA512)))' ) \" # enable bash history set -o history # set default settings echo \"\\ --- global: copytoram: true checksum: true nofirewall: true loadsrm: true setkmap: de-latin1-nodeadkeys dostartx: false dovnc: false rootshell: /bin/bash rootcryptpass: ' ${ crypt_pass } ' autorun: ar_disable: false ar_nowait: true ar_nodel: false ar_ignorefail: false\\ \" > /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysrescue.d/500-settings.yaml # Delete variable unset crypt_pass Create firewall rules: # set firewall rules upon bootup. rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /tmp/firewall.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/autorun/autorun Write down fingerprints to double check upon initial SSH connection to the SystemRescueCD system: find /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; Integrate additional packages: pacman -Sy clevis libpwquality luksmeta sbsigntools tpm2-tools && \\ cowpacman2srm /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysresccd/zz_additional_packages.srm && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"4.2. Configuration"},{"location":"rescue_system/#43-folder-structure","text":"\u276f tree -a /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe \u251c\u2500\u2500 build_into_srm \u2502 \u251c\u2500\u2500 etc \u2502 \u2502 \u251c\u2500\u2500 ssh \u2502 \u2502 \u2502 \u251c\u2500\u2500 sshd_config \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_dsa_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_dsa_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ecdsa_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ecdsa_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ed25519_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ed25519_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_rsa_key \u2502 \u2502 \u2502 \u2514\u2500\u2500 ssh_host_rsa_key.pub \u2502 \u2502 \u2514\u2500\u2500 sysctl.d \u2502 \u2502 \u2514\u2500\u2500 99sysrq.conf \u2502 \u251c\u2500\u2500 root \u2502 \u2502 \u2514\u2500\u2500 .ssh \u2502 \u2502 \u2514\u2500\u2500 authorized_keys \u2502 \u2514\u2500\u2500 usr \u2502 \u2514\u2500\u2500 local \u2502 \u2514\u2500\u2500 sbin \u2502 \u2514\u2500\u2500 chroot.sh \u251c\u2500\u2500 iso_add \u2502 \u251c\u2500\u2500 autorun \u2502 \u2502 \u2514\u2500\u2500 autorun \u2502 \u251c\u2500\u2500 sysresccd \u2502 \u2502 \u2514\u2500\u2500 zz_additional_packages.srm \u2502 \u2514\u2500\u2500 sysrescue.d \u2502 \u2514\u2500\u2500 500 -settings.yaml \u251c\u2500\u2500 iso_delete \u2514\u2500\u2500 iso_patch_and_script 15 directories, 15 files","title":"4.3. Folder Structure"},{"location":"rescue_system/#44-iso-and-rescue-partition","text":"Create customised ISO: sysrescue-customize --auto --overwrite -s /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso -d /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_ssh.iso -r /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe -w /mnt/gentoo/etc/gentoo-installation/systemrescuecd/work && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Copy ISO files to the rescue partition: mkdir /mnt/iso /mnt/gentoo/mnt/rescue && \\ mount -o loop,ro /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_ssh.iso /mnt/iso && \\ mount -o noatime /mnt/gentoo/mapperRescue /mnt/gentoo/mnt/rescue && \\ rsync -HAXSacv --delete /mnt/iso/ { autorun,sysresccd,sysrescue.d } /mnt/gentoo/mnt/rescue/ && \\ umount /mnt/iso && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"4.4. ISO And Rescue Partition"},{"location":"rescue_system/#45-kernel-installation","text":"Setup the unified kernel image: echo \"cryptdevice=UUID= $( blkid -s UUID -o value /mnt/gentoo/devRescue ) :root root=/dev/mapper/root archisobasedir=sysresccd archisolabel=rescue31415fs noautologin loadsrm=y\" > /tmp/my_cmdline && \\ objcopy \\ --add-section .osrel = \"/usr/lib/os-release\" --change-section-vma .osrel = 0x20000 \\ --add-section .cmdline = \"/tmp/my_cmdline\" --change-section-vma .cmdline = 0x30000 \\ --add-section .linux = \"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/vmlinuz\" --change-section-vma .linux = 0x2000000 \\ --add-section .initrd = \"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/sysresccd.img\" --change-section-vma .initrd = 0x3000000 \\ \"/usr/lib/systemd/boot/efi/linuxx64.efi.stub\" \"/tmp/systemrescuecd.efi\" && \\ while read -r my_esp ; do mkdir \" ${ my_esp /devE/boot \\/ e } \" && \\ mount -o noatime,dmask = 0022 ,fmask = 0133 \" ${ my_esp } \" \" ${ my_esp /devE/boot \\/ e } \" && \\ rsync -av \"/tmp/systemrescuecd.efi\" \" ${ my_esp /devE/boot \\/ e } /\" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" done < < ( find /mnt/gentoo/devEfi* -maxdepth 0 )","title":"4.5 Kernel Installation"},{"location":"selinux/","text":"Note I haven't taken a close look at all denials yet. First, I wanted to take care of all denials until I can login successfully. I need to check next whether all policies are necessary and make sure that PAM (see constraint violation below) is working correctly. 9.1. Enable SELinux \u00b6 Info Currently, I only use SELinux on servers, and only mcs policy type to be able to \"isolate\" virtual machines from each other. Reduce the number of services (copy&paste one after the other): systemctl mask user@.service systemctl disable systemd-userdbd.socket cp -av /etc/nsswitch.conf /etc/._cfg0000_nsswitch.conf sed -i 's/^hosts:\\([[:space:]]*\\)mymachines \\(.*\\)$/hosts:\\1\\2/' /etc/._cfg0000_nsswitch.conf Prepare for SELinux (copy&paste one after the other): cp -av /etc/portage/make.conf /etc/portage/._cfg0000_make.conf echo -e 'POLICY_TYPES=\"mcs\"\\n' >> /etc/portage/._cfg0000_make.conf sed -i 's/^USE_HARDENED=\"\\(.*\\)\"/USE_HARDENED=\"\\1 -ubac -unconfined\"/' /etc/portage/._cfg0000_make.conf # execute dispatch-conf eselect profile set \"duxsco:hardened-systemd-selinux\" echo 'sec-policy/* ~amd64' >> /etc/portage/package.accept_keywords/main # To get a nice looking html site in /usr/share/doc/selinux-base-<VERSION>/mcs/html: echo 'sec-policy/selinux-base doc' >> /etc/portage/package.use/main FEATURES = \"-selinux\" emerge -1 selinux-base cp -av /etc/selinux/config /etc/selinux/._cfg0000_config sed -i 's/^SELINUXTYPE=strict$/SELINUXTYPE=mcs/' /etc/selinux/._cfg0000_config # execute dispatch-conf FEATURES = \"-selinux -sesandbox\" emerge -1 selinux-base FEATURES = \"-selinux -sesandbox\" emerge -1 selinux-base-policy emerge -atuDN @world Enable logging: systemctl enable auditd.service Rebuild the kernel with SELinux support: emerge sys-kernel/gentoo-kernel-bin && \\ rm -v /boot/efi*/EFI/Linux/gentoo-*-gentoo-dist.efi Reboot with permissive kernel. Make sure that UBAC gets disabled: bash -c '( cd /usr/share/selinux/mcs && semodule -i base.pp -i $(ls *.pp | grep -v base.pp) )' 9.2. Relabel \u00b6 Relabel the entire system : mkdir /mnt/gentoo && \\ mount -o bind / /mnt/gentoo && \\ setfiles -r /mnt/gentoo /etc/selinux/mcs/contexts/files/file_contexts /mnt/gentoo/ { dev,home,proc,run,sys,tmp,boot/efi*,var/cache/binpkgs,var/cache/distfiles,var/db/repos/gentoo,var/tmp } && \\ umount /mnt/gentoo && \\ rlpkg -a -r && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Make sure that nothing (except .keep files) is unlabeled: export tmpdir = \" $( mktemp -d ) \" && \\ mount --bind / \" $tmpdir \" && \\ find \" $tmpdir \" -context system_u:object_r:unlabeled_t:s0 && \\ umount \" $tmpdir \" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" If /proc was listed by the code of the previous codeblock you have to relabel to avoid a denial: \u276f cat <<EOF | audit2allow [ 19.902620] audit: type=1400 audit(1663630933.439:3): avc: denied { mounton } for pid=1062 comm=\"(auditd)\" path=\"/run/systemd/unit-root/proc\" dev=\"dm-3\" ino=67581 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:unlabeled_t:s0 tclass=dir permissive=1 EOF #============= init_t ============== allow init_t unlabeled_t:dir mounton ; # Credits: grift :) \u276f export tmpdir = \" $( mktemp -d ) \" && mount --bind / \" $tmpdir \" && chcon system_u:object_r:proc_t:s0 \" $tmpdir \" /proc && umount \" $tmpdir \" && echo -e \"\\e[1;32mSUCCESS\\e[0m\" In the custom Gentoo Linux installation , the SSH port has been changed to 50022. This needs to be considered for no SELinux denials to occur: \u276f semanage port -l | grep -e ssh -e Port SELinux Port Type Proto Port Number ssh_port_t tcp 22 \u276f semanage port -a -t ssh_port_t -p tcp 50022 \u276f semanage port -l | grep -e ssh -e Port SELinux Port Type Proto Port Number ssh_port_t tcp 50022 , 22 9.3. Users and services \u00b6 Default mcs SELinux login and user settings: \u276f semanage login -l Login Name SELinux User MLS/MCS Range Service __default__ user_u s0-s0 * root root s0-s0:c0.c1023 * \u276f semanage user -l Labeling MLS/ MLS/ SELinux User Prefix MCS Level MCS Range SELinux Roles root sysadm s0 s0-s0:c0.c1023 staff_r sysadm_r staff_u staff s0 s0-s0:c0.c1023 staff_r sysadm_r sysadm_u sysadm s0 s0-s0:c0.c1023 sysadm_r system_u user s0 s0-s0:c0.c1023 system_r unconfined_u unconfined s0 s0-s0:c0.c1023 unconfined_r user_u user s0 s0 user_r Add the initial user to the administration SELinux user : semanage login -a -s staff_u david restorecon -RFv /home/david bash -c 'echo \"%wheel ALL=(ALL) TYPE=sysadm_t ROLE=sysadm_r ALL\" | EDITOR=\"tee\" visudo -f /etc/sudoers.d/wheel && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"' Now, we should have: \u276f semanage login -l Login Name SELinux User MLS/MCS Range Service __default__ user_u s0-s0 * david staff_u s0-s0:c0.c1023 * root root s0-s0:c0.c1023 * Create /var/lib/sepolgen/interface_info for audit2why -R to work: sepolgen-ifgen -i /usr/share/selinux/mcs/include/support/ 9.4. SELinux policies \u00b6 Note Use create_policy.sh to create your SELinux policies after booting into permissive mode. The script expects you to reboot into permissive mode after installation of each newly created policy module via semodule -i <name>.pp . 9.4.1. Additional relabeling \u00b6 In one case, I relabeled a file instead of executing semodule -i : # [ 12.208682] audit: type=1400 audit(1663626722.916:3): avc: denied { read } for pid=951 comm=\"10-gentoo-path\" name=\"profile.env\" dev=\"dm-1\" ino=285848 scontext=system_u:system_r:systemd_generator_t:s0 tcontext=system_u:object_r:etc_runtime_t:s0 tclass=file permissive=1 # [ 12.211534] audit: type=1400 audit(1663626722.916:4): avc: denied { open } for pid=951 comm=\"10-gentoo-path\" path=\"/etc/profile.env\" dev=\"dm-1\" ino=285848 scontext=system_u:system_r:systemd_generator_t:s0 tcontext=system_u:object_r:etc_runtime_t:s0 tclass=file permissive=1 # [ 12.214297] audit: type=1400 audit(1663626722.916:5): avc: denied { getattr } for pid=951 comm=\"10-gentoo-path\" path=\"/etc/profile.env\" dev=\"dm-1\" ino=285848 scontext=system_u:system_r:systemd_generator_t:s0 tcontext=system_u:object_r:etc_runtime_t:s0 tclass=file permissive=1 \u276f find / -inum 285848 /etc/profile.env \u276f semanage fcontext -l | grep '/etc/profile\\\\\\.env' | column -t /etc/profile \\. env regular file system_u:object_r:etc_runtime_t:s0 \u276f sesearch -A -s systemd_generator_t -c file -p getattr,open,read | grep etc allow systemd_generator_t etc_t:file { getattr ioctl lock open read } ; allow systemd_generator_t lvm_etc_t:file { getattr ioctl lock map open read } ; \u276f semanage fcontext -m -f f -t etc_t '/etc/profile\\.env' \u276f restorecon -Fv /etc/profile.env Relabeled /etc/profile.env from system_u:object_r:etc_runtime_t:s0 to system_u:object_r:etc_t:s0 9.4.2. VM host \u00b6 Note I connect to libvirtd via TCP and SSH port forwarding, because I want to use my SSH key which is secured on a hardware token, and virt-manager doesn't seem to be able to handle my hardware token directly. Thus, I can't use s.th. like qemu+ssh://david@192.168.10.3:50022/system . I prefer managing downloads and network myself: echo \"\\ app-emulation/libvirt -virt-network app-emulation/qemu -curl\" >> /etc/portage/package.use/main I setup the internal network manually: \u276f head /etc/systemd/network/br0.* == > /etc/systemd/network/br0.netdev < == [ NetDev ] Name = br0 Kind = bridge == > /etc/systemd/network/br0.network < == [ Match ] Name = br0 [ Network ] Address = 192 .168.110.1/24 ConfigureWithoutCarrier = true Install: emerge -av app-emulation/libvirt Enable libvirt's TCP transport : systemctl enable libvirtd-tcp.socket && \\ systemctl start libvirtd-tcp.socket && \\ systemctl enable libvirt-guests.service && \\ systemctl start libvirt-guests.service && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" systemd should listen now on TCP port 16509: \u276f lsof -nP -iTCP -sTCP:LISTEN COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME systemd 1 root 48u IPv6 50548 0t0 TCP *:16509 ( LISTEN ) systemd-r 1063 systemd-resolve 12u IPv4 18306 0t0 TCP *:5355 ( LISTEN ) systemd-r 1063 systemd-resolve 14u IPv6 18309 0t0 TCP *:5355 ( LISTEN ) systemd-r 1063 systemd-resolve 18u IPv4 18313 0t0 TCP 127 .0.0.53:53 ( LISTEN ) systemd-r 1063 systemd-resolve 20u IPv4 18315 0t0 TCP 127 .0.0.54:53 ( LISTEN ) sshd 1096 root 3u IPv4 18400 0t0 TCP *:50022 ( LISTEN ) sshd 1096 root 4u IPv6 18401 0t0 TCP *:50022 ( LISTEN ) Forward the connection with: ssh -NL 56509 :127.0.0.1:16509 -p 50022 david@192.168.10.3 Add this connection in virt-manager : qemu+tcp://127.0.0.1:56509/system 9.4.4.1 Connecting with virt-manager over TCP \u00b6 \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 22:51:23 2022 type=AVC msg=audit(1663361483.820:41): avc: denied { write } for pid=1 comm=\"systemd\" name=\"libvirt-sock\" dev=\"tmpfs\" ino=1548 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:virt_runtime_t:s0 tclass=sock_file permissive=0 EOF #============= init_t ============== allow init_t virt_runtime_t:sock_file write ; \u276f selocal -a \"virt_stream_connect(init_t)\" -c my_libvirtd_service_000000 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 22:54:07 2022 type=AVC msg=audit(1663361647.136:50): avc: denied { write } for pid=1 comm=\"systemd\" name=\"virtlockd-sock\" dev=\"tmpfs\" ino=1558 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:virtlockd_run_t:s0 tclass=sock_file permissive=0 EOF #============= init_t ============== allow init_t virtlockd_run_t:sock_file write ; \u276f selocal -a \"allow init_t virtlockd_run_t:sock_file write;\" -c my_libvirtd_service_000001 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 22:56:14 2022 type=PROCTITLE msg=audit(1663361774.700:52): proctitle=\"/lib/systemd/systemd-machined\" type=SYSCALL msg=audit(1663361774.700:52): arch=c000003e syscall=138 success=no exit=-13 a0=3 a1=7ffef47c94d0 a2=0 a3=7fbe36521df0 items=0 ppid=1 pid=1221 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"systemd-machine\" exe=\"/lib/systemd/systemd-machined\" subj=system_u:system_r:systemd_machined_t:s0 key=(null) type=AVC msg=audit(1663361774.700:52): avc: denied { getattr } for pid=1221 comm=\"systemd-machine\" name=\"/\" dev=\"proc\" ino=1 scontext=system_u:system_r:systemd_machined_t:s0 tcontext=system_u:object_r:proc_t:s0 tclass=filesystem permissive=0 EOF #============= systemd_machined_t ============== allow systemd_machined_t proc_t:filesystem getattr ; \u276f selocal -a \"kernel_getattr_proc(systemd_machined_t)\" -c my_libvirtd_service_000002 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 22:59:47 2022 type=PROCTITLE msg=audit(1663361987.606:52): proctitle=\"/lib/systemd/systemd-machined\" type=PATH msg=audit(1663361987.606:52): item=0 name=\"/\" inode=256 dev=00:1f mode=040755 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:root_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663361987.606:52): cwd=\"/\" type=SYSCALL msg=audit(1663361987.606:52): arch=c000003e syscall=137 success=no exit=-13 a0=7f10c6beeccd a1=7ffcc787c590 a2=3 a3=523234cc234200f5 items=1 ppid=1 pid=1206 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"systemd-machine\" exe=\"/lib/systemd/systemd-machined\" subj=system_u:system_r:systemd_machined_t:s0 key=(null) type=AVC msg=audit(1663361987.606:52): avc: denied { getattr } for pid=1206 comm=\"systemd-machine\" name=\"/\" dev=\"dm-1\" ino=256 scontext=system_u:system_r:systemd_machined_t:s0 tcontext=system_u:object_r:fs_t:s0 tclass=filesystem permissive=0 EOF #============= systemd_machined_t ============== allow systemd_machined_t fs_t:filesystem getattr ; \u276f selocal -a \"fs_getattr_xattr_fs(systemd_machined_t)\" -c my_libvirtd_service_000003 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:04:27 2022 type=PROCTITLE msg=audit(1663362267.026:53): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=PATH msg=audit(1663362267.026:53): item=0 name=\"/var/run/utmp\" inode=98 dev=00:1a mode=0100664 ouid=0 ogid=406 rdev=00:00 obj=system_u:object_r:initrc_runtime_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663362267.026:53): cwd=\"/\" type=SYSCALL msg=audit(1663362267.026:53): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7fdcd4460e88 a2=80000 a3=0 items=1 ppid=1 pid=1221 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663362267.026:53): avc: denied { read } for pid=1221 comm=\"libvirtd\" name=\"utmp\" dev=\"tmpfs\" ino=98 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:object_r:initrc_runtime_t:s0 tclass=file permissive=0 ---- time->Fri Sep 16 23:06:32 2022 type=PROCTITLE msg=audit(1663362392.993:53): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=PATH msg=audit(1663362392.993:53): item=0 name=\"/var/run/utmp\" inode=95 dev=00:1a mode=0100664 ouid=0 ogid=406 rdev=00:00 obj=system_u:object_r:initrc_runtime_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663362392.993:53): cwd=\"/\" type=SYSCALL msg=audit(1663362392.993:53): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7f02818d6e88 a2=80000 a3=0 items=1 ppid=1 pid=1197 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663362392.993:53): avc: denied { open } for pid=1197 comm=\"libvirtd\" path=\"/run/utmp\" dev=\"tmpfs\" ino=95 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:object_r:initrc_runtime_t:s0 tclass=file permissive=0 ---- time->Fri Sep 16 23:09:33 2022 type=AVC msg=audit(1663362573.460:53): avc: denied { lock } for pid=1189 comm=\"libvirtd\" path=\"/run/utmp\" dev=\"tmpfs\" ino=95 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:object_r:initrc_runtime_t:s0 tclass=file permissive=0 EOF #============= virtd_t ============== allow virtd_t initrc_runtime_t:file { lock open read } ; \u276f selocal -a \"allow virtd_t initrc_runtime_t:file { lock open read };\" -c my_libvirtd_service_000004 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:12:30 2022 type=PROCTITLE msg=audit(1663362750.713:55): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=PATH msg=audit(1663362750.713:55): item=0 name=\"/run/systemd/userdb/io.systemd.Machine\" inode=1562 dev=00:1a mode=0140666 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:systemd_userdbd_runtime_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663362750.713:55): cwd=\"/\" type=SOCKADDR msg=audit(1663362750.713:55): saddr=01002F72756E2F73797374656D642F7573657264622F696F2E73797374656D642E4D616368696E6500 type=SYSCALL msg=audit(1663362750.713:55): arch=c000003e syscall=42 success=no exit=-13 a0=1b a1=7f1d8dffa660 a2=29 a3=7f1d740302b0 items=1 ppid=1 pid=1205 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"daemon-init\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663362750.713:55): avc: denied { connectto } for pid=1205 comm=\"daemon-init\" path=\"/run/systemd/userdb/io.systemd.Machine\" scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:systemd_machined_t:s0 tclass=unix_stream_socket permissive=0 EOF #============= virtd_t ============== allow virtd_t systemd_machined_t:unix_stream_socket connectto ; \u276f selocal -a \"systemd_connect_machined(virtd_t)\" -c my_libvirtd_service_000005 \u276f selocal -b -L 9.4.4.2 VM creation with virt-manager \u00b6 \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:24:31 2022 type=PROCTITLE msg=audit(1663363471.726:56): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=PATH msg=audit(1663363471.726:56): item=0 name=\"/dev/cpu/0/msr\" inode=85 dev=00:05 mode=020600 ouid=0 ogid=0 rdev=ca:00 obj=system_u:object_r:cpu_device_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663363471.726:56): cwd=\"/\" type=SYSCALL msg=audit(1663363471.726:56): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7f02211d4670 a2=0 a3=0 items=1 ppid=1 pid=1223 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663363471.726:56): avc: denied { read } for pid=1223 comm=\"rpc-libvirtd\" name=\"msr\" dev=\"devtmpfs\" ino=85 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:object_r:cpu_device_t:s0 tclass=chr_file permissive=0 ---- time->Fri Sep 16 23:28:05 2022 type=PROCTITLE msg=audit(1663363685.759:56): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=PATH msg=audit(1663363685.759:56): item=0 name=\"/dev/cpu/0/msr\" inode=85 dev=00:05 mode=020600 ouid=0 ogid=0 rdev=ca:00 obj=system_u:object_r:cpu_device_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663363685.759:56): cwd=\"/\" type=SYSCALL msg=audit(1663363685.759:56): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7fad25c9f670 a2=0 a3=0 items=1 ppid=1 pid=1204 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663363685.759:56): avc: denied { open } for pid=1204 comm=\"rpc-libvirtd\" path=\"/dev/cpu/0/msr\" dev=\"devtmpfs\" ino=85 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:object_r:cpu_device_t:s0 tclass=chr_file permissive=0 EOF #============= virtd_t ============== allow virtd_t cpu_device_t:chr_file { open read } ; \u276f selocal -a \"allow virtd_t cpu_device_t:chr_file { open read };\" -c my_virt-manager_000000 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:31:01 2022 type=PROCTITLE msg=audit(1663363861.959:56): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=PATH msg=audit(1663363861.959:56): item=0 name=\"/dev/cpu/0/msr\" inode=85 dev=00:05 mode=020600 ouid=0 ogid=0 rdev=ca:00 obj=system_u:object_r:cpu_device_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663363861.959:56): cwd=\"/\" type=SYSCALL msg=audit(1663363861.959:56): arch=c000003e syscall=257 success=no exit=-1 a0=ffffff9c a1=7f46e847c670 a2=0 a3=0 items=1 ppid=1 pid=1197 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663363861.959:56): avc: denied { sys_rawio } for pid=1197 comm=\"rpc-libvirtd\" capability=17 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:virtd_t:s0 tclass=capability permissive=0 EOF #============= virtd_t ============== allow virtd_t self:capability sys_rawio ; \u276f selocal -a \"allow virtd_t self:capability sys_rawio;\" -c my_virt-manager_000001 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:41:00 2022 type=PROCTITLE msg=audit(1663364460.659:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663364460.659:60): item=0 name=\"/proc/sys/kernel/cap_last_cap\" nametype=UNKNOWN cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663364460.659:60): cwd=\"/\" type=SYSCALL msg=audit(1663364460.659:60): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7f2e2ef8802a a2=0 a3=0 items=1 ppid=1 pid=1284 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663364460.659:60): avc: denied { search } for pid=1284 comm=\"virtlogd\" name=\"kernel\" dev=\"proc\" ino=12520 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:sysctl_kernel_t:s0 tclass=dir permissive=0 ---- time->Fri Sep 16 23:43:15 2022 type=PROCTITLE msg=audit(1663364595.286:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663364595.286:60): item=0 name=\"/proc/sys/kernel/cap_last_cap\" inode=13044 dev=00:16 mode=0100444 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:sysctl_kernel_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663364595.286:60): cwd=\"/\" type=SYSCALL msg=audit(1663364595.286:60): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7f4091f0a02a a2=0 a3=0 items=1 ppid=1 pid=1237 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663364595.286:60): avc: denied { read } for pid=1237 comm=\"virtlogd\" name=\"cap_last_cap\" dev=\"proc\" ino=13044 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:sysctl_kernel_t:s0 tclass=file permissive=0 ---- time->Fri Sep 16 23:45:38 2022 type=PROCTITLE msg=audit(1663364738.143:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663364738.143:60): item=0 name=\"/proc/sys/kernel/cap_last_cap\" inode=12583 dev=00:16 mode=0100444 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:sysctl_kernel_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663364738.143:60): cwd=\"/\" type=SYSCALL msg=audit(1663364738.143:60): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7ffbbec4802a a2=0 a3=0 items=1 ppid=1 pid=1262 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663364738.143:60): avc: denied { open } for pid=1262 comm=\"virtlogd\" path=\"/proc/sys/kernel/cap_last_cap\" dev=\"proc\" ino=12583 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:sysctl_kernel_t:s0 tclass=file permissive=0 EOF #============= virtlogd_t ============== allow virtlogd_t sysctl_kernel_t:dir search ; allow virtlogd_t sysctl_kernel_t:file { open read } ; \u276f selocal -a \"allow virtlogd_t sysctl_kernel_t:dir search;\" -c my_virt-manager_000002_dir \u276f selocal -a \"allow virtlogd_t sysctl_kernel_t:file { open read };\" -c my_virt-manager_000002_file \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:48:52 2022 type=PROCTITLE msg=audit(1663364932.490:60): proctitle=\"/usr/sbin/virtlogd\" type=SYSCALL msg=audit(1663364932.490:60): arch=c000003e syscall=138 success=no exit=-13 a0=5 a1=7ffded86dc50 a2=0 a3=7f2967143df0 items=0 ppid=1 pid=1253 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663364932.490:60): avc: denied { getattr } for pid=1253 comm=\"virtlogd\" name=\"/\" dev=\"proc\" ino=1 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:proc_t:s0 tclass=filesystem permissive=0 EOF #============= virtlogd_t ============== allow virtlogd_t proc_t:filesystem getattr ; \u276f selocal -a \"kernel_getattr_proc(virtlogd_t)\" -c my_virt-manager_000003 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:52:05 2022 type=PROCTITLE msg=audit(1663365125.670:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663365125.670:60): item=0 name=\"/usr/sbin/virtlogd\" nametype=UNKNOWN cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663365125.670:60): cwd=\"/\" type=SYSCALL msg=audit(1663365125.670:60): arch=c000003e syscall=89 success=no exit=-13 a0=7ffff4e82120 a1=7ffff4e81cc0 a2=3ff a3=1 items=1 ppid=1 pid=1298 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663365125.670:60): avc: denied { search } for pid=1298 comm=\"virtlogd\" name=\"sbin\" dev=\"dm-2\" ino=53969 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:bin_t:s0 tclass=dir permissive=0 EOF #============= virtlogd_t ============== allow virtlogd_t bin_t:dir search ; \u276f selocal -a \"allow virtlogd_t bin_t:dir search;\" -c my_virt-manager_000004 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:54:28 2022 type=PROCTITLE msg=audit(1663365268.836:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663365268.836:60): item=0 name=\"/run/systemd/journal/socket\" nametype=UNKNOWN cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663365268.836:60): cwd=\"/\" type=SYSCALL msg=audit(1663365268.836:60): arch=c000003e syscall=21 success=no exit=-13 a0=7f7b39d1de7e a1=2 a2=1 a3=ce358e085363cd20 items=1 ppid=1 pid=1221 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663365268.836:60): avc: denied { search } for pid=1221 comm=\"virtlogd\" name=\"journal\" dev=\"tmpfs\" ino=67 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:syslogd_runtime_t:s0 tclass=dir permissive=0 EOF #============= virtlogd_t ============== allow virtlogd_t syslogd_runtime_t:dir search ; \u276f selocal -a \"allow virtlogd_t syslogd_runtime_t:dir search;\" -c my_virt-manager_000005 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:57:52 2022 type=PROCTITLE msg=audit(1663365472.796:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663365472.796:60): item=0 name=\"/run/systemd/journal/socket\" inode=69 dev=00:1a mode=0140666 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:devlog_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663365472.796:60): cwd=\"/\" type=SYSCALL msg=audit(1663365472.796:60): arch=c000003e syscall=21 success=no exit=-13 a0=7fbf53001e7e a1=2 a2=1 a3=2f9a13ca77778bab items=1 ppid=1 pid=1258 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663365472.796:60): avc: denied { write } for pid=1258 comm=\"virtlogd\" name=\"socket\" dev=\"tmpfs\" ino=69 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:devlog_t:s0 tclass=sock_file permissive=0 EOF #============= virtlogd_t ============== allow virtlogd_t devlog_t:sock_file write ; \u276f selocal -a \"allow virtlogd_t devlog_t:sock_file write;\" -c my_virt-manager_000006 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 00:01:05 2022 type=PROCTITLE msg=audit(1663365665.069:60): proctitle=\"/usr/sbin/virtlogd\" type=SYSCALL msg=audit(1663365665.069:60): arch=c000003e syscall=41 success=no exit=-13 a0=1 a1=2 a2=0 a3=7f3284482ac0 items=0 ppid=1 pid=1287 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663365665.069:60): avc: denied { create } for pid=1287 comm=\"virtlogd\" scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:system_r:virtlogd_t:s0 tclass=unix_dgram_socket permissive=0 EOF #============= virtlogd_t ============== allow virtlogd_t self:unix_dgram_socket create ; \u276f selocal -a \"allow virtlogd_t self:unix_dgram_socket create;\" -c my_virt-manager_000007 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 00:04:39 2022 type=PROCTITLE msg=audit(1663365879.139:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663365879.139:60): item=0 name=\"/etc/ssl/openssl.cnf\" nametype=UNKNOWN cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663365879.139:60): cwd=\"/\" type=SYSCALL msg=audit(1663365879.139:60): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=5579e68a4a90 a2=0 a3=0 items=1 ppid=1 pid=1255 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663365879.139:60): avc: denied { search } for pid=1255 comm=\"virtlogd\" name=\"ssl\" dev=\"dm-3\" ino=456 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:cert_t:s0 tclass=dir permissive=0 ---- time->Sat Sep 17 00:07:06 2022 type=PROCTITLE msg=audit(1663366026.166:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663366026.166:60): item=0 name=\"/etc/ssl/openssl.cnf\" inode=76254 dev=00:1f mode=0100644 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:cert_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663366026.166:60): cwd=\"/\" type=SYSCALL msg=audit(1663366026.166:60): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=5636a04f1a90 a2=0 a3=0 items=1 ppid=1 pid=1234 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663366026.166:60): avc: denied { read } for pid=1234 comm=\"virtlogd\" name=\"openssl.cnf\" dev=\"dm-3\" ino=76254 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:cert_t:s0 tclass=file permissive=0 ---- time->Sat Sep 17 00:09:55 2022 type=PROCTITLE msg=audit(1663366195.780:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663366195.780:60): item=0 name=\"/etc/ssl/openssl.cnf\" inode=76254 dev=00:1f mode=0100644 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:cert_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663366195.780:60): cwd=\"/\" type=SYSCALL msg=audit(1663366195.780:60): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=55a7ed6ffa90 a2=0 a3=0 items=1 ppid=1 pid=1249 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663366195.780:60): avc: denied { open } for pid=1249 comm=\"virtlogd\" path=\"/etc/ssl/openssl.cnf\" dev=\"dm-0\" ino=76254 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:cert_t:s0 tclass=file permissive=0 ---- time->Sat Sep 17 00:12:01 2022 type=PROCTITLE msg=audit(1663366321.463:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663366321.463:60): item=0 name=\"\" inode=76254 dev=00:1f mode=0100644 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:cert_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663366321.463:60): cwd=\"/\" type=SYSCALL msg=audit(1663366321.463:60): arch=c000003e syscall=262 success=no exit=-13 a0=7 a1=7f168d651f13 a2=7ffd6c4a6040 a3=1000 items=1 ppid=1 pid=1235 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663366321.463:60): avc: denied { getattr } for pid=1235 comm=\"virtlogd\" path=\"/etc/ssl/openssl.cnf\" dev=\"dm-2\" ino=76254 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:cert_t:s0 tclass=file permissive=0 EOF #============= virtlogd_t ============== allow virtlogd_t cert_t:dir search ; allow virtlogd_t cert_t:file { getattr open read } ; \u276f selocal -a \"allow virtlogd_t cert_t:dir search;\" -c my_virt-manager_000008_dir \u276f selocal -a \"allow virtlogd_t cert_t:file { getattr open read };\" -c my_virt-manager_000008_file \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 00:16:15 2022 type=PROCTITLE msg=audit(1663366575.140:63): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=PATH msg=audit(1663366575.140:63): item=0 name=\"/dev/urandom\" inode=6 dev=00:37 mode=020666 ouid=0 ogid=0 rdev=01:09 obj=system_u:object_r:urandom_device_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663366575.140:63): cwd=\"/\" type=SYSCALL msg=audit(1663366575.140:63): arch=c000003e syscall=94 success=no exit=-13 a0=7fa59c01c990 a1=0 a2=0 a3=100 items=1 ppid=1190 pid=1267 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663366575.140:63): avc: denied { setattr } for pid=1267 comm=\"rpc-libvirtd\" name=\"urandom\" dev=\"tmpfs\" ino=6 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:object_r:urandom_device_t:s0 tclass=chr_file permissive=0 EOF #============= virtd_t ============== allow virtd_t urandom_device_t:chr_file setattr ; \u276f selocal -a \"allow virtd_t urandom_device_t:chr_file setattr;\" -c my_virt-manager_000009 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 00:37:01 2022 type=AVC msg=audit(1663367821.716:65): avc: denied { connectto } for pid=1060 comm=\"auditd\" path=\"/run/systemd/userdb/io.systemd.Machine\" scontext=system_u:system_r:auditd_t:s0 tcontext=system_u:system_r:systemd_machined_t:s0 tclass=unix_stream_socket permissive=0 EOF #============= auditd_t ============== allow auditd_t systemd_machined_t:unix_stream_socket connectto ; \u276f selocal -a \"systemd_connect_machined(auditd_t)\" -c my_virt-manager_000010 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 00:40:50 2022 type=USER_AVC msg=audit(1663368050.436:63): pid=1076 uid=101 auid=4294967295 ses=4294967295 subj=system_u:system_r:system_dbusd_t:s0 msg='avc: denied { send_msg } for msgtype=method_call interface=org.freedesktop.machine1.Manager member=CreateMachineWithNetwork dest=org.freedesktop.machine1 spid=1215 tpid=1214 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:systemd_machined_t:s0 tclass=dbus permissive=0 exe=\"/usr/bin/dbus-daemon\" sauid=101 hostname=? addr=? terminal=?' EOF #============= virtd_t ============== allow virtd_t systemd_machined_t:dbus send_msg ; \u276f selocal -a \"systemd_dbus_chat_machined(virtd_t)\" -c my_virt-manager_000011 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 00:45:43 2022 type=USER_AVC msg=audit(1663368343.369:54): pid=1069 uid=101 auid=4294967295 ses=4294967295 subj=system_u:system_r:system_dbusd_t:s0 msg='avc: denied { send_msg } for msgtype=method_call interface=org.freedesktop.login1.Manager member=Inhibit dest=org.freedesktop.login1 spid=1227 tpid=1071 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:systemd_logind_t:s0 tclass=dbus permissive=0 exe=\"/usr/bin/dbus-daemon\" sauid=101 hostname=? addr=? terminal=?' EOF #============= virtd_t ============== allow virtd_t systemd_logind_t:dbus send_msg ; \u276f selocal -a \"systemd_dbus_chat_logind(virtd_t)\" -c my_virt-manager_000012 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 00:54:02 2022 type=USER_AVC msg=audit(1663368842.223:77): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=system_u:system_r:init_t:s0 msg='avc: denied { start } for auid=n/a uid=0 gid=0 path=\"/run/systemd/transient/machine-qemu\\x2d2\\x2ddebian11.scope\" cmdline=\"/lib/systemd/systemd-machined\" function=\"bus_unit_queue_job\" scontext=system_u:system_r:systemd_machined_t:s0 tcontext=system_u:object_r:systemd_transient_unit_t:s0 tclass=service permissive=0 exe=\"/lib/systemd/systemd\" sauid=0 hostname=? addr=? terminal=?' EOF #============= systemd_machined_t ============== allow systemd_machined_t systemd_transient_unit_t:service start ; \u276f selocal -a \"init_start_transient_units(systemd_machined_t)\" -c my_virt-manager_000013 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 01:14:10 2022 type=PROCTITLE msg=audit(1663370050.736:71): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=SYSCALL msg=audit(1663370050.736:71): arch=c000003e syscall=321 success=yes exit=0 a0=10 a1=7f69d12cb3b0 a2=80 a3=0 items=0 ppid=1 pid=1231 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663370050.736:71): avc: denied { bpf } for pid=1231 comm=\"rpc-libvirtd\" capability=39 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:virtd_t:s0 tclass=capability2 permissive=0 ---- time->Sat Sep 17 01:20:26 2022 type=PROCTITLE msg=audit(1663370426.119:88): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=SYSCALL msg=audit(1663370426.119:88): arch=c000003e syscall=321 success=yes exit=31 a0=5 a1=7f8b9ce86380 a2=80 a3=40811 items=0 ppid=1 pid=1404 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=BPF msg=audit(1663370426.119:88): prog-id=33 op=LOAD type=AVC msg=audit(1663370426.119:88): avc: denied { perfmon } for pid=1404 comm=\"rpc-libvirtd\" capability=38 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:virtd_t:s0 tclass=capability2 permissive=0 EOF #============= virtd_t ============== allow virtd_t self:capability2 { bpf perfmon } ; \u276f selocal -a \"allow virtd_t self:capability2 { bpf perfmon };\" -c my_virt-manager_000014 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 01:01:30 2022 type=PROCTITLE msg=audit(1663369290.669:76): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=SYSCALL msg=audit(1663369290.669:76): arch=c000003e syscall=321 success=no exit=-13 a0=0 a1=7faf1344e620 a2=80 a3=4 items=0 ppid=1 pid=1191 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663369290.669:76): avc: denied { map_create } for pid=1191 comm=\"rpc-libvirtd\" scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:virtd_t:s0 tclass=bpf permissive=0 ---- time->Sat Sep 17 01:04:17 2022 type=PROCTITLE msg=audit(1663369457.883:76): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=SYSCALL msg=audit(1663369457.883:76): arch=c000003e syscall=321 success=no exit=-13 a0=0 a1=7f1fa0756620 a2=80 a3=4 items=0 ppid=1 pid=1192 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663369457.883:76): avc: denied { map_read map_write } for pid=1192 comm=\"rpc-libvirtd\" scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:virtd_t:s0 tclass=bpf permissive=0 ---- time->Sat Sep 17 01:06:33 2022 type=PROCTITLE msg=audit(1663369593.086:76): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=SYSCALL msg=audit(1663369593.086:76): arch=c000003e syscall=321 success=no exit=-13 a0=5 a1=7fa821fcd380 a2=80 a3=0 items=0 ppid=1 pid=1195 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663369593.086:76): avc: denied { prog_load } for pid=1195 comm=\"rpc-libvirtd\" scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:virtd_t:s0 tclass=bpf permissive=0 ---- time->Sat Sep 17 01:09:06 2022 type=PROCTITLE msg=audit(1663369746.156:76): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=SYSCALL msg=audit(1663369746.156:76): arch=c000003e syscall=321 success=no exit=-13 a0=5 a1=7f53e81bb380 a2=80 a3=0 items=0 ppid=1 pid=1192 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663369746.156:76): avc: denied { prog_run } for pid=1192 comm=\"rpc-libvirtd\" scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:virtd_t:s0 tclass=bpf permissive=0 EOF #============= virtd_t ============== allow virtd_t self:bpf { map_create map_read map_write prog_load prog_run } ; \u276f selocal -a \"allow virtd_t self:bpf { map_create map_read map_write prog_load prog_run };\" -c my_virt-manager_000015 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 01:26:04 2022 type=PROCTITLE msg=audit(1663370764.663:54): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=PATH msg=audit(1663370764.663:54): item=0 name=\"/sys/kernel/debug/kvm\" inode=19632 dev=00:07 mode=040755 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:debugfs_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663370764.663:54): cwd=\"/\" type=SYSCALL msg=audit(1663370764.663:54): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7f0548001450 a2=90800 a3=0 items=1 ppid=1 pid=1190 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663370764.663:54): avc: denied { read } for pid=1190 comm=\"rpc-libvirtd\" name=\"kvm\" dev=\"debugfs\" ino=19632 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:object_r:debugfs_t:s0 tclass=dir permissive=0 EOF #============= virtd_t ============== allow virtd_t debugfs_t:dir read ; \u276f selocal -a \"kernel_read_debugfs(virtd_t)\" -c my_virt-manager_000016 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 01:36:24 2022 type=PROCTITLE msg=audit(1663371384.123:37): proctitle=737368643A206461766964 type=SOCKADDR msg=audit(1663371384.123:37): saddr=0A00170C000000000000000000000000000000000000000100000000 type=SYSCALL msg=audit(1663371384.123:37): arch=c000003e syscall=49 success=no exit=-13 a0=7 a1=55f1bf7fb9b0 a2=1c a3=0 items=0 ppid=1097 pid=1101 auid=1000 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=(none) ses=1 comm=\"sshd\" exe=\"/usr/sbin/sshd\" subj=system_u:system_r:sshd_t:s0 key=(null) type=AVC msg=audit(1663371384.123:37): avc: denied { name_bind } for pid=1101 comm=\"sshd\" src=5900 scontext=system_u:system_r:sshd_t:s0 tcontext=system_u:object_r:vnc_port_t:s0 tclass=tcp_socket permissive=0 EOF #============= sshd_t ============== #!!!! This avc can be allowed using the boolean 'sshd_port_forwarding' allow sshd_t vnc_port_t:tcp_socket name_bind ; \u276f setsebool -P sshd_port_forwarding on \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 02:14:55 2022 type=PROCTITLE msg=audit(1663373695.646:89): proctitle=2F7573722F62696E2F71656D752D73797374656D2D7838365F3634002D6E616D650067756573743D64656269616E31312C64656275672D746872656164733D6F6E002D53002D6F626A656374007B22716F6D2D74797065223A22736563726574222C226964223A226D61737465724B657930222C22666F726D6174223A227261 type=PATH msg=audit(1663373695.646:89): item=0 name=\"/proc/sys/kernel/cap_last_cap\" nametype=UNKNOWN cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663373695.646:89): cwd=\"/\" type=SYSCALL msg=audit(1663373695.646:89): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7f4344a3802a a2=0 a3=0 items=1 ppid=1 pid=1377 auid=4294967295 uid=77 gid=77 euid=77 suid=77 fsuid=77 egid=77 sgid=77 fsgid=77 tty=(none) ses=4294967295 comm=\"qemu-system-x86\" exe=\"/usr/bin/qemu-system-x86_64\" subj=system_u:system_r:svirt_t:s0:c305,c965 key=(null) type=AVC msg=audit(1663373695.646:89): avc: denied { search } for pid=1377 comm=\"qemu-system-x86\" name=\"kernel\" dev=\"proc\" ino=12981 scontext=system_u:system_r:svirt_t:s0:c305,c965 tcontext=system_u:object_r:sysctl_kernel_t:s0 tclass=dir permissive=0 ---- time->Sat Sep 17 02:23:14 2022 type=PROCTITLE msg=audit(1663374194.313:87): proctitle=2F7573722F62696E2F71656D752D73797374656D2D7838365F3634002D6E616D650067756573743D64656269616E31312C64656275672D746872656164733D6F6E002D53002D6F626A656374007B22716F6D2D74797065223A22736563726574222C226964223A226D61737465724B657930222C22666F726D6174223A227261 type=PATH msg=audit(1663374194.313:87): item=0 name=\"/proc/sys/kernel/cap_last_cap\" inode=12583 dev=00:16 mode=0100444 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:sysctl_kernel_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663374194.313:87): cwd=\"/\" type=SYSCALL msg=audit(1663374194.313:87): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7f4dc568102a a2=0 a3=0 items=1 ppid=1 pid=1260 auid=4294967295 uid=77 gid=77 euid=77 suid=77 fsuid=77 egid=77 sgid=77 fsgid=77 tty=(none) ses=4294967295 comm=\"qemu-system-x86\" exe=\"/usr/bin/qemu-system-x86_64\" subj=system_u:system_r:svirt_t:s0:c245,c487 key=(null) type=AVC msg=audit(1663374194.313:87): avc: denied { read } for pid=1260 comm=\"qemu-system-x86\" name=\"cap_last_cap\" dev=\"proc\" ino=12583 scontext=system_u:system_r:svirt_t:s0:c245,c487 tcontext=system_u:object_r:sysctl_kernel_t:s0 tclass=file permissive=0 ---- time->Sat Sep 17 02:27:13 2022 type=PROCTITLE msg=audit(1663374433.816:87): proctitle=2F7573722F62696E2F71656D752D73797374656D2D7838365F3634002D6E616D650067756573743D64656269616E31312C64656275672D746872656164733D6F6E002D53002D6F626A656374007B22716F6D2D74797065223A22736563726574222C226964223A226D61737465724B657930222C22666F726D6174223A227261 type=PATH msg=audit(1663374433.816:87): item=0 name=\"/proc/sys/kernel/cap_last_cap\" inode=12478 dev=00:16 mode=0100444 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:sysctl_kernel_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663374433.816:87): cwd=\"/\" type=SYSCALL msg=audit(1663374433.816:87): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7fea28e8e02a a2=0 a3=0 items=1 ppid=1 pid=1252 auid=4294967295 uid=77 gid=77 euid=77 suid=77 fsuid=77 egid=77 sgid=77 fsgid=77 tty=(none) ses=4294967295 comm=\"qemu-system-x86\" exe=\"/usr/bin/qemu-system-x86_64\" subj=system_u:system_r:svirt_t:s0:c168,c285 key=(null) type=AVC msg=audit(1663374433.816:87): avc: denied { open } for pid=1252 comm=\"qemu-system-x86\" path=\"/proc/sys/kernel/cap_last_cap\" dev=\"proc\" ino=12478 scontext=system_u:system_r:svirt_t:s0:c168,c285 tcontext=system_u:object_r:sysctl_kernel_t:s0 tclass=file permissive=0 EOF #============= svirt_t ============== allow svirt_t sysctl_kernel_t:dir search ; allow svirt_t sysctl_kernel_t:file { open read } ; \u276f selocal -a \"allow svirt_t sysctl_kernel_t:dir search;\" -c my_virt-manager_000017_dir \u276f selocal -a \"allow svirt_t sysctl_kernel_t:file { open read };\" -c my_virt-manager_000017_file \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 02:29:45 2022 type=PROCTITLE msg=audit(1663374585.776:87): proctitle=2F7573722F62696E2F71656D752D73797374656D2D7838365F3634002D6E616D650067756573743D64656269616E31312C64656275672D746872656164733D6F6E002D53002D6F626A656374007B22716F6D2D74797065223A22736563726574222C226964223A226D61737465724B657930222C22666F726D6174223A227261 type=PATH msg=audit(1663374585.776:87): item=0 name=\"/sys/module/vhost/parameters/max_mem_regions\" inode=32904 dev=00:17 mode=0100444 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:sysfs_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663374585.776:87): cwd=\"/\" type=SYSCALL msg=audit(1663374585.776:87): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=56390eb16eb8 a2=0 a3=0 items=1 ppid=1 pid=1252 auid=4294967295 uid=77 gid=77 euid=77 suid=77 fsuid=77 egid=77 sgid=77 fsgid=77 tty=(none) ses=4294967295 comm=\"qemu-system-x86\" exe=\"/usr/bin/qemu-system-x86_64\" subj=system_u:system_r:svirt_t:s0:c210,c503 key=(null) type=AVC msg=audit(1663374585.776:87): avc: denied { read } for pid=1252 comm=\"qemu-system-x86\" name=\"max_mem_regions\" dev=\"sysfs\" ino=32904 scontext=system_u:system_r:svirt_t:s0:c210,c503 tcontext=system_u:object_r:sysfs_t:s0 tclass=file permissive=0 EOF #============= svirt_t ============== #!!!! This avc can be allowed using one of the these booleans: # virt_use_sysfs, virt_use_usb allow svirt_t sysfs_t:file read ; \u276f setsebool -P virt_use_sysfs on 9.4.5. Denials: portage hooks \u00b6 To make things simple I use this script to update the kernel in SELinux enforcing mode: #!/usr/bin/env bash function add_permissive_types () { for type in dracut_t portage_t ; do if ! grep -q \"^ ${ type } $ \" < ( semanage permissive --list --noheading ) ; then permissive_types +=( \" ${ type } \" ) if ! semanage permissive --add \" ${ type } \" ; then return 1 fi fi done } function clear_permissive_types () { for type in \" ${ permissive_types [@] } \" ; do semanage permissive --delete \" ${ type } \" done } declare -a permissive_types temp_dir = \" $( mktemp -d ) \" pushd \" ${ temp_dir } \" || { printf \"Failed to switch directory!\" > & 2 ; exit 1 ; } cat <<'EOF' > my_kernel_build_policy.te policy_module(my_kernel_build_policy, 1.0) gen_require(` type gcc_config_t; type kmod_t; type ldconfig_t; type portage_tmp_t; ') allow gcc_config_t self:capability dac_read_search; allow kmod_t portage_tmp_t:dir { add_name getattr open read remove_name search write }; allow kmod_t portage_tmp_t:file { create getattr open rename write }; allow kmod_t self:capability dac_read_search; allow ldconfig_t portage_tmp_t:dir { add_name getattr open read remove_name search write }; allow ldconfig_t portage_tmp_t:file { create open rename setattr write }; allow ldconfig_t portage_tmp_t:lnk_file read; allow ldconfig_t self:capability dac_read_search; EOF if b2sum --quiet -c <<< \"49b04d6dc0bc6bf7837a378b94e35005cf3eba6d48d744c29e50d9b98086e1bfa30a9fec5edc924bfd99800c4a722286ac34ad5a69fe78b9895ed29be214ba6e my_kernel_build_policy.te\" && \\ make -f /usr/share/selinux/mcs/include/Makefile my_kernel_build_policy.pp && \\ semodule -i my_kernel_build_policy.pp && \\ add_permissive_types then emerge sys-kernel/gentoo-kernel-bin fi clear_permissive_types semodule -r my_kernel_build_policy.pp popd || { printf \"Failed to switch directory!\" > & 2 ; exit 1 ; }","title":"9. SELinux (optional) (WIP)"},{"location":"selinux/#91-enable-selinux","text":"Info Currently, I only use SELinux on servers, and only mcs policy type to be able to \"isolate\" virtual machines from each other. Reduce the number of services (copy&paste one after the other): systemctl mask user@.service systemctl disable systemd-userdbd.socket cp -av /etc/nsswitch.conf /etc/._cfg0000_nsswitch.conf sed -i 's/^hosts:\\([[:space:]]*\\)mymachines \\(.*\\)$/hosts:\\1\\2/' /etc/._cfg0000_nsswitch.conf Prepare for SELinux (copy&paste one after the other): cp -av /etc/portage/make.conf /etc/portage/._cfg0000_make.conf echo -e 'POLICY_TYPES=\"mcs\"\\n' >> /etc/portage/._cfg0000_make.conf sed -i 's/^USE_HARDENED=\"\\(.*\\)\"/USE_HARDENED=\"\\1 -ubac -unconfined\"/' /etc/portage/._cfg0000_make.conf # execute dispatch-conf eselect profile set \"duxsco:hardened-systemd-selinux\" echo 'sec-policy/* ~amd64' >> /etc/portage/package.accept_keywords/main # To get a nice looking html site in /usr/share/doc/selinux-base-<VERSION>/mcs/html: echo 'sec-policy/selinux-base doc' >> /etc/portage/package.use/main FEATURES = \"-selinux\" emerge -1 selinux-base cp -av /etc/selinux/config /etc/selinux/._cfg0000_config sed -i 's/^SELINUXTYPE=strict$/SELINUXTYPE=mcs/' /etc/selinux/._cfg0000_config # execute dispatch-conf FEATURES = \"-selinux -sesandbox\" emerge -1 selinux-base FEATURES = \"-selinux -sesandbox\" emerge -1 selinux-base-policy emerge -atuDN @world Enable logging: systemctl enable auditd.service Rebuild the kernel with SELinux support: emerge sys-kernel/gentoo-kernel-bin && \\ rm -v /boot/efi*/EFI/Linux/gentoo-*-gentoo-dist.efi Reboot with permissive kernel. Make sure that UBAC gets disabled: bash -c '( cd /usr/share/selinux/mcs && semodule -i base.pp -i $(ls *.pp | grep -v base.pp) )'","title":"9.1. Enable SELinux"},{"location":"selinux/#92-relabel","text":"Relabel the entire system : mkdir /mnt/gentoo && \\ mount -o bind / /mnt/gentoo && \\ setfiles -r /mnt/gentoo /etc/selinux/mcs/contexts/files/file_contexts /mnt/gentoo/ { dev,home,proc,run,sys,tmp,boot/efi*,var/cache/binpkgs,var/cache/distfiles,var/db/repos/gentoo,var/tmp } && \\ umount /mnt/gentoo && \\ rlpkg -a -r && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Make sure that nothing (except .keep files) is unlabeled: export tmpdir = \" $( mktemp -d ) \" && \\ mount --bind / \" $tmpdir \" && \\ find \" $tmpdir \" -context system_u:object_r:unlabeled_t:s0 && \\ umount \" $tmpdir \" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" If /proc was listed by the code of the previous codeblock you have to relabel to avoid a denial: \u276f cat <<EOF | audit2allow [ 19.902620] audit: type=1400 audit(1663630933.439:3): avc: denied { mounton } for pid=1062 comm=\"(auditd)\" path=\"/run/systemd/unit-root/proc\" dev=\"dm-3\" ino=67581 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:unlabeled_t:s0 tclass=dir permissive=1 EOF #============= init_t ============== allow init_t unlabeled_t:dir mounton ; # Credits: grift :) \u276f export tmpdir = \" $( mktemp -d ) \" && mount --bind / \" $tmpdir \" && chcon system_u:object_r:proc_t:s0 \" $tmpdir \" /proc && umount \" $tmpdir \" && echo -e \"\\e[1;32mSUCCESS\\e[0m\" In the custom Gentoo Linux installation , the SSH port has been changed to 50022. This needs to be considered for no SELinux denials to occur: \u276f semanage port -l | grep -e ssh -e Port SELinux Port Type Proto Port Number ssh_port_t tcp 22 \u276f semanage port -a -t ssh_port_t -p tcp 50022 \u276f semanage port -l | grep -e ssh -e Port SELinux Port Type Proto Port Number ssh_port_t tcp 50022 , 22","title":"9.2. Relabel"},{"location":"selinux/#93-users-and-services","text":"Default mcs SELinux login and user settings: \u276f semanage login -l Login Name SELinux User MLS/MCS Range Service __default__ user_u s0-s0 * root root s0-s0:c0.c1023 * \u276f semanage user -l Labeling MLS/ MLS/ SELinux User Prefix MCS Level MCS Range SELinux Roles root sysadm s0 s0-s0:c0.c1023 staff_r sysadm_r staff_u staff s0 s0-s0:c0.c1023 staff_r sysadm_r sysadm_u sysadm s0 s0-s0:c0.c1023 sysadm_r system_u user s0 s0-s0:c0.c1023 system_r unconfined_u unconfined s0 s0-s0:c0.c1023 unconfined_r user_u user s0 s0 user_r Add the initial user to the administration SELinux user : semanage login -a -s staff_u david restorecon -RFv /home/david bash -c 'echo \"%wheel ALL=(ALL) TYPE=sysadm_t ROLE=sysadm_r ALL\" | EDITOR=\"tee\" visudo -f /etc/sudoers.d/wheel && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"' Now, we should have: \u276f semanage login -l Login Name SELinux User MLS/MCS Range Service __default__ user_u s0-s0 * david staff_u s0-s0:c0.c1023 * root root s0-s0:c0.c1023 * Create /var/lib/sepolgen/interface_info for audit2why -R to work: sepolgen-ifgen -i /usr/share/selinux/mcs/include/support/","title":"9.3. Users and services"},{"location":"selinux/#94-selinux-policies","text":"Note Use create_policy.sh to create your SELinux policies after booting into permissive mode. The script expects you to reboot into permissive mode after installation of each newly created policy module via semodule -i <name>.pp .","title":"9.4. SELinux policies"},{"location":"selinux/#941-additional-relabeling","text":"In one case, I relabeled a file instead of executing semodule -i : # [ 12.208682] audit: type=1400 audit(1663626722.916:3): avc: denied { read } for pid=951 comm=\"10-gentoo-path\" name=\"profile.env\" dev=\"dm-1\" ino=285848 scontext=system_u:system_r:systemd_generator_t:s0 tcontext=system_u:object_r:etc_runtime_t:s0 tclass=file permissive=1 # [ 12.211534] audit: type=1400 audit(1663626722.916:4): avc: denied { open } for pid=951 comm=\"10-gentoo-path\" path=\"/etc/profile.env\" dev=\"dm-1\" ino=285848 scontext=system_u:system_r:systemd_generator_t:s0 tcontext=system_u:object_r:etc_runtime_t:s0 tclass=file permissive=1 # [ 12.214297] audit: type=1400 audit(1663626722.916:5): avc: denied { getattr } for pid=951 comm=\"10-gentoo-path\" path=\"/etc/profile.env\" dev=\"dm-1\" ino=285848 scontext=system_u:system_r:systemd_generator_t:s0 tcontext=system_u:object_r:etc_runtime_t:s0 tclass=file permissive=1 \u276f find / -inum 285848 /etc/profile.env \u276f semanage fcontext -l | grep '/etc/profile\\\\\\.env' | column -t /etc/profile \\. env regular file system_u:object_r:etc_runtime_t:s0 \u276f sesearch -A -s systemd_generator_t -c file -p getattr,open,read | grep etc allow systemd_generator_t etc_t:file { getattr ioctl lock open read } ; allow systemd_generator_t lvm_etc_t:file { getattr ioctl lock map open read } ; \u276f semanage fcontext -m -f f -t etc_t '/etc/profile\\.env' \u276f restorecon -Fv /etc/profile.env Relabeled /etc/profile.env from system_u:object_r:etc_runtime_t:s0 to system_u:object_r:etc_t:s0","title":"9.4.1. Additional relabeling"},{"location":"selinux/#942-vm-host","text":"Note I connect to libvirtd via TCP and SSH port forwarding, because I want to use my SSH key which is secured on a hardware token, and virt-manager doesn't seem to be able to handle my hardware token directly. Thus, I can't use s.th. like qemu+ssh://david@192.168.10.3:50022/system . I prefer managing downloads and network myself: echo \"\\ app-emulation/libvirt -virt-network app-emulation/qemu -curl\" >> /etc/portage/package.use/main I setup the internal network manually: \u276f head /etc/systemd/network/br0.* == > /etc/systemd/network/br0.netdev < == [ NetDev ] Name = br0 Kind = bridge == > /etc/systemd/network/br0.network < == [ Match ] Name = br0 [ Network ] Address = 192 .168.110.1/24 ConfigureWithoutCarrier = true Install: emerge -av app-emulation/libvirt Enable libvirt's TCP transport : systemctl enable libvirtd-tcp.socket && \\ systemctl start libvirtd-tcp.socket && \\ systemctl enable libvirt-guests.service && \\ systemctl start libvirt-guests.service && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" systemd should listen now on TCP port 16509: \u276f lsof -nP -iTCP -sTCP:LISTEN COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME systemd 1 root 48u IPv6 50548 0t0 TCP *:16509 ( LISTEN ) systemd-r 1063 systemd-resolve 12u IPv4 18306 0t0 TCP *:5355 ( LISTEN ) systemd-r 1063 systemd-resolve 14u IPv6 18309 0t0 TCP *:5355 ( LISTEN ) systemd-r 1063 systemd-resolve 18u IPv4 18313 0t0 TCP 127 .0.0.53:53 ( LISTEN ) systemd-r 1063 systemd-resolve 20u IPv4 18315 0t0 TCP 127 .0.0.54:53 ( LISTEN ) sshd 1096 root 3u IPv4 18400 0t0 TCP *:50022 ( LISTEN ) sshd 1096 root 4u IPv6 18401 0t0 TCP *:50022 ( LISTEN ) Forward the connection with: ssh -NL 56509 :127.0.0.1:16509 -p 50022 david@192.168.10.3 Add this connection in virt-manager : qemu+tcp://127.0.0.1:56509/system","title":"9.4.2. VM host"},{"location":"selinux/#9441-connecting-with-virt-manager-over-tcp","text":"\u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 22:51:23 2022 type=AVC msg=audit(1663361483.820:41): avc: denied { write } for pid=1 comm=\"systemd\" name=\"libvirt-sock\" dev=\"tmpfs\" ino=1548 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:virt_runtime_t:s0 tclass=sock_file permissive=0 EOF #============= init_t ============== allow init_t virt_runtime_t:sock_file write ; \u276f selocal -a \"virt_stream_connect(init_t)\" -c my_libvirtd_service_000000 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 22:54:07 2022 type=AVC msg=audit(1663361647.136:50): avc: denied { write } for pid=1 comm=\"systemd\" name=\"virtlockd-sock\" dev=\"tmpfs\" ino=1558 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:virtlockd_run_t:s0 tclass=sock_file permissive=0 EOF #============= init_t ============== allow init_t virtlockd_run_t:sock_file write ; \u276f selocal -a \"allow init_t virtlockd_run_t:sock_file write;\" -c my_libvirtd_service_000001 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 22:56:14 2022 type=PROCTITLE msg=audit(1663361774.700:52): proctitle=\"/lib/systemd/systemd-machined\" type=SYSCALL msg=audit(1663361774.700:52): arch=c000003e syscall=138 success=no exit=-13 a0=3 a1=7ffef47c94d0 a2=0 a3=7fbe36521df0 items=0 ppid=1 pid=1221 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"systemd-machine\" exe=\"/lib/systemd/systemd-machined\" subj=system_u:system_r:systemd_machined_t:s0 key=(null) type=AVC msg=audit(1663361774.700:52): avc: denied { getattr } for pid=1221 comm=\"systemd-machine\" name=\"/\" dev=\"proc\" ino=1 scontext=system_u:system_r:systemd_machined_t:s0 tcontext=system_u:object_r:proc_t:s0 tclass=filesystem permissive=0 EOF #============= systemd_machined_t ============== allow systemd_machined_t proc_t:filesystem getattr ; \u276f selocal -a \"kernel_getattr_proc(systemd_machined_t)\" -c my_libvirtd_service_000002 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 22:59:47 2022 type=PROCTITLE msg=audit(1663361987.606:52): proctitle=\"/lib/systemd/systemd-machined\" type=PATH msg=audit(1663361987.606:52): item=0 name=\"/\" inode=256 dev=00:1f mode=040755 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:root_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663361987.606:52): cwd=\"/\" type=SYSCALL msg=audit(1663361987.606:52): arch=c000003e syscall=137 success=no exit=-13 a0=7f10c6beeccd a1=7ffcc787c590 a2=3 a3=523234cc234200f5 items=1 ppid=1 pid=1206 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"systemd-machine\" exe=\"/lib/systemd/systemd-machined\" subj=system_u:system_r:systemd_machined_t:s0 key=(null) type=AVC msg=audit(1663361987.606:52): avc: denied { getattr } for pid=1206 comm=\"systemd-machine\" name=\"/\" dev=\"dm-1\" ino=256 scontext=system_u:system_r:systemd_machined_t:s0 tcontext=system_u:object_r:fs_t:s0 tclass=filesystem permissive=0 EOF #============= systemd_machined_t ============== allow systemd_machined_t fs_t:filesystem getattr ; \u276f selocal -a \"fs_getattr_xattr_fs(systemd_machined_t)\" -c my_libvirtd_service_000003 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:04:27 2022 type=PROCTITLE msg=audit(1663362267.026:53): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=PATH msg=audit(1663362267.026:53): item=0 name=\"/var/run/utmp\" inode=98 dev=00:1a mode=0100664 ouid=0 ogid=406 rdev=00:00 obj=system_u:object_r:initrc_runtime_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663362267.026:53): cwd=\"/\" type=SYSCALL msg=audit(1663362267.026:53): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7fdcd4460e88 a2=80000 a3=0 items=1 ppid=1 pid=1221 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663362267.026:53): avc: denied { read } for pid=1221 comm=\"libvirtd\" name=\"utmp\" dev=\"tmpfs\" ino=98 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:object_r:initrc_runtime_t:s0 tclass=file permissive=0 ---- time->Fri Sep 16 23:06:32 2022 type=PROCTITLE msg=audit(1663362392.993:53): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=PATH msg=audit(1663362392.993:53): item=0 name=\"/var/run/utmp\" inode=95 dev=00:1a mode=0100664 ouid=0 ogid=406 rdev=00:00 obj=system_u:object_r:initrc_runtime_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663362392.993:53): cwd=\"/\" type=SYSCALL msg=audit(1663362392.993:53): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7f02818d6e88 a2=80000 a3=0 items=1 ppid=1 pid=1197 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663362392.993:53): avc: denied { open } for pid=1197 comm=\"libvirtd\" path=\"/run/utmp\" dev=\"tmpfs\" ino=95 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:object_r:initrc_runtime_t:s0 tclass=file permissive=0 ---- time->Fri Sep 16 23:09:33 2022 type=AVC msg=audit(1663362573.460:53): avc: denied { lock } for pid=1189 comm=\"libvirtd\" path=\"/run/utmp\" dev=\"tmpfs\" ino=95 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:object_r:initrc_runtime_t:s0 tclass=file permissive=0 EOF #============= virtd_t ============== allow virtd_t initrc_runtime_t:file { lock open read } ; \u276f selocal -a \"allow virtd_t initrc_runtime_t:file { lock open read };\" -c my_libvirtd_service_000004 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:12:30 2022 type=PROCTITLE msg=audit(1663362750.713:55): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=PATH msg=audit(1663362750.713:55): item=0 name=\"/run/systemd/userdb/io.systemd.Machine\" inode=1562 dev=00:1a mode=0140666 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:systemd_userdbd_runtime_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663362750.713:55): cwd=\"/\" type=SOCKADDR msg=audit(1663362750.713:55): saddr=01002F72756E2F73797374656D642F7573657264622F696F2E73797374656D642E4D616368696E6500 type=SYSCALL msg=audit(1663362750.713:55): arch=c000003e syscall=42 success=no exit=-13 a0=1b a1=7f1d8dffa660 a2=29 a3=7f1d740302b0 items=1 ppid=1 pid=1205 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"daemon-init\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663362750.713:55): avc: denied { connectto } for pid=1205 comm=\"daemon-init\" path=\"/run/systemd/userdb/io.systemd.Machine\" scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:systemd_machined_t:s0 tclass=unix_stream_socket permissive=0 EOF #============= virtd_t ============== allow virtd_t systemd_machined_t:unix_stream_socket connectto ; \u276f selocal -a \"systemd_connect_machined(virtd_t)\" -c my_libvirtd_service_000005 \u276f selocal -b -L","title":"9.4.4.1 Connecting with virt-manager over TCP"},{"location":"selinux/#9442-vm-creation-with-virt-manager","text":"\u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:24:31 2022 type=PROCTITLE msg=audit(1663363471.726:56): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=PATH msg=audit(1663363471.726:56): item=0 name=\"/dev/cpu/0/msr\" inode=85 dev=00:05 mode=020600 ouid=0 ogid=0 rdev=ca:00 obj=system_u:object_r:cpu_device_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663363471.726:56): cwd=\"/\" type=SYSCALL msg=audit(1663363471.726:56): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7f02211d4670 a2=0 a3=0 items=1 ppid=1 pid=1223 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663363471.726:56): avc: denied { read } for pid=1223 comm=\"rpc-libvirtd\" name=\"msr\" dev=\"devtmpfs\" ino=85 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:object_r:cpu_device_t:s0 tclass=chr_file permissive=0 ---- time->Fri Sep 16 23:28:05 2022 type=PROCTITLE msg=audit(1663363685.759:56): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=PATH msg=audit(1663363685.759:56): item=0 name=\"/dev/cpu/0/msr\" inode=85 dev=00:05 mode=020600 ouid=0 ogid=0 rdev=ca:00 obj=system_u:object_r:cpu_device_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663363685.759:56): cwd=\"/\" type=SYSCALL msg=audit(1663363685.759:56): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7fad25c9f670 a2=0 a3=0 items=1 ppid=1 pid=1204 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663363685.759:56): avc: denied { open } for pid=1204 comm=\"rpc-libvirtd\" path=\"/dev/cpu/0/msr\" dev=\"devtmpfs\" ino=85 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:object_r:cpu_device_t:s0 tclass=chr_file permissive=0 EOF #============= virtd_t ============== allow virtd_t cpu_device_t:chr_file { open read } ; \u276f selocal -a \"allow virtd_t cpu_device_t:chr_file { open read };\" -c my_virt-manager_000000 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:31:01 2022 type=PROCTITLE msg=audit(1663363861.959:56): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=PATH msg=audit(1663363861.959:56): item=0 name=\"/dev/cpu/0/msr\" inode=85 dev=00:05 mode=020600 ouid=0 ogid=0 rdev=ca:00 obj=system_u:object_r:cpu_device_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663363861.959:56): cwd=\"/\" type=SYSCALL msg=audit(1663363861.959:56): arch=c000003e syscall=257 success=no exit=-1 a0=ffffff9c a1=7f46e847c670 a2=0 a3=0 items=1 ppid=1 pid=1197 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663363861.959:56): avc: denied { sys_rawio } for pid=1197 comm=\"rpc-libvirtd\" capability=17 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:virtd_t:s0 tclass=capability permissive=0 EOF #============= virtd_t ============== allow virtd_t self:capability sys_rawio ; \u276f selocal -a \"allow virtd_t self:capability sys_rawio;\" -c my_virt-manager_000001 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:41:00 2022 type=PROCTITLE msg=audit(1663364460.659:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663364460.659:60): item=0 name=\"/proc/sys/kernel/cap_last_cap\" nametype=UNKNOWN cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663364460.659:60): cwd=\"/\" type=SYSCALL msg=audit(1663364460.659:60): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7f2e2ef8802a a2=0 a3=0 items=1 ppid=1 pid=1284 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663364460.659:60): avc: denied { search } for pid=1284 comm=\"virtlogd\" name=\"kernel\" dev=\"proc\" ino=12520 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:sysctl_kernel_t:s0 tclass=dir permissive=0 ---- time->Fri Sep 16 23:43:15 2022 type=PROCTITLE msg=audit(1663364595.286:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663364595.286:60): item=0 name=\"/proc/sys/kernel/cap_last_cap\" inode=13044 dev=00:16 mode=0100444 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:sysctl_kernel_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663364595.286:60): cwd=\"/\" type=SYSCALL msg=audit(1663364595.286:60): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7f4091f0a02a a2=0 a3=0 items=1 ppid=1 pid=1237 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663364595.286:60): avc: denied { read } for pid=1237 comm=\"virtlogd\" name=\"cap_last_cap\" dev=\"proc\" ino=13044 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:sysctl_kernel_t:s0 tclass=file permissive=0 ---- time->Fri Sep 16 23:45:38 2022 type=PROCTITLE msg=audit(1663364738.143:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663364738.143:60): item=0 name=\"/proc/sys/kernel/cap_last_cap\" inode=12583 dev=00:16 mode=0100444 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:sysctl_kernel_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663364738.143:60): cwd=\"/\" type=SYSCALL msg=audit(1663364738.143:60): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7ffbbec4802a a2=0 a3=0 items=1 ppid=1 pid=1262 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663364738.143:60): avc: denied { open } for pid=1262 comm=\"virtlogd\" path=\"/proc/sys/kernel/cap_last_cap\" dev=\"proc\" ino=12583 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:sysctl_kernel_t:s0 tclass=file permissive=0 EOF #============= virtlogd_t ============== allow virtlogd_t sysctl_kernel_t:dir search ; allow virtlogd_t sysctl_kernel_t:file { open read } ; \u276f selocal -a \"allow virtlogd_t sysctl_kernel_t:dir search;\" -c my_virt-manager_000002_dir \u276f selocal -a \"allow virtlogd_t sysctl_kernel_t:file { open read };\" -c my_virt-manager_000002_file \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:48:52 2022 type=PROCTITLE msg=audit(1663364932.490:60): proctitle=\"/usr/sbin/virtlogd\" type=SYSCALL msg=audit(1663364932.490:60): arch=c000003e syscall=138 success=no exit=-13 a0=5 a1=7ffded86dc50 a2=0 a3=7f2967143df0 items=0 ppid=1 pid=1253 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663364932.490:60): avc: denied { getattr } for pid=1253 comm=\"virtlogd\" name=\"/\" dev=\"proc\" ino=1 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:proc_t:s0 tclass=filesystem permissive=0 EOF #============= virtlogd_t ============== allow virtlogd_t proc_t:filesystem getattr ; \u276f selocal -a \"kernel_getattr_proc(virtlogd_t)\" -c my_virt-manager_000003 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:52:05 2022 type=PROCTITLE msg=audit(1663365125.670:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663365125.670:60): item=0 name=\"/usr/sbin/virtlogd\" nametype=UNKNOWN cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663365125.670:60): cwd=\"/\" type=SYSCALL msg=audit(1663365125.670:60): arch=c000003e syscall=89 success=no exit=-13 a0=7ffff4e82120 a1=7ffff4e81cc0 a2=3ff a3=1 items=1 ppid=1 pid=1298 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663365125.670:60): avc: denied { search } for pid=1298 comm=\"virtlogd\" name=\"sbin\" dev=\"dm-2\" ino=53969 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:bin_t:s0 tclass=dir permissive=0 EOF #============= virtlogd_t ============== allow virtlogd_t bin_t:dir search ; \u276f selocal -a \"allow virtlogd_t bin_t:dir search;\" -c my_virt-manager_000004 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:54:28 2022 type=PROCTITLE msg=audit(1663365268.836:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663365268.836:60): item=0 name=\"/run/systemd/journal/socket\" nametype=UNKNOWN cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663365268.836:60): cwd=\"/\" type=SYSCALL msg=audit(1663365268.836:60): arch=c000003e syscall=21 success=no exit=-13 a0=7f7b39d1de7e a1=2 a2=1 a3=ce358e085363cd20 items=1 ppid=1 pid=1221 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663365268.836:60): avc: denied { search } for pid=1221 comm=\"virtlogd\" name=\"journal\" dev=\"tmpfs\" ino=67 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:syslogd_runtime_t:s0 tclass=dir permissive=0 EOF #============= virtlogd_t ============== allow virtlogd_t syslogd_runtime_t:dir search ; \u276f selocal -a \"allow virtlogd_t syslogd_runtime_t:dir search;\" -c my_virt-manager_000005 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Fri Sep 16 23:57:52 2022 type=PROCTITLE msg=audit(1663365472.796:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663365472.796:60): item=0 name=\"/run/systemd/journal/socket\" inode=69 dev=00:1a mode=0140666 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:devlog_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663365472.796:60): cwd=\"/\" type=SYSCALL msg=audit(1663365472.796:60): arch=c000003e syscall=21 success=no exit=-13 a0=7fbf53001e7e a1=2 a2=1 a3=2f9a13ca77778bab items=1 ppid=1 pid=1258 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663365472.796:60): avc: denied { write } for pid=1258 comm=\"virtlogd\" name=\"socket\" dev=\"tmpfs\" ino=69 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:devlog_t:s0 tclass=sock_file permissive=0 EOF #============= virtlogd_t ============== allow virtlogd_t devlog_t:sock_file write ; \u276f selocal -a \"allow virtlogd_t devlog_t:sock_file write;\" -c my_virt-manager_000006 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 00:01:05 2022 type=PROCTITLE msg=audit(1663365665.069:60): proctitle=\"/usr/sbin/virtlogd\" type=SYSCALL msg=audit(1663365665.069:60): arch=c000003e syscall=41 success=no exit=-13 a0=1 a1=2 a2=0 a3=7f3284482ac0 items=0 ppid=1 pid=1287 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663365665.069:60): avc: denied { create } for pid=1287 comm=\"virtlogd\" scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:system_r:virtlogd_t:s0 tclass=unix_dgram_socket permissive=0 EOF #============= virtlogd_t ============== allow virtlogd_t self:unix_dgram_socket create ; \u276f selocal -a \"allow virtlogd_t self:unix_dgram_socket create;\" -c my_virt-manager_000007 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 00:04:39 2022 type=PROCTITLE msg=audit(1663365879.139:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663365879.139:60): item=0 name=\"/etc/ssl/openssl.cnf\" nametype=UNKNOWN cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663365879.139:60): cwd=\"/\" type=SYSCALL msg=audit(1663365879.139:60): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=5579e68a4a90 a2=0 a3=0 items=1 ppid=1 pid=1255 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663365879.139:60): avc: denied { search } for pid=1255 comm=\"virtlogd\" name=\"ssl\" dev=\"dm-3\" ino=456 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:cert_t:s0 tclass=dir permissive=0 ---- time->Sat Sep 17 00:07:06 2022 type=PROCTITLE msg=audit(1663366026.166:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663366026.166:60): item=0 name=\"/etc/ssl/openssl.cnf\" inode=76254 dev=00:1f mode=0100644 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:cert_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663366026.166:60): cwd=\"/\" type=SYSCALL msg=audit(1663366026.166:60): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=5636a04f1a90 a2=0 a3=0 items=1 ppid=1 pid=1234 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663366026.166:60): avc: denied { read } for pid=1234 comm=\"virtlogd\" name=\"openssl.cnf\" dev=\"dm-3\" ino=76254 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:cert_t:s0 tclass=file permissive=0 ---- time->Sat Sep 17 00:09:55 2022 type=PROCTITLE msg=audit(1663366195.780:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663366195.780:60): item=0 name=\"/etc/ssl/openssl.cnf\" inode=76254 dev=00:1f mode=0100644 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:cert_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663366195.780:60): cwd=\"/\" type=SYSCALL msg=audit(1663366195.780:60): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=55a7ed6ffa90 a2=0 a3=0 items=1 ppid=1 pid=1249 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663366195.780:60): avc: denied { open } for pid=1249 comm=\"virtlogd\" path=\"/etc/ssl/openssl.cnf\" dev=\"dm-0\" ino=76254 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:cert_t:s0 tclass=file permissive=0 ---- time->Sat Sep 17 00:12:01 2022 type=PROCTITLE msg=audit(1663366321.463:60): proctitle=\"/usr/sbin/virtlogd\" type=PATH msg=audit(1663366321.463:60): item=0 name=\"\" inode=76254 dev=00:1f mode=0100644 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:cert_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663366321.463:60): cwd=\"/\" type=SYSCALL msg=audit(1663366321.463:60): arch=c000003e syscall=262 success=no exit=-13 a0=7 a1=7f168d651f13 a2=7ffd6c4a6040 a3=1000 items=1 ppid=1 pid=1235 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"virtlogd\" exe=\"/usr/sbin/virtlogd\" subj=system_u:system_r:virtlogd_t:s0 key=(null) type=AVC msg=audit(1663366321.463:60): avc: denied { getattr } for pid=1235 comm=\"virtlogd\" path=\"/etc/ssl/openssl.cnf\" dev=\"dm-2\" ino=76254 scontext=system_u:system_r:virtlogd_t:s0 tcontext=system_u:object_r:cert_t:s0 tclass=file permissive=0 EOF #============= virtlogd_t ============== allow virtlogd_t cert_t:dir search ; allow virtlogd_t cert_t:file { getattr open read } ; \u276f selocal -a \"allow virtlogd_t cert_t:dir search;\" -c my_virt-manager_000008_dir \u276f selocal -a \"allow virtlogd_t cert_t:file { getattr open read };\" -c my_virt-manager_000008_file \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 00:16:15 2022 type=PROCTITLE msg=audit(1663366575.140:63): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=PATH msg=audit(1663366575.140:63): item=0 name=\"/dev/urandom\" inode=6 dev=00:37 mode=020666 ouid=0 ogid=0 rdev=01:09 obj=system_u:object_r:urandom_device_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663366575.140:63): cwd=\"/\" type=SYSCALL msg=audit(1663366575.140:63): arch=c000003e syscall=94 success=no exit=-13 a0=7fa59c01c990 a1=0 a2=0 a3=100 items=1 ppid=1190 pid=1267 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663366575.140:63): avc: denied { setattr } for pid=1267 comm=\"rpc-libvirtd\" name=\"urandom\" dev=\"tmpfs\" ino=6 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:object_r:urandom_device_t:s0 tclass=chr_file permissive=0 EOF #============= virtd_t ============== allow virtd_t urandom_device_t:chr_file setattr ; \u276f selocal -a \"allow virtd_t urandom_device_t:chr_file setattr;\" -c my_virt-manager_000009 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 00:37:01 2022 type=AVC msg=audit(1663367821.716:65): avc: denied { connectto } for pid=1060 comm=\"auditd\" path=\"/run/systemd/userdb/io.systemd.Machine\" scontext=system_u:system_r:auditd_t:s0 tcontext=system_u:system_r:systemd_machined_t:s0 tclass=unix_stream_socket permissive=0 EOF #============= auditd_t ============== allow auditd_t systemd_machined_t:unix_stream_socket connectto ; \u276f selocal -a \"systemd_connect_machined(auditd_t)\" -c my_virt-manager_000010 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 00:40:50 2022 type=USER_AVC msg=audit(1663368050.436:63): pid=1076 uid=101 auid=4294967295 ses=4294967295 subj=system_u:system_r:system_dbusd_t:s0 msg='avc: denied { send_msg } for msgtype=method_call interface=org.freedesktop.machine1.Manager member=CreateMachineWithNetwork dest=org.freedesktop.machine1 spid=1215 tpid=1214 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:systemd_machined_t:s0 tclass=dbus permissive=0 exe=\"/usr/bin/dbus-daemon\" sauid=101 hostname=? addr=? terminal=?' EOF #============= virtd_t ============== allow virtd_t systemd_machined_t:dbus send_msg ; \u276f selocal -a \"systemd_dbus_chat_machined(virtd_t)\" -c my_virt-manager_000011 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 00:45:43 2022 type=USER_AVC msg=audit(1663368343.369:54): pid=1069 uid=101 auid=4294967295 ses=4294967295 subj=system_u:system_r:system_dbusd_t:s0 msg='avc: denied { send_msg } for msgtype=method_call interface=org.freedesktop.login1.Manager member=Inhibit dest=org.freedesktop.login1 spid=1227 tpid=1071 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:systemd_logind_t:s0 tclass=dbus permissive=0 exe=\"/usr/bin/dbus-daemon\" sauid=101 hostname=? addr=? terminal=?' EOF #============= virtd_t ============== allow virtd_t systemd_logind_t:dbus send_msg ; \u276f selocal -a \"systemd_dbus_chat_logind(virtd_t)\" -c my_virt-manager_000012 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 00:54:02 2022 type=USER_AVC msg=audit(1663368842.223:77): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=system_u:system_r:init_t:s0 msg='avc: denied { start } for auid=n/a uid=0 gid=0 path=\"/run/systemd/transient/machine-qemu\\x2d2\\x2ddebian11.scope\" cmdline=\"/lib/systemd/systemd-machined\" function=\"bus_unit_queue_job\" scontext=system_u:system_r:systemd_machined_t:s0 tcontext=system_u:object_r:systemd_transient_unit_t:s0 tclass=service permissive=0 exe=\"/lib/systemd/systemd\" sauid=0 hostname=? addr=? terminal=?' EOF #============= systemd_machined_t ============== allow systemd_machined_t systemd_transient_unit_t:service start ; \u276f selocal -a \"init_start_transient_units(systemd_machined_t)\" -c my_virt-manager_000013 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 01:14:10 2022 type=PROCTITLE msg=audit(1663370050.736:71): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=SYSCALL msg=audit(1663370050.736:71): arch=c000003e syscall=321 success=yes exit=0 a0=10 a1=7f69d12cb3b0 a2=80 a3=0 items=0 ppid=1 pid=1231 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663370050.736:71): avc: denied { bpf } for pid=1231 comm=\"rpc-libvirtd\" capability=39 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:virtd_t:s0 tclass=capability2 permissive=0 ---- time->Sat Sep 17 01:20:26 2022 type=PROCTITLE msg=audit(1663370426.119:88): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=SYSCALL msg=audit(1663370426.119:88): arch=c000003e syscall=321 success=yes exit=31 a0=5 a1=7f8b9ce86380 a2=80 a3=40811 items=0 ppid=1 pid=1404 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=BPF msg=audit(1663370426.119:88): prog-id=33 op=LOAD type=AVC msg=audit(1663370426.119:88): avc: denied { perfmon } for pid=1404 comm=\"rpc-libvirtd\" capability=38 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:virtd_t:s0 tclass=capability2 permissive=0 EOF #============= virtd_t ============== allow virtd_t self:capability2 { bpf perfmon } ; \u276f selocal -a \"allow virtd_t self:capability2 { bpf perfmon };\" -c my_virt-manager_000014 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 01:01:30 2022 type=PROCTITLE msg=audit(1663369290.669:76): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=SYSCALL msg=audit(1663369290.669:76): arch=c000003e syscall=321 success=no exit=-13 a0=0 a1=7faf1344e620 a2=80 a3=4 items=0 ppid=1 pid=1191 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663369290.669:76): avc: denied { map_create } for pid=1191 comm=\"rpc-libvirtd\" scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:virtd_t:s0 tclass=bpf permissive=0 ---- time->Sat Sep 17 01:04:17 2022 type=PROCTITLE msg=audit(1663369457.883:76): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=SYSCALL msg=audit(1663369457.883:76): arch=c000003e syscall=321 success=no exit=-13 a0=0 a1=7f1fa0756620 a2=80 a3=4 items=0 ppid=1 pid=1192 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663369457.883:76): avc: denied { map_read map_write } for pid=1192 comm=\"rpc-libvirtd\" scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:virtd_t:s0 tclass=bpf permissive=0 ---- time->Sat Sep 17 01:06:33 2022 type=PROCTITLE msg=audit(1663369593.086:76): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=SYSCALL msg=audit(1663369593.086:76): arch=c000003e syscall=321 success=no exit=-13 a0=5 a1=7fa821fcd380 a2=80 a3=0 items=0 ppid=1 pid=1195 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663369593.086:76): avc: denied { prog_load } for pid=1195 comm=\"rpc-libvirtd\" scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:virtd_t:s0 tclass=bpf permissive=0 ---- time->Sat Sep 17 01:09:06 2022 type=PROCTITLE msg=audit(1663369746.156:76): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=SYSCALL msg=audit(1663369746.156:76): arch=c000003e syscall=321 success=no exit=-13 a0=5 a1=7f53e81bb380 a2=80 a3=0 items=0 ppid=1 pid=1192 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663369746.156:76): avc: denied { prog_run } for pid=1192 comm=\"rpc-libvirtd\" scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:system_r:virtd_t:s0 tclass=bpf permissive=0 EOF #============= virtd_t ============== allow virtd_t self:bpf { map_create map_read map_write prog_load prog_run } ; \u276f selocal -a \"allow virtd_t self:bpf { map_create map_read map_write prog_load prog_run };\" -c my_virt-manager_000015 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 01:26:04 2022 type=PROCTITLE msg=audit(1663370764.663:54): proctitle=2F7573722F7362696E2F6C69627669727464002D2D74696D656F757400313230 type=PATH msg=audit(1663370764.663:54): item=0 name=\"/sys/kernel/debug/kvm\" inode=19632 dev=00:07 mode=040755 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:debugfs_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663370764.663:54): cwd=\"/\" type=SYSCALL msg=audit(1663370764.663:54): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7f0548001450 a2=90800 a3=0 items=1 ppid=1 pid=1190 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\"rpc-libvirtd\" exe=\"/usr/sbin/libvirtd\" subj=system_u:system_r:virtd_t:s0 key=(null) type=AVC msg=audit(1663370764.663:54): avc: denied { read } for pid=1190 comm=\"rpc-libvirtd\" name=\"kvm\" dev=\"debugfs\" ino=19632 scontext=system_u:system_r:virtd_t:s0 tcontext=system_u:object_r:debugfs_t:s0 tclass=dir permissive=0 EOF #============= virtd_t ============== allow virtd_t debugfs_t:dir read ; \u276f selocal -a \"kernel_read_debugfs(virtd_t)\" -c my_virt-manager_000016 \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 01:36:24 2022 type=PROCTITLE msg=audit(1663371384.123:37): proctitle=737368643A206461766964 type=SOCKADDR msg=audit(1663371384.123:37): saddr=0A00170C000000000000000000000000000000000000000100000000 type=SYSCALL msg=audit(1663371384.123:37): arch=c000003e syscall=49 success=no exit=-13 a0=7 a1=55f1bf7fb9b0 a2=1c a3=0 items=0 ppid=1097 pid=1101 auid=1000 uid=1000 gid=1000 euid=1000 suid=1000 fsuid=1000 egid=1000 sgid=1000 fsgid=1000 tty=(none) ses=1 comm=\"sshd\" exe=\"/usr/sbin/sshd\" subj=system_u:system_r:sshd_t:s0 key=(null) type=AVC msg=audit(1663371384.123:37): avc: denied { name_bind } for pid=1101 comm=\"sshd\" src=5900 scontext=system_u:system_r:sshd_t:s0 tcontext=system_u:object_r:vnc_port_t:s0 tclass=tcp_socket permissive=0 EOF #============= sshd_t ============== #!!!! This avc can be allowed using the boolean 'sshd_port_forwarding' allow sshd_t vnc_port_t:tcp_socket name_bind ; \u276f setsebool -P sshd_port_forwarding on \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 02:14:55 2022 type=PROCTITLE msg=audit(1663373695.646:89): proctitle=2F7573722F62696E2F71656D752D73797374656D2D7838365F3634002D6E616D650067756573743D64656269616E31312C64656275672D746872656164733D6F6E002D53002D6F626A656374007B22716F6D2D74797065223A22736563726574222C226964223A226D61737465724B657930222C22666F726D6174223A227261 type=PATH msg=audit(1663373695.646:89): item=0 name=\"/proc/sys/kernel/cap_last_cap\" nametype=UNKNOWN cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663373695.646:89): cwd=\"/\" type=SYSCALL msg=audit(1663373695.646:89): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7f4344a3802a a2=0 a3=0 items=1 ppid=1 pid=1377 auid=4294967295 uid=77 gid=77 euid=77 suid=77 fsuid=77 egid=77 sgid=77 fsgid=77 tty=(none) ses=4294967295 comm=\"qemu-system-x86\" exe=\"/usr/bin/qemu-system-x86_64\" subj=system_u:system_r:svirt_t:s0:c305,c965 key=(null) type=AVC msg=audit(1663373695.646:89): avc: denied { search } for pid=1377 comm=\"qemu-system-x86\" name=\"kernel\" dev=\"proc\" ino=12981 scontext=system_u:system_r:svirt_t:s0:c305,c965 tcontext=system_u:object_r:sysctl_kernel_t:s0 tclass=dir permissive=0 ---- time->Sat Sep 17 02:23:14 2022 type=PROCTITLE msg=audit(1663374194.313:87): proctitle=2F7573722F62696E2F71656D752D73797374656D2D7838365F3634002D6E616D650067756573743D64656269616E31312C64656275672D746872656164733D6F6E002D53002D6F626A656374007B22716F6D2D74797065223A22736563726574222C226964223A226D61737465724B657930222C22666F726D6174223A227261 type=PATH msg=audit(1663374194.313:87): item=0 name=\"/proc/sys/kernel/cap_last_cap\" inode=12583 dev=00:16 mode=0100444 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:sysctl_kernel_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663374194.313:87): cwd=\"/\" type=SYSCALL msg=audit(1663374194.313:87): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7f4dc568102a a2=0 a3=0 items=1 ppid=1 pid=1260 auid=4294967295 uid=77 gid=77 euid=77 suid=77 fsuid=77 egid=77 sgid=77 fsgid=77 tty=(none) ses=4294967295 comm=\"qemu-system-x86\" exe=\"/usr/bin/qemu-system-x86_64\" subj=system_u:system_r:svirt_t:s0:c245,c487 key=(null) type=AVC msg=audit(1663374194.313:87): avc: denied { read } for pid=1260 comm=\"qemu-system-x86\" name=\"cap_last_cap\" dev=\"proc\" ino=12583 scontext=system_u:system_r:svirt_t:s0:c245,c487 tcontext=system_u:object_r:sysctl_kernel_t:s0 tclass=file permissive=0 ---- time->Sat Sep 17 02:27:13 2022 type=PROCTITLE msg=audit(1663374433.816:87): proctitle=2F7573722F62696E2F71656D752D73797374656D2D7838365F3634002D6E616D650067756573743D64656269616E31312C64656275672D746872656164733D6F6E002D53002D6F626A656374007B22716F6D2D74797065223A22736563726574222C226964223A226D61737465724B657930222C22666F726D6174223A227261 type=PATH msg=audit(1663374433.816:87): item=0 name=\"/proc/sys/kernel/cap_last_cap\" inode=12478 dev=00:16 mode=0100444 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:sysctl_kernel_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663374433.816:87): cwd=\"/\" type=SYSCALL msg=audit(1663374433.816:87): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=7fea28e8e02a a2=0 a3=0 items=1 ppid=1 pid=1252 auid=4294967295 uid=77 gid=77 euid=77 suid=77 fsuid=77 egid=77 sgid=77 fsgid=77 tty=(none) ses=4294967295 comm=\"qemu-system-x86\" exe=\"/usr/bin/qemu-system-x86_64\" subj=system_u:system_r:svirt_t:s0:c168,c285 key=(null) type=AVC msg=audit(1663374433.816:87): avc: denied { open } for pid=1252 comm=\"qemu-system-x86\" path=\"/proc/sys/kernel/cap_last_cap\" dev=\"proc\" ino=12478 scontext=system_u:system_r:svirt_t:s0:c168,c285 tcontext=system_u:object_r:sysctl_kernel_t:s0 tclass=file permissive=0 EOF #============= svirt_t ============== allow svirt_t sysctl_kernel_t:dir search ; allow svirt_t sysctl_kernel_t:file { open read } ; \u276f selocal -a \"allow svirt_t sysctl_kernel_t:dir search;\" -c my_virt-manager_000017_dir \u276f selocal -a \"allow svirt_t sysctl_kernel_t:file { open read };\" -c my_virt-manager_000017_file \u276f selocal -b -L \u276f cat <<EOF | audit2allow ---- time->Sat Sep 17 02:29:45 2022 type=PROCTITLE msg=audit(1663374585.776:87): proctitle=2F7573722F62696E2F71656D752D73797374656D2D7838365F3634002D6E616D650067756573743D64656269616E31312C64656275672D746872656164733D6F6E002D53002D6F626A656374007B22716F6D2D74797065223A22736563726574222C226964223A226D61737465724B657930222C22666F726D6174223A227261 type=PATH msg=audit(1663374585.776:87): item=0 name=\"/sys/module/vhost/parameters/max_mem_regions\" inode=32904 dev=00:17 mode=0100444 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:sysfs_t:s0 nametype=NORMAL cap_fp=0 cap_fi=0 cap_fe=0 cap_fver=0 cap_frootid=0 type=CWD msg=audit(1663374585.776:87): cwd=\"/\" type=SYSCALL msg=audit(1663374585.776:87): arch=c000003e syscall=257 success=no exit=-13 a0=ffffff9c a1=56390eb16eb8 a2=0 a3=0 items=1 ppid=1 pid=1252 auid=4294967295 uid=77 gid=77 euid=77 suid=77 fsuid=77 egid=77 sgid=77 fsgid=77 tty=(none) ses=4294967295 comm=\"qemu-system-x86\" exe=\"/usr/bin/qemu-system-x86_64\" subj=system_u:system_r:svirt_t:s0:c210,c503 key=(null) type=AVC msg=audit(1663374585.776:87): avc: denied { read } for pid=1252 comm=\"qemu-system-x86\" name=\"max_mem_regions\" dev=\"sysfs\" ino=32904 scontext=system_u:system_r:svirt_t:s0:c210,c503 tcontext=system_u:object_r:sysfs_t:s0 tclass=file permissive=0 EOF #============= svirt_t ============== #!!!! This avc can be allowed using one of the these booleans: # virt_use_sysfs, virt_use_usb allow svirt_t sysfs_t:file read ; \u276f setsebool -P virt_use_sysfs on","title":"9.4.4.2 VM creation with virt-manager"},{"location":"selinux/#945-denials-portage-hooks","text":"To make things simple I use this script to update the kernel in SELinux enforcing mode: #!/usr/bin/env bash function add_permissive_types () { for type in dracut_t portage_t ; do if ! grep -q \"^ ${ type } $ \" < ( semanage permissive --list --noheading ) ; then permissive_types +=( \" ${ type } \" ) if ! semanage permissive --add \" ${ type } \" ; then return 1 fi fi done } function clear_permissive_types () { for type in \" ${ permissive_types [@] } \" ; do semanage permissive --delete \" ${ type } \" done } declare -a permissive_types temp_dir = \" $( mktemp -d ) \" pushd \" ${ temp_dir } \" || { printf \"Failed to switch directory!\" > & 2 ; exit 1 ; } cat <<'EOF' > my_kernel_build_policy.te policy_module(my_kernel_build_policy, 1.0) gen_require(` type gcc_config_t; type kmod_t; type ldconfig_t; type portage_tmp_t; ') allow gcc_config_t self:capability dac_read_search; allow kmod_t portage_tmp_t:dir { add_name getattr open read remove_name search write }; allow kmod_t portage_tmp_t:file { create getattr open rename write }; allow kmod_t self:capability dac_read_search; allow ldconfig_t portage_tmp_t:dir { add_name getattr open read remove_name search write }; allow ldconfig_t portage_tmp_t:file { create open rename setattr write }; allow ldconfig_t portage_tmp_t:lnk_file read; allow ldconfig_t self:capability dac_read_search; EOF if b2sum --quiet -c <<< \"49b04d6dc0bc6bf7837a378b94e35005cf3eba6d48d744c29e50d9b98086e1bfa30a9fec5edc924bfd99800c4a722286ac34ad5a69fe78b9895ed29be214ba6e my_kernel_build_policy.te\" && \\ make -f /usr/share/selinux/mcs/include/Makefile my_kernel_build_policy.pp && \\ semodule -i my_kernel_build_policy.pp && \\ add_permissive_types then emerge sys-kernel/gentoo-kernel-bin fi clear_permissive_types semodule -r my_kernel_build_policy.pp popd || { printf \"Failed to switch directory!\" > & 2 ; exit 1 ; }","title":"9.4.5. Denials: portage hooks"},{"location":"system_setup/","text":"6.1. Portage Setup \u00b6 Make dispatch-conf show diffs in color and use vimdiff for merging: rsync -a /etc/dispatch-conf.conf /etc/._cfg0000_dispatch-conf.conf && \\ sed -i \\ -e \"s/diff=\\\"diff -Nu '%s' '%s'\\\"/diff=\\\"diff --color=always -Nu '%s' '%s'\\\"/\" \\ -e \"s/merge=\\\"sdiff --suppress-common-lines --output='%s' '%s' '%s'\\\"/merge=\\\"vimdiff -c'saveas %s' -c next -c'setlocal noma readonly' -c prev %s %s\\\"/\" \\ /etc/._cfg0000_dispatch-conf.conf Install to be able to configure /etc/portage/make.conf : emerge -1 app-portage/cpuid2cpuflags Configure portage (copy&paste one after the other): rsync -a /etc/portage/make.conf /etc/portage/._cfg0000_make.conf # If you use distcc, beware of: # https://wiki.gentoo.org/wiki/Distcc#-march.3Dnative # # You could resolve \"-march=native\" with app-misc/resolve-march-native sed -i 's/COMMON_FLAGS=\"-O2 -pipe\"/COMMON_FLAGS=\"-march=native -O2 -pipe\"/' /etc/portage/._cfg0000_make.conf echo 'EMERGE_DEFAULT_OPTS=\"--buildpkg --buildpkg-exclude ' \\' '*/*-bin sys-kernel/* virtual/*' \\' ' --noconfmem --with-bdeps=y --complete-graph=y\" L10N=\"de\" LINGUAS=\"${L10N}\" GENTOO_MIRRORS=\"https://ftp-stud.hs-esslingen.de/pub/Mirrors/gentoo/ https://ftp.fau.de/gentoo/ https://ftp.tu-ilmenau.de/mirror/gentoo/\" FETCHCOMMAND=\"curl --fail --silent --show-error --location --proto ' \\' '=https' \\' ' --tlsv1.2 --ciphers ' \\' 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' \\' ' --retry 2 --connect-timeout 60 -o \\\"\\${DISTDIR}/\\${FILE}\\\" \\\"\\${URI}\\\"\" RESUMECOMMAND=\"${FETCHCOMMAND} --continue-at -\" USE_HARDENED=\"pie -sslv3 -suid verify-sig\" USE=\"${USE_HARDENED} fish-completion\" ' >> /etc/portage/._cfg0000_make.conf echo \"*/* $( cpuid2cpuflags ) \" > /etc/portage/package.use/00cpu-flags (Optional) Change GENTOO_MIRRORS in /etc/portage/make.conf (copy&paste one after the other): # Install app-misc/yq ACCEPT_KEYWORDS = ~amd64 emerge -1 app-misc/yq # Get a list of country codes and names: curl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | xq -r '.mirrors.mirrorgroup[] | \"\\(.[\"@country\"]) \\(.[\"@countryname\"])\"' | sort -k2.2 # Choose your countries the mirrors should be located in: country = '\"AU\",\"BE\",\"BR\",\"CA\",\"CH\",\"CL\",\"CN\",\"CZ\",\"DE\",\"DK\",\"ES\",\"FR\",\"GR\",\"HK\",\"IL\",\"IT\",\"JP\",\"KR\",\"KZ\",\"LU\",\"NA\",\"NC\",\"NL\",\"PH\",\"PL\",\"PT\",\"RO\",\"RU\",\"SG\",\"SK\",\"TR\",\"TW\",\"UK\",\"US\",\"ZA\"' # Get a list of mirrors available over IPv4/IPv6 dual-stack in the countries of your choice with TLSv1.3 support curl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | xq -r \".mirrors.mirrorgroup[] | select([.\\\"@country\\\"] | inside([ ${ country } ])) | .mirror | if type==\\\"array\\\" then .[] else . end | .uri | if type==\\\"array\\\" then .[] else . end | select(.\\\"@protocol\\\" == \\\"http\\\" and .\\\"@ipv4\\\" == \\\"y\\\" and .\\\"@ipv6\\\" == \\\"y\\\" and (.\\\"#text\\\" | startswith(\\\"https://\\\"))) | .\\\"#text\\\"\" | while read -r i ; do if curl -fs --proto '=https' --tlsv1.3 -I \" ${ i } \" >/dev/null ; then echo \" ${ i } \" fi done I prefer English manpages and ignore above L10N setting for sys-apps/man-pages . Makes using Stackoverflow easier \ud83d\ude09. echo \"sys-apps/man-pages -l10n_de\" >> /etc/portage/package.use/main Install app-portage/eix : emerge -at app-portage/eix Mitigate CVE-2022-29154 among others before using rsync via eix-sync : echo 'net-misc/rsync ~amd64' >> /etc/portage/package.accept_keywords/main && \\ emerge -1 net-misc/rsync Execute eix-sync : eix-sync Read Gentoo news items: eselect news list # eselect news read 1 # eselect news read 2 # etc. Switch over to hardened profile: eselect profile set duxsco:hardened-systemd && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ emerge -1 sys-devel/gcc && \\ emerge -1 sys-devel/binutils sys-libs/glibc && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ emerge -e @world && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Update system: touch /etc/sysctl.conf && \\ echo \"sys-apps/systemd cryptsetup gnuefi\" >> /etc/portage/package.use/main && \\ emerge -atuDN @world 6.2. Non-Root User Creation \u00b6 Create a non-root user and set a password you can use with English keyboard layout for now. You can set a secure password after rebooting and taking care of localisation. useradd -m -G wheel -s /bin/bash david && \\ chmod u = rwx,og = /home/david && \\ echo -e 'alias cp=\"cp -i\"\\nalias mv=\"mv -i\"\\nalias rm=\"rm -i\"' >> /home/david/.bash_aliases && \\ chown david:david /home/david/.bash_aliases && \\ echo 'source \"${HOME}/.bash_aliases\"' >> /home/david/.bashrc && \\ passwd david (Optional) Create your authorized_keys : rsync -av --chown = david:david /etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys /home/david/.ssh/ Setup sudo: echo \"app-admin/sudo -sendmail\" >> /etc/portage/package.use/main && \\ emerge app-admin/sudo && \\ { [[ -d /etc/sudoers.d ]] || mkdir -m u = rwx,g = rx,o = /etc/sudoers.d ; } && \\ echo \"%wheel ALL=(ALL) ALL\" | EDITOR = \"tee\" visudo -f /etc/sudoers.d/wheel && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup vim: USE = \"-verify-sig\" emerge -1 dev-libs/libsodium && \\ emerge -1 dev-libs/libsodium app-editors/vim app-vim/molokai && \\ emerge --select --noreplace app-editors/vim app-vim/molokai && \\ cp -av /etc/portage/make.conf /etc/portage/._cfg0000_make.conf && \\ sed -i 's/^USE=\"\\([^\"]*\\)\"$/USE=\"\\1 vim-syntax\"/' /etc/portage/._cfg0000_make.conf && \\ echo \"filetype plugin on filetype indent on set number set paste syntax on colorscheme molokai\" | tee -a /root/.vimrc >> /home/david/.vimrc && \\ chown david:david /home/david/.vimrc && \\ eselect editor set vi && \\ eselect vi set vim && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 6.3. Configuration Of /etc/fstab \u00b6 Setup /etc/fstab: SWAP_UUID = \" $( blkid -s UUID -o value /mapperSwap ) \" && \\ SYSTEM_UUID = \" $( blkid -s UUID -o value /mapperSystem ) \" && \\ echo \"\" >> /etc/fstab && \\ echo \" $( find /devEfi* -maxdepth 0 | while read -r i ; do echo \"UUID= $( blkid -s UUID -o value \" $i \" ) ${ i /devE/boot \\/ e } vfat noatime,dmask=0022,fmask=0133 0 0\" done) UUID= ${ SWAP_UUID } none swap sw 0 0 UUID= ${ SYSTEM_UUID } / btrfs noatime,subvol=@root 0 0 UUID= ${ SYSTEM_UUID } /home btrfs noatime,subvol=@home 0 0 UUID= ${ SYSTEM_UUID } /var/cache/binpkgs btrfs noatime,subvol=@binpkgs 0 0 UUID= ${ SYSTEM_UUID } /var/cache/distfiles btrfs noatime,subvol=@distfiles 0 0 UUID= ${ SYSTEM_UUID } /var/db/repos/gentoo btrfs noatime,subvol=@ebuilds 0 0 UUID= ${ SYSTEM_UUID } /var/tmp btrfs noatime,subvol=@var_tmp 0 0 \" | column -o \" \" -t >> /etc/fstab && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 6.4. Secure Boot \u00b6 Credits: https://www.funtoo.org/Secure_Boot https://www.rodsbooks.com/efi-bootloaders/secureboot.html https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot In order to add your custom keys Setup Mode must have been enabled in your UEFI Firmware Settings before booting into SystemRescueCD. But, you can install Secure Boot files later on if you missed enabling Setup Mode . In the following, however, you have to generate Secure Boot files either way. Install required tools on your system: echo \"sys-boot/mokutil ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -at app-crypt/efitools app-crypt/sbsigntools sys-boot/mokutil Create Secure Boot keys and certificates: mkdir --mode = 0700 /etc/gentoo-installation/secureboot && \\ pushd /etc/gentoo-installation/secureboot && \\ # Create the keys openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=PK/\" -keyout PK.key -out PK.crt -days 7300 -nodes -sha256 && \\ openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=KEK/\" -keyout KEK.key -out KEK.crt -days 7300 -nodes -sha256 && \\ openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=db/\" -keyout db.key -out db.crt -days 7300 -nodes -sha256 && \\ # Prepare installation in EFI uuid = \" $( uuidgen --random ) \" && \\ cert-to-efi-sig-list -g \" ${ uuid } \" PK.crt PK.esl && \\ cert-to-efi-sig-list -g \" ${ uuid } \" KEK.crt KEK.esl && \\ cert-to-efi-sig-list -g \" ${ uuid } \" db.crt db.esl && \\ sign-efi-sig-list -k PK.key -c PK.crt PK PK.esl PK.auth && \\ sign-efi-sig-list -k PK.key -c PK.crt KEK KEK.esl KEK.auth && \\ sign-efi-sig-list -k KEK.key -c KEK.crt db db.esl db.auth && \\ popd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" If the following commands don't work you have to install db.auth , KEK.auth and PK.auth over the UEFI Firmware Settings upon reboot after the completion of this installation guide. Further information can be found at the end of this installation guide. Beware that the following commands delete all existing keys. pushd /etc/gentoo-installation/secureboot && \\ # Make them mutable { chattr -i /sys/firmware/efi/efivars/ { PK,KEK,db,dbx } * || true ; } && \\ # Install keys into EFI (PK last as it will enable Custom Mode locking out further unsigned changes) efi-updatevar -f db.auth db && \\ efi-updatevar -f KEK.auth KEK && \\ efi-updatevar -f PK.auth PK && \\ # Make them immutable { chattr +i /sys/firmware/efi/efivars/ { PK,KEK,db,dbx } * || true ; } && \\ popd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" 6.5. Kernel Installation \u00b6 Install sys-boot/efibootmgr : emerge -at sys-boot/efibootmgr Setup ESP(s): while read -r my_esp ; do bootctl --esp-path = \"/boot/ ${ my_esp } \" install && \\ efibootmgr --create --disk \"/dev/ $( lsblk -ndo pkname \" $( readlink -f \"/ ${ my_esp /efi/devEfi } \" ) \" ) \" --part 1 --label \"gentoo31415efi ${ my_esp } \" --loader '\\EFI\\systemd\\systemd-bootx64.efi' && \\ echo -e \"timeout 10\\neditor no\" > \"/boot/ ${ my_esp } /loader/loader.conf\" && \\ mv \"/boot/ ${ my_esp } /systemrescuecd.efi\" \"/boot/ ${ my_esp } /EFI/Linux/\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/ ${ my_esp } /EFI/systemd/systemd-bootx64.efi\" \"/boot/ ${ my_esp } /EFI/systemd/systemd-bootx64.efi\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/ ${ my_esp } /EFI/BOOT/BOOTX64.EFI\" \"/boot/ ${ my_esp } /EFI/BOOT/BOOTX64.EFI\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/ ${ my_esp } /EFI/Linux/systemrescuecd.efi\" \"/boot/ ${ my_esp } /EFI/Linux/systemrescuecd.efi\" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" done < < ( grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/boot/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab ) Microcode updates are not necessary for virtual machines. Otherwise, install sys-firmware/intel-microcode if you have an Intel CPU. Or, follow the Gentoo wiki instruction to update the microcode on AMD systems. ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ grep -q \"^vendor_id[[:space:]]*:[[:space:]]*GenuineIntel $ \" /proc/cpuinfo && \\ echo \"sys-firmware/intel-microcode intel-ucode\" >> /etc/portage/package.license && \\ echo \"sys-firmware/intel-microcode hostonly\" >> /etc/portage/package.use/main && \\ emerge -at sys-firmware/intel-microcode && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup portage hook: mkdir -p /etc/portage/env/sys-apps /etc/portage/env/sys-firmware /etc/portage/env/sys-kernel && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-firmware/intel-microcode && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/gentoo-kernel-bin && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/linux-firmware && \\ rm -f /root/portage_hook_kernel && \\ echo 'if [[ ${EBUILD_PHASE} == postinst ]]; then while read -r my_esp; do bootctl --esp-path=\"/boot/${my_esp}\" --no-variables --graceful update && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/${my_esp}/EFI/systemd/systemd-bootx64.efi\" \"/boot/${my_esp}/EFI/systemd/systemd-bootx64.efi\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/${my_esp}/EFI/BOOT/BOOTX64.EFI\" \"/boot/${my_esp}/EFI/BOOT/BOOTX64.EFI\" if [[ $? -ne 0 ]]; then cat <<' \\' 'EOF' \\' ' ___________________________ < Failed to Secure Boot sign! > --------------------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || EOF fi done < <(grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/boot/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab) fi' > /etc/portage/env/sys-apps/systemd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup sys-kernel/dracut (copy&paste one after the other): emerge -at sys-kernel/dracut system_uuid = \" $( blkid -s UUID -o value /mapperSystem ) \" my_crypt_root = \" $( blkid -s UUID -o value /devSystem* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s - ) \" my_crypt_swap = \" $( blkid -s UUID -o value /devSwap* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s - ) \" unset my_systemd_cryptenroll # If you intend to use systemd-cryptenroll, define this variable: # my_systemd_cryptenroll=\",tpm2-device=auto\" echo \"\\ hostonly=no hostonly_cmdline=yes use_fstab=yes compress=xz show_modules=yes uefi=yes early_microcode=yes uefi_stub=/usr/lib/systemd/boot/efi/linuxx64.efi.stub uefi_secureboot_cert=/etc/gentoo-installation/secureboot/db.crt uefi_secureboot_key=/etc/gentoo-installation/secureboot/db.key CMDLINE=( ro root=UUID= ${ system_uuid } ${ my_crypt_root } ${ my_crypt_swap } rd.luks.options=password-echo=no ${ my_systemd_cryptenroll } rootfstype=btrfs rootflags=subvol=@root mitigations=auto,nosmt ) kernel_cmdline=\" \\$ { CMDLINE [ * ]} \" unset CMDLINE\" >> /etc/dracut.conf Install tools required for booting: export install_lts_kernel = \"true\" && \\ echo \"sys-fs/btrfs-progs ~amd64 sys-kernel/gentoo-kernel-bin ~amd64 sys-kernel/linux-headers ~amd64 virtual/dist-kernel ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ { [ $install_lts_kernel = true ] && \\ echo \"\\ >=sys-fs/btrfs-progs-5.16 >=sys-kernel/gentoo-kernel-bin-5.16 >=sys-kernel/linux-headers-5.16 >=virtual/dist-kernel-5.16\" >> /etc/portage/package.mask/main || \\ true } && \\ echo \"sys-fs/btrfs-progs -convert\" >> /etc/portage/package.use/main && \\ echo \"sys-kernel/gentoo-kernel-bin -initramfs\" >> /etc/portage/package.use/main && \\ echo \"sys-kernel/linux-firmware linux-fw-redistributable no-source-code\" >> /etc/portage/package.license && \\ { [ -e /devSwapb ] && \\ emerge -at sys-fs/btrfs-progs sys-fs/mdadm sys-kernel/linux-firmware || \\ emerge -at sys-fs/btrfs-progs sys-kernel/linux-firmware } Install the kernel : emerge -at sys-kernel/gentoo-kernel-bin 6.6. Initial systemd configuration \u00b6 Do some initial configuration : systemd-firstboot --prompt --setup-machine-id If you dont't intend to use SELinux, reset all installed unit files. systemctl preset-all 6.7. Additional Packages \u00b6 Set /etc/hosts : rsync -a /etc/hosts /etc/._cfg0000_hosts && \\ sed -i 's/localhost$/localhost micro/' /etc/._cfg0000_hosts (Optional) Enable ssh service: systemctl --no-reload enable sshd.service starship: # If you have insufficient ressources, you may want to \"emerge -1 dev-lang/rust-bin\" beforehand. echo \"app-shells/starship ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge app-shells/starship && \\ mkdir --mode = 0700 /home/david/.config /root/.config && \\ touch /home/david/.config/starship.toml && \\ chown -R david:david /home/david/.config && \\ echo '[hostname] ssh_only = false format = \"[$hostname](bold red) \" ' | tee /root/.config/starship.toml > /home/david/.config/starship.toml && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" fish shell: echo \"=dev-libs/libpcre2- $( qatom -F \"%{PVR}\" \" $( portageq best_visible / dev-libs/libpcre2 ) \" ) pcre32\" >> /etc/portage/package.use/main && \\ echo \"app-shells/fish ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge app-shells/fish && \\ echo ' # Use fish in place of bash # keep this line at the bottom of ~/.bashrc if [[ -z ${chrooted} ]]; then if [[ -x /bin/fish ]]; then SHELL=/bin/fish exec /bin/fish fi elif [[ -z ${chrooted_su} ]]; then export chrooted_su=true source /etc/profile && su --login --whitelist-environment=chrooted,chrooted_su else env-update && source /etc/profile && export PS1=\"(chroot) $PS1\" fi' >> /root/.bashrc && \\ echo ' # Use fish in place of bash # keep this line at the bottom of ~/.bashrc if [[ -x /bin/fish ]]; then SHELL=/bin/fish exec /bin/fish fi' >> /home/david/.bashrc && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" root setup: /bin/fish -c fish_update_completions non-root setup: su -l david -c \"/bin/fish -c fish_update_completions\" Enable aliases and starship (copy&paste one after the other): su - exit su - david exit sed -i 's/^end$/ source \"$HOME\\/.bash_aliases\"\\n starship init fish | source\\nend/' /root/.config/fish/config.fish sed -i 's/^end$/ source \"$HOME\\/.bash_aliases\"\\n starship init fish | source\\nend/' /home/david/.config/fish/config.fish nerd fonts: emerge media-libs/fontconfig && \\ su -l david -c \"curl --proto '=https' --tlsv1.3 -fsSL -o /tmp/FiraCode.zip https://github.com/ryanoasis/nerd-fonts/releases/download/v2.2.2/FiraCode.zip\" && \\ b2sum -c <<< \"9f8ada87945ff10d9eced99369f7c6d469f9eaf2192490623a93b2397fe5b6ee3f0df6923b59eb87e92789840a205adf53c6278e526dbeeb25d0a6d307a07b18 /tmp/FiraCode.zip\" && \\ mkdir /tmp/FiraCode && \\ unzip -d /tmp/FiraCode /tmp/FiraCode.zip && \\ rm -f /tmp/FiraCode/*Windows* /tmp/FiraCode/Fura* && \\ mkdir /usr/share/fonts/nerd-firacode && \\ rsync -a --chown = 0 :0 --chmod = a = r /tmp/FiraCode/*.ttf /usr/share/fonts/nerd-firacode/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Download the Nerd Font Symbols Preset , verify the content and install. If you have sys-fs/mdadm installed: [[ -e /devSwapb ]] && \\ rsync -a /etc/mdadm.conf /etc/._cfg0000_mdadm.conf && \\ echo \"\" >> /etc/._cfg0000_mdadm.conf && \\ mdadm --detail --scan >> /etc/._cfg0000_mdadm.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ssh: rsync -a /etc/ssh/sshd_config /etc/ssh/._cfg0000_sshd_config && \\ sed -i \\ -e 's/^#Port 22$/Port 50022/' \\ -e 's/^#PermitRootLogin prohibit-password$/PermitRootLogin no/' \\ -e 's/^#KbdInteractiveAuthentication yes$/KbdInteractiveAuthentication no/' \\ -e 's/^#X11Forwarding no$/X11Forwarding no/' /etc/ssh/._cfg0000_sshd_config && \\ grep -q \"^PasswordAuthentication no $ \" /etc/ssh/._cfg0000_sshd_config && \\ echo \" AuthenticationMethods publickey KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com AllowUsers david\" >> /etc/ssh/._cfg0000_sshd_config && \\ ssh-keygen -A && \\ sshd -t && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Write down fingerprints to double check upon initial SSH connection to the Gentoo Linux machine: find /etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; Setup client SSH config: echo \"AddKeysToAgent no KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com HashKnownHosts no StrictHostKeyChecking ask VisualHostKey yes\" > /home/david/.ssh/config && \\ chown david:david /home/david/.ssh/config && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Disable sysrq for security sake : echo \"kernel.sysrq = 0\" > /etc/sysctl.d/99sysrq.conf misc tools: emerge -at app-misc/screen app-portage/gentoolkit","title":"6. System Setup"},{"location":"system_setup/#61-portage-setup","text":"Make dispatch-conf show diffs in color and use vimdiff for merging: rsync -a /etc/dispatch-conf.conf /etc/._cfg0000_dispatch-conf.conf && \\ sed -i \\ -e \"s/diff=\\\"diff -Nu '%s' '%s'\\\"/diff=\\\"diff --color=always -Nu '%s' '%s'\\\"/\" \\ -e \"s/merge=\\\"sdiff --suppress-common-lines --output='%s' '%s' '%s'\\\"/merge=\\\"vimdiff -c'saveas %s' -c next -c'setlocal noma readonly' -c prev %s %s\\\"/\" \\ /etc/._cfg0000_dispatch-conf.conf Install to be able to configure /etc/portage/make.conf : emerge -1 app-portage/cpuid2cpuflags Configure portage (copy&paste one after the other): rsync -a /etc/portage/make.conf /etc/portage/._cfg0000_make.conf # If you use distcc, beware of: # https://wiki.gentoo.org/wiki/Distcc#-march.3Dnative # # You could resolve \"-march=native\" with app-misc/resolve-march-native sed -i 's/COMMON_FLAGS=\"-O2 -pipe\"/COMMON_FLAGS=\"-march=native -O2 -pipe\"/' /etc/portage/._cfg0000_make.conf echo 'EMERGE_DEFAULT_OPTS=\"--buildpkg --buildpkg-exclude ' \\' '*/*-bin sys-kernel/* virtual/*' \\' ' --noconfmem --with-bdeps=y --complete-graph=y\" L10N=\"de\" LINGUAS=\"${L10N}\" GENTOO_MIRRORS=\"https://ftp-stud.hs-esslingen.de/pub/Mirrors/gentoo/ https://ftp.fau.de/gentoo/ https://ftp.tu-ilmenau.de/mirror/gentoo/\" FETCHCOMMAND=\"curl --fail --silent --show-error --location --proto ' \\' '=https' \\' ' --tlsv1.2 --ciphers ' \\' 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' \\' ' --retry 2 --connect-timeout 60 -o \\\"\\${DISTDIR}/\\${FILE}\\\" \\\"\\${URI}\\\"\" RESUMECOMMAND=\"${FETCHCOMMAND} --continue-at -\" USE_HARDENED=\"pie -sslv3 -suid verify-sig\" USE=\"${USE_HARDENED} fish-completion\" ' >> /etc/portage/._cfg0000_make.conf echo \"*/* $( cpuid2cpuflags ) \" > /etc/portage/package.use/00cpu-flags (Optional) Change GENTOO_MIRRORS in /etc/portage/make.conf (copy&paste one after the other): # Install app-misc/yq ACCEPT_KEYWORDS = ~amd64 emerge -1 app-misc/yq # Get a list of country codes and names: curl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | xq -r '.mirrors.mirrorgroup[] | \"\\(.[\"@country\"]) \\(.[\"@countryname\"])\"' | sort -k2.2 # Choose your countries the mirrors should be located in: country = '\"AU\",\"BE\",\"BR\",\"CA\",\"CH\",\"CL\",\"CN\",\"CZ\",\"DE\",\"DK\",\"ES\",\"FR\",\"GR\",\"HK\",\"IL\",\"IT\",\"JP\",\"KR\",\"KZ\",\"LU\",\"NA\",\"NC\",\"NL\",\"PH\",\"PL\",\"PT\",\"RO\",\"RU\",\"SG\",\"SK\",\"TR\",\"TW\",\"UK\",\"US\",\"ZA\"' # Get a list of mirrors available over IPv4/IPv6 dual-stack in the countries of your choice with TLSv1.3 support curl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | xq -r \".mirrors.mirrorgroup[] | select([.\\\"@country\\\"] | inside([ ${ country } ])) | .mirror | if type==\\\"array\\\" then .[] else . end | .uri | if type==\\\"array\\\" then .[] else . end | select(.\\\"@protocol\\\" == \\\"http\\\" and .\\\"@ipv4\\\" == \\\"y\\\" and .\\\"@ipv6\\\" == \\\"y\\\" and (.\\\"#text\\\" | startswith(\\\"https://\\\"))) | .\\\"#text\\\"\" | while read -r i ; do if curl -fs --proto '=https' --tlsv1.3 -I \" ${ i } \" >/dev/null ; then echo \" ${ i } \" fi done I prefer English manpages and ignore above L10N setting for sys-apps/man-pages . Makes using Stackoverflow easier \ud83d\ude09. echo \"sys-apps/man-pages -l10n_de\" >> /etc/portage/package.use/main Install app-portage/eix : emerge -at app-portage/eix Mitigate CVE-2022-29154 among others before using rsync via eix-sync : echo 'net-misc/rsync ~amd64' >> /etc/portage/package.accept_keywords/main && \\ emerge -1 net-misc/rsync Execute eix-sync : eix-sync Read Gentoo news items: eselect news list # eselect news read 1 # eselect news read 2 # etc. Switch over to hardened profile: eselect profile set duxsco:hardened-systemd && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ emerge -1 sys-devel/gcc && \\ emerge -1 sys-devel/binutils sys-libs/glibc && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ emerge -e @world && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Update system: touch /etc/sysctl.conf && \\ echo \"sys-apps/systemd cryptsetup gnuefi\" >> /etc/portage/package.use/main && \\ emerge -atuDN @world","title":"6.1. Portage Setup"},{"location":"system_setup/#62-non-root-user-creation","text":"Create a non-root user and set a password you can use with English keyboard layout for now. You can set a secure password after rebooting and taking care of localisation. useradd -m -G wheel -s /bin/bash david && \\ chmod u = rwx,og = /home/david && \\ echo -e 'alias cp=\"cp -i\"\\nalias mv=\"mv -i\"\\nalias rm=\"rm -i\"' >> /home/david/.bash_aliases && \\ chown david:david /home/david/.bash_aliases && \\ echo 'source \"${HOME}/.bash_aliases\"' >> /home/david/.bashrc && \\ passwd david (Optional) Create your authorized_keys : rsync -av --chown = david:david /etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys /home/david/.ssh/ Setup sudo: echo \"app-admin/sudo -sendmail\" >> /etc/portage/package.use/main && \\ emerge app-admin/sudo && \\ { [[ -d /etc/sudoers.d ]] || mkdir -m u = rwx,g = rx,o = /etc/sudoers.d ; } && \\ echo \"%wheel ALL=(ALL) ALL\" | EDITOR = \"tee\" visudo -f /etc/sudoers.d/wheel && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup vim: USE = \"-verify-sig\" emerge -1 dev-libs/libsodium && \\ emerge -1 dev-libs/libsodium app-editors/vim app-vim/molokai && \\ emerge --select --noreplace app-editors/vim app-vim/molokai && \\ cp -av /etc/portage/make.conf /etc/portage/._cfg0000_make.conf && \\ sed -i 's/^USE=\"\\([^\"]*\\)\"$/USE=\"\\1 vim-syntax\"/' /etc/portage/._cfg0000_make.conf && \\ echo \"filetype plugin on filetype indent on set number set paste syntax on colorscheme molokai\" | tee -a /root/.vimrc >> /home/david/.vimrc && \\ chown david:david /home/david/.vimrc && \\ eselect editor set vi && \\ eselect vi set vim && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"6.2. Non-Root User Creation"},{"location":"system_setup/#63-configuration-of-etcfstab","text":"Setup /etc/fstab: SWAP_UUID = \" $( blkid -s UUID -o value /mapperSwap ) \" && \\ SYSTEM_UUID = \" $( blkid -s UUID -o value /mapperSystem ) \" && \\ echo \"\" >> /etc/fstab && \\ echo \" $( find /devEfi* -maxdepth 0 | while read -r i ; do echo \"UUID= $( blkid -s UUID -o value \" $i \" ) ${ i /devE/boot \\/ e } vfat noatime,dmask=0022,fmask=0133 0 0\" done) UUID= ${ SWAP_UUID } none swap sw 0 0 UUID= ${ SYSTEM_UUID } / btrfs noatime,subvol=@root 0 0 UUID= ${ SYSTEM_UUID } /home btrfs noatime,subvol=@home 0 0 UUID= ${ SYSTEM_UUID } /var/cache/binpkgs btrfs noatime,subvol=@binpkgs 0 0 UUID= ${ SYSTEM_UUID } /var/cache/distfiles btrfs noatime,subvol=@distfiles 0 0 UUID= ${ SYSTEM_UUID } /var/db/repos/gentoo btrfs noatime,subvol=@ebuilds 0 0 UUID= ${ SYSTEM_UUID } /var/tmp btrfs noatime,subvol=@var_tmp 0 0 \" | column -o \" \" -t >> /etc/fstab && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"6.3. Configuration Of /etc/fstab"},{"location":"system_setup/#64-secure-boot","text":"Credits: https://www.funtoo.org/Secure_Boot https://www.rodsbooks.com/efi-bootloaders/secureboot.html https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot In order to add your custom keys Setup Mode must have been enabled in your UEFI Firmware Settings before booting into SystemRescueCD. But, you can install Secure Boot files later on if you missed enabling Setup Mode . In the following, however, you have to generate Secure Boot files either way. Install required tools on your system: echo \"sys-boot/mokutil ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -at app-crypt/efitools app-crypt/sbsigntools sys-boot/mokutil Create Secure Boot keys and certificates: mkdir --mode = 0700 /etc/gentoo-installation/secureboot && \\ pushd /etc/gentoo-installation/secureboot && \\ # Create the keys openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=PK/\" -keyout PK.key -out PK.crt -days 7300 -nodes -sha256 && \\ openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=KEK/\" -keyout KEK.key -out KEK.crt -days 7300 -nodes -sha256 && \\ openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=db/\" -keyout db.key -out db.crt -days 7300 -nodes -sha256 && \\ # Prepare installation in EFI uuid = \" $( uuidgen --random ) \" && \\ cert-to-efi-sig-list -g \" ${ uuid } \" PK.crt PK.esl && \\ cert-to-efi-sig-list -g \" ${ uuid } \" KEK.crt KEK.esl && \\ cert-to-efi-sig-list -g \" ${ uuid } \" db.crt db.esl && \\ sign-efi-sig-list -k PK.key -c PK.crt PK PK.esl PK.auth && \\ sign-efi-sig-list -k PK.key -c PK.crt KEK KEK.esl KEK.auth && \\ sign-efi-sig-list -k KEK.key -c KEK.crt db db.esl db.auth && \\ popd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" If the following commands don't work you have to install db.auth , KEK.auth and PK.auth over the UEFI Firmware Settings upon reboot after the completion of this installation guide. Further information can be found at the end of this installation guide. Beware that the following commands delete all existing keys. pushd /etc/gentoo-installation/secureboot && \\ # Make them mutable { chattr -i /sys/firmware/efi/efivars/ { PK,KEK,db,dbx } * || true ; } && \\ # Install keys into EFI (PK last as it will enable Custom Mode locking out further unsigned changes) efi-updatevar -f db.auth db && \\ efi-updatevar -f KEK.auth KEK && \\ efi-updatevar -f PK.auth PK && \\ # Make them immutable { chattr +i /sys/firmware/efi/efivars/ { PK,KEK,db,dbx } * || true ; } && \\ popd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\"","title":"6.4. Secure Boot"},{"location":"system_setup/#65-kernel-installation","text":"Install sys-boot/efibootmgr : emerge -at sys-boot/efibootmgr Setup ESP(s): while read -r my_esp ; do bootctl --esp-path = \"/boot/ ${ my_esp } \" install && \\ efibootmgr --create --disk \"/dev/ $( lsblk -ndo pkname \" $( readlink -f \"/ ${ my_esp /efi/devEfi } \" ) \" ) \" --part 1 --label \"gentoo31415efi ${ my_esp } \" --loader '\\EFI\\systemd\\systemd-bootx64.efi' && \\ echo -e \"timeout 10\\neditor no\" > \"/boot/ ${ my_esp } /loader/loader.conf\" && \\ mv \"/boot/ ${ my_esp } /systemrescuecd.efi\" \"/boot/ ${ my_esp } /EFI/Linux/\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/ ${ my_esp } /EFI/systemd/systemd-bootx64.efi\" \"/boot/ ${ my_esp } /EFI/systemd/systemd-bootx64.efi\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/ ${ my_esp } /EFI/BOOT/BOOTX64.EFI\" \"/boot/ ${ my_esp } /EFI/BOOT/BOOTX64.EFI\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/ ${ my_esp } /EFI/Linux/systemrescuecd.efi\" \"/boot/ ${ my_esp } /EFI/Linux/systemrescuecd.efi\" && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" done < < ( grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/boot/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab ) Microcode updates are not necessary for virtual machines. Otherwise, install sys-firmware/intel-microcode if you have an Intel CPU. Or, follow the Gentoo wiki instruction to update the microcode on AMD systems. ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ grep -q \"^vendor_id[[:space:]]*:[[:space:]]*GenuineIntel $ \" /proc/cpuinfo && \\ echo \"sys-firmware/intel-microcode intel-ucode\" >> /etc/portage/package.license && \\ echo \"sys-firmware/intel-microcode hostonly\" >> /etc/portage/package.use/main && \\ emerge -at sys-firmware/intel-microcode && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup portage hook: mkdir -p /etc/portage/env/sys-apps /etc/portage/env/sys-firmware /etc/portage/env/sys-kernel && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-firmware/intel-microcode && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/gentoo-kernel-bin && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/linux-firmware && \\ rm -f /root/portage_hook_kernel && \\ echo 'if [[ ${EBUILD_PHASE} == postinst ]]; then while read -r my_esp; do bootctl --esp-path=\"/boot/${my_esp}\" --no-variables --graceful update && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/${my_esp}/EFI/systemd/systemd-bootx64.efi\" \"/boot/${my_esp}/EFI/systemd/systemd-bootx64.efi\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/boot/${my_esp}/EFI/BOOT/BOOTX64.EFI\" \"/boot/${my_esp}/EFI/BOOT/BOOTX64.EFI\" if [[ $? -ne 0 ]]; then cat <<' \\' 'EOF' \\' ' ___________________________ < Failed to Secure Boot sign! > --------------------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || EOF fi done < <(grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/boot/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab) fi' > /etc/portage/env/sys-apps/systemd && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Setup sys-kernel/dracut (copy&paste one after the other): emerge -at sys-kernel/dracut system_uuid = \" $( blkid -s UUID -o value /mapperSystem ) \" my_crypt_root = \" $( blkid -s UUID -o value /devSystem* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s - ) \" my_crypt_swap = \" $( blkid -s UUID -o value /devSwap* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s - ) \" unset my_systemd_cryptenroll # If you intend to use systemd-cryptenroll, define this variable: # my_systemd_cryptenroll=\",tpm2-device=auto\" echo \"\\ hostonly=no hostonly_cmdline=yes use_fstab=yes compress=xz show_modules=yes uefi=yes early_microcode=yes uefi_stub=/usr/lib/systemd/boot/efi/linuxx64.efi.stub uefi_secureboot_cert=/etc/gentoo-installation/secureboot/db.crt uefi_secureboot_key=/etc/gentoo-installation/secureboot/db.key CMDLINE=( ro root=UUID= ${ system_uuid } ${ my_crypt_root } ${ my_crypt_swap } rd.luks.options=password-echo=no ${ my_systemd_cryptenroll } rootfstype=btrfs rootflags=subvol=@root mitigations=auto,nosmt ) kernel_cmdline=\" \\$ { CMDLINE [ * ]} \" unset CMDLINE\" >> /etc/dracut.conf Install tools required for booting: export install_lts_kernel = \"true\" && \\ echo \"sys-fs/btrfs-progs ~amd64 sys-kernel/gentoo-kernel-bin ~amd64 sys-kernel/linux-headers ~amd64 virtual/dist-kernel ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ { [ $install_lts_kernel = true ] && \\ echo \"\\ >=sys-fs/btrfs-progs-5.16 >=sys-kernel/gentoo-kernel-bin-5.16 >=sys-kernel/linux-headers-5.16 >=virtual/dist-kernel-5.16\" >> /etc/portage/package.mask/main || \\ true } && \\ echo \"sys-fs/btrfs-progs -convert\" >> /etc/portage/package.use/main && \\ echo \"sys-kernel/gentoo-kernel-bin -initramfs\" >> /etc/portage/package.use/main && \\ echo \"sys-kernel/linux-firmware linux-fw-redistributable no-source-code\" >> /etc/portage/package.license && \\ { [ -e /devSwapb ] && \\ emerge -at sys-fs/btrfs-progs sys-fs/mdadm sys-kernel/linux-firmware || \\ emerge -at sys-fs/btrfs-progs sys-kernel/linux-firmware } Install the kernel : emerge -at sys-kernel/gentoo-kernel-bin","title":"6.5. Kernel Installation"},{"location":"system_setup/#66-initial-systemd-configuration","text":"Do some initial configuration : systemd-firstboot --prompt --setup-machine-id If you dont't intend to use SELinux, reset all installed unit files. systemctl preset-all","title":"6.6. Initial systemd configuration"},{"location":"system_setup/#67-additional-packages","text":"Set /etc/hosts : rsync -a /etc/hosts /etc/._cfg0000_hosts && \\ sed -i 's/localhost$/localhost micro/' /etc/._cfg0000_hosts (Optional) Enable ssh service: systemctl --no-reload enable sshd.service starship: # If you have insufficient ressources, you may want to \"emerge -1 dev-lang/rust-bin\" beforehand. echo \"app-shells/starship ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge app-shells/starship && \\ mkdir --mode = 0700 /home/david/.config /root/.config && \\ touch /home/david/.config/starship.toml && \\ chown -R david:david /home/david/.config && \\ echo '[hostname] ssh_only = false format = \"[$hostname](bold red) \" ' | tee /root/.config/starship.toml > /home/david/.config/starship.toml && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" fish shell: echo \"=dev-libs/libpcre2- $( qatom -F \"%{PVR}\" \" $( portageq best_visible / dev-libs/libpcre2 ) \" ) pcre32\" >> /etc/portage/package.use/main && \\ echo \"app-shells/fish ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge app-shells/fish && \\ echo ' # Use fish in place of bash # keep this line at the bottom of ~/.bashrc if [[ -z ${chrooted} ]]; then if [[ -x /bin/fish ]]; then SHELL=/bin/fish exec /bin/fish fi elif [[ -z ${chrooted_su} ]]; then export chrooted_su=true source /etc/profile && su --login --whitelist-environment=chrooted,chrooted_su else env-update && source /etc/profile && export PS1=\"(chroot) $PS1\" fi' >> /root/.bashrc && \\ echo ' # Use fish in place of bash # keep this line at the bottom of ~/.bashrc if [[ -x /bin/fish ]]; then SHELL=/bin/fish exec /bin/fish fi' >> /home/david/.bashrc && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" root setup: /bin/fish -c fish_update_completions non-root setup: su -l david -c \"/bin/fish -c fish_update_completions\" Enable aliases and starship (copy&paste one after the other): su - exit su - david exit sed -i 's/^end$/ source \"$HOME\\/.bash_aliases\"\\n starship init fish | source\\nend/' /root/.config/fish/config.fish sed -i 's/^end$/ source \"$HOME\\/.bash_aliases\"\\n starship init fish | source\\nend/' /home/david/.config/fish/config.fish nerd fonts: emerge media-libs/fontconfig && \\ su -l david -c \"curl --proto '=https' --tlsv1.3 -fsSL -o /tmp/FiraCode.zip https://github.com/ryanoasis/nerd-fonts/releases/download/v2.2.2/FiraCode.zip\" && \\ b2sum -c <<< \"9f8ada87945ff10d9eced99369f7c6d469f9eaf2192490623a93b2397fe5b6ee3f0df6923b59eb87e92789840a205adf53c6278e526dbeeb25d0a6d307a07b18 /tmp/FiraCode.zip\" && \\ mkdir /tmp/FiraCode && \\ unzip -d /tmp/FiraCode /tmp/FiraCode.zip && \\ rm -f /tmp/FiraCode/*Windows* /tmp/FiraCode/Fura* && \\ mkdir /usr/share/fonts/nerd-firacode && \\ rsync -a --chown = 0 :0 --chmod = a = r /tmp/FiraCode/*.ttf /usr/share/fonts/nerd-firacode/ && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Download the Nerd Font Symbols Preset , verify the content and install. If you have sys-fs/mdadm installed: [[ -e /devSwapb ]] && \\ rsync -a /etc/mdadm.conf /etc/._cfg0000_mdadm.conf && \\ echo \"\" >> /etc/._cfg0000_mdadm.conf && \\ mdadm --detail --scan >> /etc/._cfg0000_mdadm.conf && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" ssh: rsync -a /etc/ssh/sshd_config /etc/ssh/._cfg0000_sshd_config && \\ sed -i \\ -e 's/^#Port 22$/Port 50022/' \\ -e 's/^#PermitRootLogin prohibit-password$/PermitRootLogin no/' \\ -e 's/^#KbdInteractiveAuthentication yes$/KbdInteractiveAuthentication no/' \\ -e 's/^#X11Forwarding no$/X11Forwarding no/' /etc/ssh/._cfg0000_sshd_config && \\ grep -q \"^PasswordAuthentication no $ \" /etc/ssh/._cfg0000_sshd_config && \\ echo \" AuthenticationMethods publickey KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com AllowUsers david\" >> /etc/ssh/._cfg0000_sshd_config && \\ ssh-keygen -A && \\ sshd -t && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Write down fingerprints to double check upon initial SSH connection to the Gentoo Linux machine: find /etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; Setup client SSH config: echo \"AddKeysToAgent no KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com HashKnownHosts no StrictHostKeyChecking ask VisualHostKey yes\" > /home/david/.ssh/config && \\ chown david:david /home/david/.ssh/config && \\ echo -e \"\\e[1;32mSUCCESS\\e[0m\" Disable sysrq for security sake : echo \"kernel.sysrq = 0\" > /etc/sysctl.d/99sysrq.conf misc tools: emerge -at app-misc/screen app-portage/gentoolkit","title":"6.7. Additional Packages"}]}