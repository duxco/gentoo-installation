{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"1. Introduction","text":"<p>Disclaimer</p> <p>This installation guide, called \"guide\" in the following, builds upon the official Gentoo Linux installation handbook.</p> <p>It's written with great care. Nevertheless, you are expected not to blindly copy&amp;paste commands! Please, understand what you are going to do and adjust commands if required!</p> <p>Even with the whole codeblock being a no-brainer, some codeblocks need to be copied and pasted line-by-line. In this case, a copy button  won't be offered and you'll see a note saying \"copy&amp;paste one after the other\". A copy button also won't be shown for codeblocks containing sample output. They start with \"\u276f \".</p> <p>GnuPG Public Key</p> <p>You can find information on my GnuPG public key in my GitHub profile README!</p> <p>Developer Contacts</p> <p>You can contact me under \"duxsco\" at Libera Chat or OFTC. I am also on .</p>"},{"location":"#11-system-requirements","title":"1.1. System Requirements","text":"<p>Beside official hardware requirements, the guide has additional ones:</p> <ul> <li> <p>Secure Boot and TPM 2.0: It builds heavily on \"secure boot\" and requires \"TPM 2.0\" not only for \"secure boot\" but also for \"measured boot\" to function. Make sure that the system is in \"setup mode\" in order to be able to add your custom \"secure boot\" keys. You can, however, boot without \"setup mode\" and import the keys later on depending on the hardware in use. For this, you can follow the instructions in section 12.2. Secure Boot Setup at that point in time.</p> </li> <li> <p>systemd and Measured Boot: The guide requires the use of systemd for \"measured boot\" to work without restrictions. Clevis may be an option if you want to stay with OpenRC. But, I haven't tested this. Alternatively, you can take a look at my older documentation which, however, doesn't support \"measured boot\" and isn't maintained by me anymore.</p> </li> <li>x86_64 Architecture: To keep things simple, the guide presumes that you intend to install on a x86_64 system. This is the only architecture that has been tested by me! And, it's the only architecture still actively supported by SystemRescue. SystemRescue is used for the rescue system with its custom chroot.sh script.</li> </ul>"},{"location":"#12-technologies","title":"1.2. Technologies","text":"<p>The guide results in a system that is/uses:</p> <ul> <li> Secure Boot: All EFI binaries and unified kernel images are signed.</li> <li> Measured Boot: systemd-cryptenroll or clevis is used to check the system for manipulations via TPM 2.0 PCRs.</li> <li> Fully encrypted: Except for ESP(s), all partitions are LUKS encrypted.</li> <li> RAID: Except for ESP(s), btrfs and mdadm based RAID are used for all partitions if the number of disks is \u22652.</li> <li> Rescue system: A customised SystemRescue supports optional SSH logins and provides a convenient chroot.sh script.</li> <li> Hardened Gentoo Linux (optional) for a highly secure, high stability production environment (link).</li> <li> SELinux (optional) provides Mandatory Access Control using type enforcement and role-based access control (link).</li> </ul>"},{"location":"#13-ssh-connectivity","title":"1.3. SSH Connectivity","text":"<p>After completion of this guide, optional SSH connections will be possible to the following systems using SSH public key authentication:</p> Gentoo Linux installationRescue System <pre><code>ssh -p 50022 david@&lt;IP address&gt;\n</code></pre> <pre><code>ssh -p 50023 root@&lt;IP address&gt;\n</code></pre>"},{"location":"#14-disk-layout","title":"1.4. Disk Layout","text":"<p>Independent ESPs are created one for each disk to provide for redundancy, because there is the risk of data corruption with the redundancy provided by mdadm RAID (further info: 5.1 ESP on software RAID1). Except for ESPs, btrfs or mdadm based RAID 1 is used for all other partitions on a dual- or multi-disk setup with RAID 5, RAID 6 and RAID 10 being further options for the swap device. The 2nd partition doesn't make use of btrfs RAID due to limitations of SystemRescue.</p> four disksthree diskstwo diskssingle disk <p></p> <p></p> <p></p> <p></p>"},{"location":"#15-luks-key-slots","title":"1.5. LUKS Key Slots","text":"<p>On the \"rescue\" partition, LUKS key slots are set as follows:</p> <ul> <li>0: Rescue password</li> </ul> <p>On all other LUKS volumes, LUKS key slots are set as follows:</p> <ul> <li>0: Fallback password for emergency</li> <li>1: Measured Boot<ul> <li>Option A: TPM 2.0 with optional pin to unlock with systemd-cryptenroll</li> <li>Option B: Shamir Secret Sharing combining TPM 2.0 and Tang pin (Tang project) to automatically unlock with Clevis</li> </ul> </li> </ul>"},{"location":"bootup_setup/","title":"8. Bootup Setup","text":""},{"location":"bootup_setup/#81-basic-configuration","title":"8.1. Basic Configuration","text":"<p>Setup /etc/fstab:</p> <pre><code>SWAP_UUID=\"$(blkid -s UUID -o value /mapperSwap)\" &amp;&amp; \\\nSYSTEM_UUID=\"$(blkid -s UUID -o value /mapperSystem)\" &amp;&amp; \\\necho \"\" &gt;&gt; /etc/fstab &amp;&amp; \\\necho \"\n$(while read -r i; do\necho \"UUID=$(blkid -s UUID -o value \"$i\") ${i/devE/boot\\/e} vfat noatime,dmask=0022,fmask=0133 0 0\"\ndone &lt; &lt;(find /devEfi* -maxdepth 0))\nUUID=${SWAP_UUID}   none                 swap  sw                        0 0\nUUID=${SYSTEM_UUID} /                    btrfs noatime,subvol=@root      0 0\nUUID=${SYSTEM_UUID} /home                btrfs noatime,subvol=@home      0 0\nUUID=${SYSTEM_UUID} /var/cache/binpkgs   btrfs noatime,subvol=@binpkgs   0 0\nUUID=${SYSTEM_UUID} /var/cache/distfiles btrfs noatime,subvol=@distfiles 0 0\nUUID=${SYSTEM_UUID} /var/db/repos/gentoo btrfs noatime,subvol=@ebuilds   0 0\nUUID=${SYSTEM_UUID} /var/tmp             btrfs noatime,subvol=@var_tmp   0 0\n\" | column -o \" \" -t &gt;&gt; /etc/fstab &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Setup /etc/hosts (copy&amp;paste one after the other):</p> <pre><code># Set the hostname of your choice\nmy_hostname=\"micro\"\n\nrsync -a /etc/hosts /etc/._cfg0000_hosts &amp;&amp; \\\nsed -i \"s/localhost$/localhost ${my_hostname}/\" /etc/._cfg0000_hosts &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Disable \"magic SysRq\" for security sake:</p> <pre><code>echo \"kernel.sysrq = 0\" &gt; /etc/sysctl.d/99sysrq.conf\n</code></pre> <p>(Optional) Install miscellaneous tools:</p> <pre><code>emerge -at app-misc/screen app-portage/gentoolkit\n</code></pre>"},{"location":"bootup_setup/#82-systemd-preparation","title":"8.2. systemd Preparation","text":"<p>Apply systemd useflags:</p> <pre><code>touch /etc/sysctl.conf &amp;&amp; \\\n\n# add LUKS volume and systemd-boot support\necho \"sys-apps/systemd cryptsetup gnuefi\" &gt;&gt; /etc/portage/package.use/main &amp;&amp; \\\n\nemerge -atuDN @world\n</code></pre> <p>Do some initial configuration:</p> <pre><code>systemd-firstboot --prompt --setup-machine-id\n</code></pre> <p>If you don't plan to keep your setup slim for the later SELinux setup, the use of preset files may be s.th. to consider:</p> <p>Most services are disabled when systemd is first installed. A \"preset\" file is provided, and may be used to enable a reasonable set of default services. (source)</p> <pre><code>systemctl preset-all\n# or\nsystemctl preset-all --preset-mode=enable-only\n</code></pre>"},{"location":"bootup_setup/#83-secure-boot","title":"8.3. Secure Boot","text":"<p>Warnings on OptionROM</p> <p>While using sbctl, take warnings such as the following serious and make sure to understand the implications:</p> <p>Could not find any TPM Eventlog in the system. This means we do not know if there is any OptionROM present on the system.</p> <p>etc.</p> <p>Please read the FAQ for more information: https://github.com/Foxboron/sbctl/wiki/FAQ#option-rom</p> <p>In order to add your custom keys, \"setup mode\" must have been enabled in your \"UEFI Firmware Settings\" before booting into SystemRescue. But, you can install secure boot files later on if you missed enabling \"setup mode\". In the following, however, you have to generate secure boot files either way.</p> <p>Install \"app-crypt/sbctl\":</p> <pre><code>emerge -at app-crypt/sbctl\n</code></pre> <p>Create and enroll secure boot files (link) (copy&amp;paste one after the other):</p> <pre><code>\u276f sbctl status\nInstalled:      \u2717 sbctl is not installed\nSetup Mode:     \u2717 Enabled\nSecure Boot:    \u2717 Disabled\n\n\u276f sbctl create-keys\nCreated Owner UUID 4cdeb60c-d2ce-4ed9-af89-2b659c21f6e4\nCreating secure boot keys...\u2713\nSecure boot keys created!\n\n\u276f sbctl enroll-keys\nEnrolling keys to EFI variables...\u2713\nEnrolled keys to the EFI variables!\n\n\u276f sbctl status\nInstalled:      \u2713 sbctl is installed\nOwner GUID:     4cdeb60c-d2ce-4ed9-af89-2b659c21f6e4\nSetup Mode:     \u2713 Disabled\nSecure Boot:    \u2717 Disabled\n</code></pre>"},{"location":"chrooting/","title":"5. Chrooting","text":"<p>Setup the /etc/resolv.conf file:</p> <pre><code>cp --dereference /etc/resolv.conf /mnt/gentoo/etc/ &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Setup ~/.bashrc:</p> <pre><code>rsync -av --numeric-ids --chown=0:0 --chmod=u=rw,go=r /mnt/gentoo/etc/skel/.bash* /mnt/gentoo/root/ &amp;&amp; \\\nrsync -av --numeric-ids --chown=0:0 --chmod=u=rwX,go= /mnt/gentoo/etc/skel/.ssh /mnt/gentoo/root/ &amp;&amp; \\\necho -e 'alias cp=\"cp -i\"\\nalias mv=\"mv -i\"\\nalias rm=\"rm -i\"' &gt;&gt; /mnt/gentoo/root/.bash_aliases &amp;&amp; \\\necho 'source \"${HOME}/.bash_aliases\"\n\n# Raise an alert if something is wrong with btrfs or mdadm\nif  { [[ -f /proc/mdstat ]] &amp;&amp; grep -q \"\\[[U_]*_[U_]*\\]\" /proc/mdstat; } || \\\n    [[ $(find /sys/fs/btrfs -type f -name \"error_stats\" -exec awk '\\''{sum += $2} END {print sum}'\\'' {} +) -ne 0 ]]; then\necho '\\''\n  _________________\n&lt; Something smells! &gt;\n  -----------------\n         \\   ^__^\n          \\  (oo)\\_______\n             (__)\\       )\\/\\\n                 ||----w |\n                 ||     ||\n'\\''\nfi' &gt;&gt; /mnt/gentoo/root/.bashrc &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Take care of localisation:</p> <pre><code>echo \"C.UTF-8 UTF-8\nde_DE.UTF-8 UTF-8\nen_US.UTF-8 UTF-8\" &gt;&gt; /mnt/gentoo/etc/locale.gen &amp;&amp; \\\necho 'LANG=\"de_DE.UTF-8\"\nLC_COLLATE=\"C.UTF-8\"\nLC_MESSAGES=\"en_US.UTF-8\"' &gt; /mnt/gentoo/etc/env.d/02locale &amp;&amp; \\\nchroot /mnt/gentoo /bin/bash -c \"source /etc/profile &amp;&amp; locale-gen\" &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Setup MAKEOPTS:</p> <pre><code>ram_size=\"$(dmidecode -t memory | grep -Pio \"^[[:space:]]Size:[[:space:]]+\\K[0-9]*(?=[[:space:]]*GB$)\" | paste -d '+' -s - | bc)\" &amp;&amp; \\\nnumber_cores=\"$(grep -cE \"^processor[[:space:]]+:[[:space:]]+[0-9]+$\" /proc/cpuinfo)\" &amp;&amp; \\\n[[ $((number_cores*2)) -le ${ram_size} ]] &amp;&amp; jobs=\"${number_cores}\" || jobs=\"$(bc &lt;&lt;&lt;\"${ram_size} / 2\")\" &amp;&amp; \\\necho -e \"\\nMAKEOPTS=\\\"-j${jobs}\\\"\" &gt;&gt; /mnt/gentoo/etc/portage/make.conf &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Chroot (copy&amp;paste one after the other):</p> <pre><code>chroot /mnt/gentoo /bin/bash\nsource /etc/profile\nsu -\nenv-update &amp;&amp; source /etc/profile &amp;&amp; export PS1=\"(chroot) $PS1\"\n</code></pre>"},{"location":"cleanup_and_reboot/","title":"11. Cleanup And Reboot","text":"<p>Before rebooting, fetch \"net-firewall/nftables\" to be able to setup the firewall before connecting to the network with Gentoo Linux for the first time:</p> <pre><code>emerge --fetchonly net-firewall/nftables\n</code></pre> <p>Configure the network connection (copy&amp;paste one after the other):</p> <pre><code>echo \"\\\n[Match]\nName=enp1s0\n\n[Network]\nAddress=192.168.10.2/24\nGateway=192.168.10.1\n# https://wiki.archlinux.org/title/IPv6#systemd-networkd_3\nLinkLocalAddressing=no\nIPv6AcceptRA=no\\\n\" &gt;&gt; /etc/systemd/network/50-static.network\n\nsystemctl --no-reload enable systemd-networkd.service\n</code></pre> <p>Setup systemd-resolved for DNS (copy&amp;paste one after the other):</p> <pre><code># https://wiki.gentoo.org/wiki/Resolv.conf\n# https://wiki.archlinux.org/title/systemd-resolved\nln -rsf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf\n\nrsync -av /etc/systemd/resolved.conf /etc/systemd/._cfg0000_resolved.conf\n\n# https://www.kuketz-blog.de/empfehlungsecke/#dns\nsed -i \\\n-e 's/#DNS=.*/DNS=2001:678:e68:f000::#dot.ffmuc.net 2001:678:ed0:f000::#dot.ffmuc.net 5.1.66.255#dot.ffmuc.net 185.150.99.255#dot.ffmuc.net/' \\\n-e 's/#FallbackDNS=.*/FallbackDNS=2a01:4f8:251:554::2#dns3.digitalcourage.de 5.9.164.112#dns3.digitalcourage.de/' \\\n-e 's/#Domains=.*/Domains=~./' \\\n-e 's/#DNSSEC=.*/DNSSEC=true/' \\\n-e 's/#DNSOverTLS=.*/DNSOverTLS=true/' \\\n/etc/systemd/._cfg0000_resolved.conf\n\nsystemctl --no-reload enable systemd-resolved.service\n</code></pre> <p>After the reboot, you can test DNS resolving (link) and check <code>resolvectl status</code> output.</p> <p>Exit, cleanup obsolete installation files as well as symlinks to devices created by \"disk.sh\" and reboot (copy&amp;paste one after the other):</p> <pre><code>[[ -f /gentoo-latest.tar.xz ]] &amp;&amp; exit\n[[ -f /gentoo-latest.tar.xz ]] &amp;&amp; exit\n[[ -f /gentoo-latest.tar.xz ]] &amp;&amp; exit\ncd\nrm -fv /mnt/gentoo/{stage3-*,gentoo-latest.tar.xz*,devEfi*,devRescue,devSystem*,devSwap*,mapperRescue,mapperSwap,mapperSystem}\numount -l /mnt/gentoo/dev{/shm,/pts,}\numount -R /mnt/gentoo\nreboot\n</code></pre>"},{"location":"desktop_profiles/","title":"15. Desktop Profiles (optional)","text":"<p>At this point, you can consider the switch to a hardened desktop profile coming from:</p> duxsco:hardened-systemd-merged-usrduxsco:hardened-systemd-merged-usr-selinux <pre><code>eselect profile set duxsco:hardened-systemd-merged-usr-desktop &amp;&amp; \\\nemerge -atuDN @world\n</code></pre> <pre><code>eselect profile set duxsco:hardened-systemd-merged-usr-desktop-selinux &amp;&amp; \\\nemerge -atuDN @world\n</code></pre> <p>For everything else you can either create your own profile or use one of those printed out by <code>eselect profile list</code>.</p>"},{"location":"disk_setup/","title":"3. Disk Setup","text":""},{"location":"disk_setup/#31-wiping-disks","title":"3.1. Wiping Disks","text":"<p>disk.sh expects the disks, where you want to install Gentoo Linux on, to be completely empty. If that's not the case continue reading. Otherwise, continue with 3.2. Partitioning And Formating.</p> <p>If you use SSD(s) I recommend a Secure Erase. Alternatively, you can do a fast wipe the following way given that no LUKS, MDADM, SWAP etc. device is open on the disk (copy&amp;paste one after the other):</p> <pre><code># Change disk name to the one you want to wipe\ndisk=\"/dev/sda\"\n\nwhile read -r i; do\nread -r -p \"Do you want to wipe \\\"$i\\\"? Type uppercase \\\"yes\\\" to confirm. \" wipe\n\n    if [[ ${wipe} == YES ]]; then\nwipefs -a \"$i\"\nfi\ndone &lt; &lt;(lsblk -npo kname \"${disk}\" | grep \"^${disk}\" | sort -r)\n</code></pre> <p>Tip</p> <p>If you have confidential data stored in a non-encrypted way on HDD(s) and don't want to risk the data landing in foreign hands I recommend the use of something like <code>dd</code>, e.g. https://wiki.archlinux.org/title/Securely_wipe_disk!</p>"},{"location":"disk_setup/#32-partitioning-and-formating","title":"3.2. Partitioning And Formating","text":"<p>Prepare the disks (copy&amp;paste one after the other):</p> <pre><code># list devices\nfdisk -l\n\n# lookup all options\nbash /tmp/disk.sh -h\n\n# disable bash history\nset +o history\n\n# adjust to your liking\nbash /tmp/disk.sh -f fallbackfallback -r rescuerescue -d \"/dev/sda /dev/sdb etc.\" -s 12\n\n# enable bash history\nset -o history\n</code></pre> <p>Info</p> <p>disk.sh creates the user \"meh\" which will be used later on to act as non-root.</p>"},{"location":"disk_setup/#33-mntgentoo-content","title":"3.3. /mnt/gentoo Content","text":"<p>After executing \"disk.sh\", the btrfs subvolume \"@root\" mounted by \"disk.sh\" at \"/mnt/gentoo/\" should contain:</p> four disksthree diskstwo diskssingle disk <p></p> <p></p> <p></p> <p></p>"},{"location":"disk_setup/#34-tarball-extraction","title":"3.4. Tarball Extraction","text":"<p>Info</p> <p>A recent stage3-amd64-systemd-mergedusr-*.tar.xz file was downloaded and verified by fetch_files.sh which itself was called by disk.sh. If you work on another architecture, download and verify the correct stage3 tarball (recommended: <code>stage3-&lt;architecture&gt;-systemd-mergedusr-&lt;timestamp&gt;.tar.xz</code> and <code>stage3-&lt;architecture&gt;-systemd-mergedusr-&lt;timestamp&gt;.tar.xz.asc</code>) manually and adjust below commands accordingly. Later on, an optional switch to the custom profile hardened-systemd-merged-usr and hardened-systemd-merged-usr-selinux both of which making use of merged-usr will be done, requiring modifications of those custom profiles if you use a stage3 tarball other than the ones previously recommended.</p> <p>Extract the stage3 tarball and copy custom files:</p> <pre><code>tar -C /mnt/gentoo/ -xpvf /mnt/gentoo/stage3-*.tar.xz --xattrs-include='*.*' --numeric-owner &amp;&amp; \\\nrsync -a --numeric-ids --chown=0:0 --chmod=u=rwx,go=r /tmp/firewall.nft /mnt/gentoo/usr/local/sbin/ &amp;&amp; \\\nrsync -a /tmp/portage_hook_kernel /mnt/gentoo/root/ &amp;&amp; \\\nmkdir -p /mnt/gentoo/etc/gentoo-installation &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Extract the portage tarball (based on archived old handbook):</p> <pre><code>mkdir /mnt/gentoo/var/db/repos/gentoo &amp;&amp; \\\ntouch /mnt/gentoo/var/db/repos/gentoo/.keep &amp;&amp; \\\nmount -o noatime,subvol=@ebuilds /mnt/gentoo/mapperSystem /mnt/gentoo/var/db/repos/gentoo &amp;&amp; \\\ntar --transform 's#^gentoo-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]/#gentoo/#' --transform 's#^gentoo-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$#gentoo#' -C /mnt/gentoo/var/db/repos/ -xvpJf /mnt/gentoo/gentoo-latest.tar.xz &amp;&amp; \\\nrsync -av --numeric-ids --chown=250:250 /tmp/overlay/duxsco /mnt/gentoo/var/db/repos/ &amp;&amp; \\\nmkdir /mnt/gentoo/etc/portage/repos.conf &amp;&amp; \\\necho '[duxsco]\nlocation = /var/db/repos/duxsco\nauto-sync = false' &gt; /mnt/gentoo/etc/portage/repos.conf/duxsco.conf &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre>"},{"location":"disk_setup/#35-mounting","title":"3.5. Mounting","text":"<p>Mount filesystems for the later chroot to work:</p> <pre><code># https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#Mounting_the_root_partition\nmount -t tmpfs -o noatime,nodev,nosuid,mode=1777,uid=root,gid=root tmpfs /mnt/gentoo/tmp &amp;&amp; \\\n\n# https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#Mounting_the_necessary_filesystems\nmount --types proc /proc /mnt/gentoo/proc &amp;&amp; \\\nmount --rbind /sys /mnt/gentoo/sys &amp;&amp; \\\nmount --make-rslave /mnt/gentoo/sys &amp;&amp; \\\nmount --rbind /dev /mnt/gentoo/dev &amp;&amp; \\\nmount --make-rslave /mnt/gentoo/dev &amp;&amp; \\\nmount --bind /run /mnt/gentoo/run &amp;&amp; \\\nmount --make-slave /mnt/gentoo/run &amp;&amp; \\\n\n# I put /home, /var/cache/binpkgs, /var/cache/distfiles and /var/tmp\n# on separate btrfs subvolumes to keep backups separate.\n\nmount -o noatime,subvol=@home /mnt/gentoo/mapperSystem /mnt/gentoo/home &amp;&amp; \\\n\n# https://wiki.gentoo.org/wiki//var/cache/binpkgs\n# https://wiki.gentoo.org/wiki/Binary_package_guide\ntouch /mnt/gentoo/var/cache/binpkgs/.keep &amp;&amp; \\\nmount -o noatime,subvol=@binpkgs /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/binpkgs &amp;&amp; \\\n\n# https://wiki.gentoo.org/wiki//var/cache/distfiles\n# https://wiki.gentoo.org/wiki/DISTDIR\ntouch /mnt/gentoo/var/cache/distfiles/.keep &amp;&amp; \\\nmount -o noatime,subvol=@distfiles /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/distfiles &amp;&amp; \\\n\n# https://wiki.gentoo.org/wiki/Portage_TMPDIR_on_tmpfs\ntouch /mnt/gentoo/var/tmp/.keep &amp;&amp; \\\nmount -o noatime,subvol=@var_tmp /mnt/gentoo/mapperSystem /mnt/gentoo/var/tmp &amp;&amp; \\\nchmod 1777 /mnt/gentoo/var/tmp &amp;&amp; \\\n\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre>"},{"location":"live-cd_environment/","title":"2. Live-CD Environment","text":"<p>In the following, I am using SystemRescue, not the official Gentoo Linux installation media, in order to make use of its capability to create custom installation media and setup the \"rescue\" partition with it's chroot.sh script. If not otherwise stated, commands are executed as \"root\" on the remote machine where Gentoo Linux needs to be installed, in the beginning via TTY, later on over SSH. Most of the time, you can copy&amp;paste the whole codeblock, but understand the commands first and make adjustments (e.g. IP address, disk names) if required.</p>"},{"location":"live-cd_environment/#21-optional-virtual-testing-environment","title":"2.1. (Optional) Virtual (Testing) Environment","text":"<p>If you want to use a virtual machine for the upcoming setup either to test things out or just to be a bit more secure, you have to take some preliminary measures. The easiest way to get started is the use of the Virtual Machine Manager with QEMU:</p> 1.2.3.4.5.6.7.8.9.10.11.12. <p>Open the Virtual Machine Manager:</p> <p></p> <p>Create a new virtual machine:</p> <p></p> <p>Install from a local medium:</p> <p></p> <p>Select the SystemRescue ISO and OS variant \"Gentoo Linux\":</p> <p></p> <p>Select an appropiate amount of CPU cores and memory:</p> <p></p> <p>Enable storage and select a sufficiently sized disk:</p> <p></p> <p>Name your virtual machine, make sure to set the checkmark at \"Customize configuration before install\" and setup your network device:</p> <p></p> <p>Select an UEFI x86_64 firmware with support for secure boot and click on \"Add Hardware\" for the next step:</p> <p></p> <p>Select \"TPM\", configure as shown and click on \"Finish\":</p> <p></p> <p>A new \"TPM v2.0\" device should be listed. Click on \"Begin Installation\" for the next step:</p> <p></p> <p>Select an appropiate \"Boot SystemRescue [...]\" boot option and press Enter :</p> <p></p> <p>The virtual machine should have booted into SystemRescue:</p> <p></p>"},{"location":"live-cd_environment/#22-live-cd-setup","title":"2.2. Live-CD Setup","text":"<p>Boot into SystemRescue and set the correct keyboard layout:</p> <pre><code>loadkeys de-latin1-nodeadkeys\n</code></pre> <p>(Optional) Start Xfce (copy&amp;paste one after the other):</p> <pre><code>startx\n\n# Open up a terminal in Xfce and set the keyboard layout:\nsetxkbmap de\n</code></pre> <p>Make sure you booted with UEFI:</p> <pre><code>[ -d /sys/firmware/efi ] &amp;&amp; echo UEFI || echo BIOS\n</code></pre> <p>Disable \"magic SysRq\" for security sake:</p> <pre><code>sysctl -w kernel.sysrq=0\n</code></pre> <p>Using screen</p> <p>You can detach from screen's session with Ctrl+A+D and reattach with <code>screen -d -r install</code>. Scrolling works with Ctrl+A+Esc followed by Up / Down / Page Up / Page Down . You can exit \"scroll mode\" with Esc .</p> <p>Start a screen session to better cope with networks disconnects. Alternatively, you can use tmux.</p> <pre><code>screen -S install\n</code></pre> <p>If no automatic network setup has been done via DHCP, you have to use nmtui (recommended over nmcli). On Xfce, you have the option to use nm-applet in addition.</p> <pre><code>nmtui\n</code></pre> <p>Insert an iptables rule at the correct place for SystemRescue to accept SSH connection requests:</p> <pre><code>iptables -I INPUT 4 -p tcp --dport 22 -j ACCEPT -m conntrack --ctstate NEW\n</code></pre> <p>Set a root password:</p> <pre><code>passwd root\n</code></pre> <p>Print out fingerprints to be able to double check later on upon initial SSH connection to the SystemRescue system:</p> <pre><code>find /etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\;\n</code></pre> <p>Execute following \"rsync\" and \"ssh\" commands on your local machine from within the checked out \"gentoo-installation\" repo (copy&amp;paste one after the other):</p> <pre><code># Copy installation files to remote machine. Don't forget to set the correct IP.\nrsync -e \"ssh -o VisualHostKey=yes\" -av --numeric-ids --chown=0:0 {bin/{portage_hook_kernel,disk.sh,fetch_files.sh,firewall.nft,firewall.sh},overlay} root@XXX:/tmp/\n\n# From local machine, login into the remote machine\nssh root@...\n</code></pre> <p>Resume \"screen\":</p> <pre><code>screen -d -r install\n</code></pre> <p>(Optional) Lock the screen on the remote machine by typing the following command on its keyboard (not over SSH) (copy&amp;paste one after the other):</p> <pre><code># Execute \"vlock\" without any flags first.\nvlock\n\n# Try to relogin.\n\n# If relogin doesn't work:\n# 1. Switch TTY: &lt;ctrl&gt;+&lt;alt&gt;+&lt;F2&gt;\n# 2. Set a correct password: passwd root\n# 3. Switch to previous TTY: &lt;ctrl&gt;+&lt;alt&gt;+&lt;F1&gt;\n# 4. Try to relogin again.\n\n# If relogin succeeds execute vlock with flag \"-a\" to lock all TTY.\nvlock -a\n</code></pre> <p>On bare-metal, set the date and time if the current system time is not correct:</p> <pre><code>! grep -q -w \"hypervisor\" &lt;(grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo) &amp;&amp; \\\n# replace \"MMDDhhmmYYYY\" with UTC time\ndate --utc MMDDhhmmYYYY\n</code></pre> <p>On bare-metal, update the hardware clock:</p> <pre><code>! grep -q -w \"hypervisor\" &lt;(grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo) &amp;&amp; \\\nhwclock --systohc --utc\n</code></pre>"},{"location":"non-root_user/","title":"7. Non-Root User","text":""},{"location":"non-root_user/#71-account-creation","title":"7.1. Account Creation","text":"<p>Create a non-root user with \"wheel\" group membership and thus the privilege to use \"sudo\":</p> <pre><code>useradd -m -G wheel -s /bin/bash david &amp;&amp; \\\nchmod u=rwx,og= /home/david &amp;&amp; \\\necho -e 'alias cp=\"cp -i\"\\nalias mv=\"mv -i\"\\nalias rm=\"rm -i\"' &gt;&gt; /home/david/.bash_aliases &amp;&amp; \\\nchown david:david /home/david/.bash_aliases &amp;&amp; \\\necho 'source \"${HOME}/.bash_aliases\"' &gt;&gt; /home/david/.bashrc &amp;&amp; \\\npasswd david\n</code></pre>"},{"location":"non-root_user/#72-access-control","title":"7.2. Access Control","text":"<p>Setup app-admin/sudo:</p> <pre><code>echo \"app-admin/sudo -sendmail\" &gt;&gt; /etc/portage/package.use/main &amp;&amp; \\\nemerge app-admin/sudo &amp;&amp; \\\n{ [[ -d /etc/sudoers.d ]] || mkdir -m u=rwx,g=rx,o= /etc/sudoers.d; } &amp;&amp; \\\necho \"%wheel ALL=(ALL) ALL\" | EDITOR=\"tee\" visudo -f /etc/sudoers.d/wheel &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Setup SSH client config:</p> <pre><code>echo \"AddKeysToAgent no\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org\nHostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com\nMACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com\nHashKnownHosts no\nStrictHostKeyChecking ask\nVisualHostKey yes\" &gt; /home/david/.ssh/config &amp;&amp; \\\nchown david:david /home/david/.ssh/config &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre>"},{"location":"non-root_user/#73-bashrc-and-chroot","title":"7.3. ~/.bashrc and chroot","text":"<p>Add the following to \"/root/.bashrc\" for chroot.sh to work:</p> <pre><code>echo '\n# Use fish in place of bash\n# keep this line at the bottom of ~/.bashrc\nif [[ -z ${chrooted} ]]; then\n    if [[ -x /bin/fish ]]; then\n        SHELL=/bin/fish exec /bin/fish\n    fi\nelif [[ -z ${chrooted_su} ]]; then\n    export chrooted_su=true\n    source /etc/profile &amp;&amp; su --login --whitelist-environment=chrooted,chrooted_su\nelse\n    env-update &amp;&amp; source /etc/profile &amp;&amp; export PS1=\"(chroot) $PS1\"\nfi' &gt;&gt; /root/.bashrc\n</code></pre>"},{"location":"non-root_user/#74-optional-vim-editor","title":"7.4. (Optional) VIM Editor","text":"<p>Setup app-editors/vim:</p> <pre><code>emerge -at app-editors/vim app-vim/molokai &amp;&amp; \\\nrsync -a /etc/portage/make.conf /etc/portage/._cfg0000_make.conf &amp;&amp; \\\nsed -i 's/^USE=\"\\([^\"]*\\)\"$/USE=\"\\1 vim-syntax\"/' /etc/portage/._cfg0000_make.conf &amp;&amp; \\\necho \"filetype plugin on\nfiletype indent on\nset number\nset paste\nsyntax on\ncolorscheme molokai\n\nif &amp;diff\n  colorscheme murphy\nendif\" | tee -a /root/.vimrc &gt;&gt; /home/david/.vimrc  &amp;&amp; \\\nchown david:david /home/david/.vimrc &amp;&amp; \\\neselect editor set vi &amp;&amp; \\\neselect vi set vim &amp;&amp; \\\nenv-update &amp;&amp; source /etc/profile &amp;&amp; export PS1=\"(chroot) $PS1\" &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre>"},{"location":"non-root_user/#75-optional-starship-fish-shell-and-nerd-fonts","title":"7.5. (Optional) starship, fish shell and nerd fonts","text":"<p>Install app-shells/starship:</p> <pre><code># If you have insufficient ressources, you may want to execute \"emerge --oneshot dev-lang/rust-bin\" beforehand.\necho \"app-shells/starship ~amd64\" &gt;&gt; /etc/portage/package.accept_keywords/main &amp;&amp; \\\nemerge app-shells/starship &amp;&amp; \\\n{ [[ -d /home/david/.config ]] || mkdir --mode=0700 /home/david/.config; } &amp;&amp; \\\n{ [[ -d /root/.config ]] || mkdir --mode=0700 /root/.config; } &amp;&amp; \\\ntouch /home/david/.config/starship.toml &amp;&amp; \\\nchown -R david:david /home/david/.config &amp;&amp; \\\necho '[hostname]\nssh_only = false\nformat =  \"[$hostname](bold red) \"\n' | tee /root/.config/starship.toml &gt; /home/david/.config/starship.toml &amp;&amp; \\\nstarship preset nerd-font-symbols | tee -a /root/.config/starship.toml &gt;&gt; /home/david/.config/starship.toml &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Install app-shells/fish:</p> <pre><code>echo \"=dev-libs/libpcre2-$(qatom -F \"%{PVR}\" \"$(portageq best_visible / dev-libs/libpcre2)\") pcre32\" &gt;&gt; /etc/portage/package.use/main &amp;&amp; \\\necho \"app-shells/fish ~amd64\" &gt;&gt; /etc/portage/package.accept_keywords/main &amp;&amp; \\\nemerge app-shells/fish &amp;&amp; \\\nrsync -a /etc/portage/make.conf /etc/portage/._cfg0000_make.conf &amp;&amp; \\\nsed -i 's/^USE=\"\\([^\"]*\\)\"$/USE=\"\\1 fish-completion\"/' /etc/portage/._cfg0000_make.conf &amp;&amp; \\\necho '\n# Use fish in place of bash\n# keep this line at the bottom of ~/.bashrc\nif [[ -x /bin/fish ]]; then\n    SHELL=/bin/fish exec /bin/fish\nfi' &gt;&gt; /home/david/.bashrc &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Setup auto-completion for the fish shell (copy&amp;paste one after the other):</p> <pre><code># root\n/bin/fish -c fish_update_completions\n\n# non-root\nsu -l david -c \"/bin/fish -c fish_update_completions\"\n</code></pre> <p>Enable aliases and starship (copy&amp;paste one after the other):</p> <pre><code>su -\nexit\nsu - david\nexit\nsed -i 's/^end$/    source \"$HOME\\/.bash_aliases\"\\n    starship init fish | source\\nend/' /root/.config/fish/config.fish\nsed -i 's/^end$/    source \"$HOME\\/.bash_aliases\"\\n    starship init fish | source\\nend/' /home/david/.config/fish/config.fish\n</code></pre> <p>Install nerd fonts:</p> <pre><code>emerge media-libs/fontconfig &amp;&amp; \\\nsu -l david -c \"curl --proto '=https' --tlsv1.3 -fsSL -o /tmp/FiraCode.zip https://github.com/ryanoasis/nerd-fonts/releases/download/v2.3.3/FiraCode.zip\" &amp;&amp; \\\nb2sum -c &lt;&lt;&lt;\"35d5c556f24b9b2b7be91e59292ee8d058ca0f621ca662bb6a9f1da3be05aed88561f071eeb41260d993f022b30a15b9c89fa8bed9b181ec939f8a775cc37991  /tmp/FiraCode.zip\" &amp;&amp; \\\nmkdir /tmp/FiraCode &amp;&amp; \\\nunzip -d /tmp/FiraCode /tmp/FiraCode.zip &amp;&amp; \\\nrm -f /tmp/FiraCode/*Windows* /tmp/FiraCode/Fura* &amp;&amp; \\\nmkdir /usr/share/fonts/nerd-firacode &amp;&amp; \\\nrsync -a --chown=0:0 --chmod=a=r /tmp/FiraCode/*.ttf /usr/share/fonts/nerd-firacode/ &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre>"},{"location":"other_gentoo_linux_repos/","title":"16. Other Gentoo Linux Repos","text":"<p>https://github.com/duxsco?tab=repositories&amp;q=gentoo-</p>"},{"location":"portage_setup/","title":"6. Portage Setup","text":"<p>Application of configuration changes</p> <p>Starting with this chapter, execute dispatch-conf after every codeblock where a \"._cfg0000_\" prefixed file has been created. The creation of \"._cfg0000_\" prefixed files will be highlighted in yellow. Alternatively, etc-update or cfg-update might be s.th. to consider, but I haven't tested those.</p> <p>Make \"dispatch-conf\" show diffs in color and use vimdiff for merging:</p> <pre><code>rsync -a /etc/dispatch-conf.conf /etc/._cfg0000_dispatch-conf.conf &amp;&amp; \\\nsed -i \\\n-e \"s/diff=\\\"diff -Nu '%s' '%s'\\\"/diff=\\\"diff --color=always -Nu '%s' '%s'\\\"/\" \\\n-e \"s/merge=\\\"sdiff --suppress-common-lines --output='%s' '%s' '%s'\\\"/merge=\\\"vimdiff -c'saveas %s' -c next -c'setlocal noma readonly' -c prev %s %s\\\"/\" \\\n/etc/._cfg0000_dispatch-conf.conf &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre>"},{"location":"portage_setup/#61-portage-configuration","title":"6.1. Portage Configuration","text":"<p>Configure make.conf (copy&amp;paste one after the other):</p> <pre><code>rsync -av /etc/portage/make.conf /etc/portage/._cfg0000_make.conf\n\n# If you use distcc, beware of:\n# https://wiki.gentoo.org/wiki/Distcc#-march.3Dnative\n#\n# You could resolve \"-march=native\" with app-misc/resolve-march-native\nsed -i 's/COMMON_FLAGS=\"-O2 -pipe\"/COMMON_FLAGS=\"-march=native -O2 -pipe\"/' /etc/portage/._cfg0000_make.conf\n\n# https://wiki.gentoo.org/wiki/EMERGE_DEFAULT_OPTS\n# https://wiki.gentoo.org/wiki/Binary_package_guide#Excluding_creation_of_some_packages\n#\n# For all other flags, take a look at \"man emerge\" or\n# https://gitweb.gentoo.org/proj/portage.git/tree/man/emerge.1\necho 'EMERGE_DEFAULT_OPTS=\"--buildpkg --buildpkg-exclude '\\''*/*-bin sys-kernel/* virtual/*'\\'' --noconfmem --with-bdeps=y --complete-graph=y\"' &gt;&gt; /etc/portage/._cfg0000_make.conf\n\n# https://wiki.gentoo.org/wiki/Localization/Guide#L10N\n# https://wiki.gentoo.org/wiki/Localization/Guide#LINGUAS\necho '\nL10N=\"de\"\nLINGUAS=\"${L10N}\"' &gt;&gt; /etc/portage/._cfg0000_make.conf\n\n# https://wiki.gentoo.org/wiki/GENTOO_MIRRORS\n# https://www.gentoo.org/downloads/mirrors/\necho '\nGENTOO_MIRRORS=\"https://ftp-stud.hs-esslingen.de/pub/Mirrors/gentoo/ https://ftp.fau.de/gentoo/ https://ftp.tu-ilmenau.de/mirror/gentoo/\"' &gt;&gt; /etc/portage/._cfg0000_make.conf\n\n# https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Portage#Fetch_commands\n#\n# Default values from /usr/share/portage/config/make.globals are:\n# FETCHCOMMAND=\"wget -t 3 -T 60 --passive-ftp -O \\\"\\${DISTDIR}/\\${FILE}\\\" \\\"\\${URI}\\\"\"\n# RESUMECOMMAND=\"wget -c -t 3 -T 60 --passive-ftp -O \\\"\\${DISTDIR}/\\${FILE}\\\" \\\"\\${URI}\\\"\"\n#\n# File in git: https://gitweb.gentoo.org/proj/portage.git/tree/cnf/make.globals\n#\n# They are insufficient in my opinion.\n# Thus, I am enforcing TLSv1.2 or greater, secure TLSv1.2 cipher suites and https-only.\n# TLSv1.3 cipher suites are secure. Thus, I don't set \"--tls13-ciphers\".\necho 'FETCHCOMMAND=\"curl --fail --silent --show-error --location --proto '\\''=https'\\'' --tlsv1.2 --ciphers '\\''ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128'\\'' --retry 2 --connect-timeout 60 -o \\\"\\${DISTDIR}/\\${FILE}\\\" \\\"\\${URI}\\\"\"\nRESUMECOMMAND=\"${FETCHCOMMAND} --continue-at -\"' &gt;&gt; /etc/portage/._cfg0000_make.conf\n\n# Some useflags I set for personal use.\n# Feel free to adjust as with any other codeblock. \ud83d\ude04\necho '\nUSE_HARDENED=\"caps pie -sslv3 -suid\"\nUSE=\"${USE_HARDENED}\"' &gt;&gt; /etc/portage/._cfg0000_make.conf\n</code></pre> <p>I prefer English manpages and ignore above L10N setting for \"sys-apps/man-pages\". Makes using Stackoverflow easier .</p> <pre><code>echo \"sys-apps/man-pages -l10n_de\" &gt;&gt; /etc/portage/package.use/main &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Set CPU flags:</p> <pre><code>emerge --oneshot app-portage/cpuid2cpuflags &amp;&amp; \\\necho \"*/* $(cpuid2cpuflags)\" &gt; /etc/portage/package.use/00cpu-flags &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre>"},{"location":"portage_setup/#62-optional-custom-mirrors","title":"6.2. (Optional) Custom Mirrors","text":"<p>If you don't live in Germany, you probably should change GENTOO_MIRRORS previously set in 6.1. Portage Configuration. You can pick the mirrors from the mirror list, use mirrorselect or do as I do and select local/regional, IPv4/IPv6 dual-stack and TLSv1.3 supporting mirrors (copy&amp;paste one after the other):</p> <pre><code># Install app-misc/yq\nACCEPT_KEYWORDS=\"~amd64\" emerge --oneshot app-misc/yq\n\n# Get a list of country codes and names:\ncurl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | xq -r '.mirrors.mirrorgroup[] | \"\\(.[\"@country\"]) \\(.[\"@countryname\"])\"' | sort -k2.2\n\n# Choose your countries the mirrors should be located in:\ncountry='\"AU\",\"BE\",\"BR\",\"CA\",\"CH\",\"CL\",\"CN\",\"CZ\",\"DE\",\"DK\",\"ES\",\"FR\",\"GR\",\"HK\",\"IL\",\"IT\",\"JP\",\"KR\",\"KZ\",\"LU\",\"NA\",\"NC\",\"NL\",\"PH\",\"PL\",\"PT\",\"RO\",\"RU\",\"SG\",\"SK\",\"TR\",\"TW\",\"UK\",\"US\",\"ZA\"'\n\n# Get a list of mirrors available over IPv4/IPv6 dual-stack in the countries of your choice with TLSv1.3 support\nwhile read -r i; do\nif curl -fsL --proto '=https' --tlsv1.3 -I \"${i}\" &gt;/dev/null; then\necho \"${i}\"\nfi\ndone &lt; &lt;(\ncurl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | \\\nxq -r \".mirrors.mirrorgroup[] | select([.\\\"@country\\\"] | inside([${country}])) | .mirror | if type==\\\"array\\\" then .[] else . end | .uri | if type==\\\"array\\\" then .[] else . end | select(.\\\"@protocol\\\" == \\\"http\\\" and .\\\"@ipv4\\\" == \\\"y\\\" and .\\\"@ipv6\\\" == \\\"y\\\" and (.\\\"#text\\\" | startswith(\\\"https://\\\"))) | .\\\"#text\\\"\"\n)\n</code></pre>"},{"location":"portage_setup/#63-repo-syncing","title":"6.3. Repo Syncing","text":"<p>Mitigate CVE-2022-29154 among others before using \"rsync\" via \"eix-sync\":</p> <pre><code>echo 'net-misc/rsync ~amd64' &gt;&gt; /etc/portage/package.accept_keywords/main &amp;&amp; \\\nemerge --oneshot net-misc/rsync &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>I personally prefer syncing the repo via \"eix-sync\" which is provided by app-portage/eix. But, there are some of other options:</p> eix-syncemaint (replaced \"emerge --sync\")emerge-webrsync <pre><code>emerge app-portage/eix &amp;&amp; \\\neix-sync\n</code></pre> <pre><code>emaint --auto sync\n</code></pre> <pre><code>emerge-webrsync\n</code></pre> <p>Read Gentoo news items:</p> <pre><code>eselect news list\n# eselect news read 1\n# eselect news read 2\n# etc.\n</code></pre>"},{"location":"portage_setup/#64-optional-hardened-profiles","title":"6.4. (Optional) Hardened Profiles","text":"<p>Desktop Profiles</p> <p>To make things simple, hardened desktop profiles are only considered for selection at the end of this guide in chapter 15. Desktop profiles (optional).</p> <p>Switch over to the custom hardened profile. Additional ressources:</p> <ul> <li>My custom profiles</li> <li>Creating custom profiles</li> <li>Switching to a hardened profile</li> </ul> <pre><code>eselect profile set duxsco:hardened-systemd-merged-usr &amp;&amp; \\\nenv-update &amp;&amp; source /etc/profile &amp;&amp; export PS1=\"(chroot) $PS1\" &amp;&amp; \\\nemerge --oneshot sys-devel/gcc &amp;&amp; \\\nemerge --oneshot sys-devel/binutils sys-libs/glibc &amp;&amp; \\\nenv-update &amp;&amp; source /etc/profile &amp;&amp; export PS1=\"(chroot) $PS1\" &amp;&amp; \\\nemerge -e @world &amp;&amp; \\\nenv-update &amp;&amp; source /etc/profile &amp;&amp; export PS1=\"(chroot) $PS1\" &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre>"},{"location":"post-boot_configuration/","title":"12. Post-Boot Configuration","text":""},{"location":"post-boot_configuration/#121-systemd-configuration","title":"12.1. systemd Configuration","text":"<p>Some configuration needs to be done after Gentoo's systemd has been started. In the previous chapter, systemd was running, but only the instance belonging to SystemRescue.</p> <p>Setup localisation (copy&amp;paste one after the other):</p> <pre><code># set your language settings\nexport my_lang=\"de_DE.UTF-8\"\nexport my_lc_messages=\"en_US.UTF-8\" # I prefer English messages for easier googling around.\n\n/bin/bash -c '\nlocalectl set-locale LANG=\"${my_lang}\" LC_COLLATE=\"C.UTF-8\" LC_MESSAGES=\"${my_lc_messages}\" &amp;&amp; \\\nlocalectl status &amp;&amp; \\\nenv-update &amp;&amp; source /etc/profile &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n'\n</code></pre> <p>Setup systemd-timesyncd (copy&amp;paste one after the other):</p> <pre><code># set your timezone\nexport my_timezone=\"Europe/Berlin\"\n\n# list of ntp servers: https://www.ntppool.org/zone/@\n# set your (fallback) ntp servers\nexport my_ntp_servers=\"0.de.pool.ntp.org 1.de.pool.ntp.org 2.de.pool.ntp.org 3.de.pool.ntp.org\"\nexport my_fallback_ntp_servers=\"0.europe.pool.ntp.org 1.europe.pool.ntp.org 2.europe.pool.ntp.org 3.europe.pool.ntp.org\"\n\n/bin/bash -c '\ntimedatectl set-timezone ${my_timezone} &amp;&amp; \\\nif grep -q -w \"hypervisor\" &lt;(grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo); then\n    systemctl disable systemd-timesyncd.service &amp;&amp; \\\n    echo -e \"\\e[1;32mSUCCESS\\e[0m\"\nelse\n    rsync -av /etc/systemd/timesyncd.conf /etc/systemd/._cfg0000_timesyncd.conf &amp;&amp; \\\n    sed -i -e \"s/#NTP=/NTP=${my_ntp_servers}/\" -e \"s/#FallbackNTP=.*/FallbackNTP=${my_fallback_ntp_servers}/\" /etc/systemd/._cfg0000_timesyncd.conf &amp;&amp; \\\n    timedatectl set-ntp true &amp;&amp; \\\n    echo -e \"\\e[1;32mSUCCESS\\e[0m\"\nfi &amp;&amp; \\\ntimedatectl &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n'\n</code></pre> <p>Setup nftables with certain firewall rules:</p> <pre><code>emerge net-firewall/nftables &amp;&amp; \\\nrsync -a /etc/conf.d/nftables /etc/conf.d/._cfg0000_nftables &amp;&amp; \\\nsed -i 's/^SAVE_ON_STOP=\"yes\"$/SAVE_ON_STOP=\"no\"/' /etc/conf.d/._cfg0000_nftables &amp;&amp; \\\n/usr/local/sbin/firewall.nft &amp;&amp; \\\nnft list ruleset &gt; /var/lib/nftables/rules-save &amp;&amp; \\\nsystemctl enable nftables-restore &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre>"},{"location":"post-boot_configuration/#122-secure-boot-setup","title":"12.2. Secure Boot Setup","text":"<p>Warnings on OptionROM</p> <p>Make sure to prepare your graphics card for secure boot. Otherwise, you may soft-brick your device.</p> <p>If \"sbctl enroll-keys\" failed in section 8.3. Secure Boot, you can import secure boot files the following way now.</p> <p>First, boot into the Gentoo Linux and save necessary files in \"DER\" format on ESP:</p> <pre><code>/bin/bash -c '\n{\n! mountpoint --quiet /boot/efia &amp;&amp; \\\nmount /boot/efia || true\n} &amp;&amp; \\\nopenssl x509 -outform der -in /usr/share/secureboot/keys/db/db.pem -out /boot/efia/db.der &amp;&amp; \\\nopenssl x509 -outform der -in /usr/share/secureboot/keys/KEK/KEK.pem -out /boot/efia/KEK.der &amp;&amp; \\\nopenssl x509 -outform der -in /usr/share/secureboot/keys/PK/PK.pem -out /boot/efia/PK.der &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n'\n</code></pre> <p>Reboot into \"UEFI Firmware Settings\" and import \"db.der\", \"KEK.der\" and \"PK.der\" in this order. Thereafter, enable secure boot. Upon successful boot with secure boot enabled, you can delete the \".der\" files in <code>/boot/efia</code>.</p> <p>To check whether secure boot is enabled execute:</p> <pre><code>\u276f sbctl status\nInstalled:  \u2713 sbctl is installed\nOwner GUID: 4cdeb60c-d2ce-4ed9-af89-2b659c21f6e4\nSetup Mode: \u2713 Disabled\nSecure Boot:    \u2713 Enabled\n</code></pre> <p>(Optional) To list the installed secure boot keys/certs (copy&amp;paste one after the other):</p> <pre><code>emerge -at app-crypt/efitools\n\nefi-readvar\n</code></pre>"},{"location":"post-boot_configuration/#123-measured-boot","title":"12.3. Measured Boot","text":"<p>You have two reasonable options for measured boot on systemd:</p> <ul> <li>systemd-cryptenroll: I prefer this on local systems (e.g. laptops, desktop PCs) where I have access to TTY and can take care of (optional) pin prompts which are supported with systemd \u2265251. With pins, you don't have the problem of your laptop, for example, getting stolen and auto-unlocking upon boot. Furthermore, I experienced faster boot with systemd-cryptenroll than with clevis due to the use of PBKDF2 which is safe to use with the secure keys generated by systemd-cryptenroll. And, you don't have to use the \"app-crypt/clevis\" package from (unofficial) guru overlay.</li> <li>clevis: I prefer this on remote systems, e.g. a server in colocation, where I can take care of unlock via Shamir Secret Sharing which combines TPM 2.0 and Tang pin (Tang project).</li> </ul> <p>Use either systemd-cryptenroll or clevis in the following.</p>"},{"location":"post-boot_configuration/#1231a-systemd-cryptenroll","title":"12.3.1.a) systemd-cryptenroll","text":"<p>Install \"app-crypt/tpm2-tools\":</p> <pre><code>emerge -av tpm2-tools\n</code></pre> <p>Add support for TPM 2.0 to dracut and systemd:</p> <pre><code>rsync -a /etc/portage/package.use/main /etc/portage/package.use/._cfg0000_main &amp;&amp; \\\nsed -i 's/^\\(sys-apps\\/systemd.*\\)$/\\1 tpm/' /etc/portage/package.use/._cfg0000_main &amp;&amp; \\\necho 'add_dracutmodules+=\" tpm2-tss \"' &gt;&gt; /etc/dracut.conf &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Update and make sure \"sys-apps/systemd\" is listed among the packages:</p> <pre><code>emerge -atuDN @world\n</code></pre> <p>With systemd &gt;=252, mask certain services to be able to boot. You can unmask them after configuring them correctly.</p> <pre><code>systemctl mask systemd-pcrphase-initrd.service &amp;&amp; \\\nsystemctl mask systemd-pcrphase-sysinit.service &amp;&amp; \\\nsystemctl mask systemd-pcrphase.service &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Make sure that TPM 2.0 devices (should only be one) are recognised:</p> <pre><code>systemd-cryptenroll --tpm2-device=list\n</code></pre> <p>Make sure that the PCRs you are going to use have a valid hash and don't consist of zeroes only:</p> <pre><code>tpm2_pcrread sha256\n</code></pre> <p>Create new LUKS keyslots on all swap and system partitions.</p> <pre><code># I only use PCR7 as recommended in the first sentence after following table:\n# https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2\n#\n# \"--tpm2-with-pin=yes\" is optional:\n# https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#--tpm2-with-pin=BOOL\n#\nsystemd-cryptenroll --tpm2-device=auto --tpm2-pcrs=7 --tpm2-with-pin=yes /dev/sda3\nsystemd-cryptenroll --tpm2-device=auto --tpm2-pcrs=7 --tpm2-with-pin=yes /dev/sda4\nsystemd-cryptenroll --tpm2-device=auto --tpm2-pcrs=7 --tpm2-with-pin=yes /dev/sdb3\nsystemd-cryptenroll --tpm2-device=auto --tpm2-pcrs=7 --tpm2-with-pin=yes /dev/sdb4\n# etc.\n</code></pre> <p>Reboot your system and use your fallback passphrase for LUKS unlock again this time!</p>"},{"location":"post-boot_configuration/#1231b-clevis","title":"12.3.1.b) clevis","text":"<p>System Requirement: Tang Server</p> <p>This section requires a tang server to preexist and be reachable from this system. A simple tang server setup is shown by RedHat on YouTube. I personally use AlmaLinux as tang server, but any supported system can do.</p> <p>Info</p> <p>The packages <code>app-crypt/clevis</code>, <code>dev-libs/jose</code> and <code>dev-libs/luksmeta</code> originate from project GURU.</p> <p>If you don't have a DHCP server available to the new system, add the following network settings to the \"CMDLINE\" array variable in <code>/etc/dracut.conf</code>:</p> <pre><code>ip=192.168.10.2::192.168.10.1:255.255.255.0:micro:enp1s0:off\n</code></pre> <p>Install \"dev-vcs/git\":</p> <pre><code>echo 'dev-vcs/git -webdav' &gt;&gt; /etc/portage/package.use/main &amp;&amp; \\\nemerge -at dev-vcs/git\n</code></pre> <p>Install \"app-crypt/clevis\":</p> <pre><code>echo \"app-crypt/clevis ~amd64\ndev-libs/jose ~amd64\ndev-libs/luksmeta ~amd64\napp-crypt/tpm2-tools ~amd64\" &gt;&gt; /etc/portage/package.accept_keywords/main &amp;&amp; \\\nemerge -at app-crypt/clevis\n</code></pre> <p>Make sure that the PCRs you are going to use have a valid hash and don't consist of zeroes only:</p> <pre><code>tpm2_pcrread sha256\n</code></pre> <p>Bind all swap and system LUKS volumes.</p> <pre><code># I only use PCR7 as recommended in the first sentence after following table:\n# https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2\n#\nclevis luks bind -d /dev/sda3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}'\nclevis luks bind -d /dev/sda4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}'\nclevis luks bind -d /dev/sdb3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}'\nclevis luks bind -d /dev/sdb4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}'\n# etc.\n</code></pre> <p>Show results:</p> <pre><code>clevis luks list -d /dev/sda3\nclevis luks list -d /dev/sda4\nclevis luks list -d /dev/sdb3\nclevis luks list -d /dev/sdb4\n# etc.\n</code></pre>"},{"location":"post-boot_configuration/#1232-kernel-rebuild","title":"12.3.2. Kernel Rebuild","text":"<p>Rebuild the unified kernel image to integrate the changes for measured boot:</p> <pre><code>emerge -at --oneshot \\\n$(qlist -eI sys-kernel/gentoo-kernel-bin &gt;/dev/null &amp;&amp; echo sys-kernel/gentoo-kernel-bin) \\\n$(qlist -eI sys-kernel/gentoo-kernel &gt;/dev/null &amp;&amp; echo sys-kernel/gentoo-kernel)\n</code></pre> <p>Note</p> <p>If you decided in favor of systemd-cryptenroll, you can use the TPM 2.0 pin upon boot from this point onwards.</p>"},{"location":"post-boot_configuration/#124-package-cleanup","title":"12.4. Package Cleanup","text":"<p>Update packages and remove extraneous ones (copy&amp;paste one after the other):</p> <pre><code>emerge -atuDN @world\nemerge --depclean -a\n</code></pre>"},{"location":"rescue_system/","title":"4. Rescue System","text":"<p>Info</p> <p>A feature request has been opened to have SystemRescue support \"measured boot\".</p> <p>While we are still on SystemRescue and not within chroot, download the SystemRescue .iso file and create a customised one out of it.</p>"},{"location":"rescue_system/#41-downloads-and-verification","title":"4.1. Downloads And Verification","text":"<p>Prepare the working directory:</p> <pre><code>mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd &amp;&amp; \\\nchown meh:meh /mnt/gentoo/etc/gentoo-installation/systemrescuecd &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Import the GnuPG public key used to sign the SystemRescue .iso:</p> <pre><code>su -l meh -c \"\nmkdir --mode=0700 /tmp/gpgHomeDir &amp;&amp; \\\ncurl -fsSL --proto '=https' --tlsv1.3 https://www.system-rescue.org/security/signing-keys/gnupg-pubkey-fdupoux-20210704-v001.pem | gpg --homedir /tmp/gpgHomeDir --import &amp;&amp; \\\ngpg --homedir /tmp/gpgHomeDir --import-ownertrust &lt;&lt;&lt;'62989046EB5C7E985ECDF5DD3B0FEA9BE13CA3C9:6:' &amp;&amp; \\\ngpgconf --homedir /tmp/gpgHomeDir --kill all &amp;&amp; \\\necho -e '\\e[1;32mSUCCESS\\e[0m'\n\"\n</code></pre> <p>Download the .iso and .asc files:</p> <pre><code>rescue_system_version=\"$(su -l meh -c \"curl -fsS --proto '=https' --tlsv1.3 https://gitlab.com/systemrescue/systemrescue-sources/-/raw/main/VERSION\")\" &amp;&amp; \\\nsu -l meh -c \"\ncurl --continue-at - -L --proto '=https' --tlsv1.2 --ciphers 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso \\\"https://sourceforge.net/projects/systemrescuecd/files/sysresccd-x86/${rescue_system_version}/systemrescue-${rescue_system_version}-amd64.iso/download?use_mirror=netcologne\\\" &amp;&amp; \\\ncurl -fsSL --proto '=https' --tlsv1.3 --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc \\\"https://www.system-rescue.org/releases/${rescue_system_version}/systemrescue-${rescue_system_version}-amd64.iso.asc\\\" &amp;&amp; \\\necho -e '\\e[1;32mSUCCESS\\e[0m'\n\"\n</code></pre> <p>Verify the .iso file with GnuPG:</p> <pre><code>su -l meh -c \"\ngpg --homedir /tmp/gpgHomeDir --verify /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso &amp;&amp; \\\ngpgconf --homedir /tmp/gpgHomeDir --kill all\n\" &amp;&amp; \\\nchown -R 0:0 /mnt/gentoo/etc/gentoo-installation/systemrescuecd &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre>"},{"location":"rescue_system/#42-configuration","title":"4.2. Configuration","text":"<p>Create the folder structure which will contain SystemRescue customisations:</p> <pre><code>mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/{recipe/{iso_delete,iso_add/{autorun,sysresccd,sysrescue.d},iso_patch_and_script,build_into_srm/{etc/sysctl.d,usr/local/sbin}},work} &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Disable \"magic SysRq\" for security sake:</p> <pre><code>echo \"kernel.sysrq = 0\" &gt; /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/sysctl.d/99sysrq.conf &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Copy chroot.sh created by disk.sh:</p> <pre><code>rsync -av --numeric-ids --chown=0:0 --chmod=u=rwx,go=r /tmp/chroot.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/usr/local/sbin/ &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Copy the firewall script:</p> <pre><code># set firewall rules upon bootup.\nrsync -av --numeric-ids --chown=0:0 --chmod=u=rw,go=r /tmp/firewall.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/autorun/autorun &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Create the settings YAML (copy&amp;paste one after the other):</p> <pre><code># disable bash history\nset +o history\n\n# replace \"MyPassWord123\" with the password you want to use to login via TTY on the rescue system\ncrypt_pass=\"$(python3 -c 'import crypt; print(crypt.crypt(\"MyPassWord123\", crypt.mksalt(crypt.METHOD_SHA512)))')\"\n\n# enable bash history\nset -o history\n\n# set default settings\necho \"\\\n---\nglobal:\n    copytoram: true\n    checksum: true\n    nofirewall: true\n    loadsrm: true\n    setkmap: de-latin1-nodeadkeys\n    dostartx: false\n    dovnc: false\n    rootshell: /bin/bash\n    rootcryptpass: '${crypt_pass}'\n\nautorun:\n    ar_disable: false\n    ar_nowait: true\n    ar_nodel: false\n    ar_ignorefail: false\\\n\" &gt; /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysrescue.d/500-settings.yaml\n\n# unset the password variable\nunset crypt_pass\n</code></pre> <p>Integrate additional packages required for chroot.sh to work:</p> <pre><code>pacman -Sy clevis libpwquality luksmeta sbctl sbsigntools tpm2-tools &amp;&amp; \\\ncowpacman2srm /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysresccd/zz_additional_packages.srm &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre>"},{"location":"rescue_system/#43-optional-ssh-server","title":"4.3 (Optional) SSH Server","text":"<p>Info</p> <p>This section is only required if you want to access the rescue system over SSH.</p> <p>Take care of public key authentication (copy&amp;paste one after the other):</p> <pre><code>mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh\n\n# add your ssh public keys to\n# /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys\n\n# set correct modes\nchmod u=rwx,g=rx,o= /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root\nchmod -R u=rwX,go= /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh\n</code></pre> <p>Configure the SSH server:</p> <pre><code>mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh &amp;&amp; \\\n\nrsync -a /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config &amp;&amp; \\\n\n# do some ssh server hardening\nsed -i \\\n-e 's/^#Port 22$/Port 50023/' \\\n-e 's/^#PasswordAuthentication yes/PasswordAuthentication no/' \\\n-e 's/^#X11Forwarding no$/X11Forwarding no/' /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config &amp;&amp; \\\n\ngrep -q \"^KbdInteractiveAuthentication no$\" /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config  &amp;&amp; \\\necho \"\nAuthenticationMethods publickey\n\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org\nHostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com\nMACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com\" &gt;&gt; /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config &amp;&amp; \\\n\n# create ssh_host_* files in build_into_srm/etc/ssh/\nssh-keygen -A -f /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm &amp;&amp; \\\n\n{ diff /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config || true; } &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Open the SSH port:</p> <pre><code>echo \"\niptables  -A INPUT -p tcp --dport 50023 -j ACCEPT\nip6tables -A INPUT -p tcp --dport 50023 -j ACCEPT\" &gt;&gt; /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/autorun/autorun\n</code></pre> <p>Write down fingerprints to double check upon initial SSH connection to the rescue system:</p> <pre><code>find /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre>"},{"location":"rescue_system/#44-folder-structure","title":"4.4. Folder Structure","text":"<p>After running through above installation steps, you should have the following file/folder structure:</p> SSH setupnon-SSH setup <pre><code>\u276f tree -a /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe\n/mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe\n\u251c\u2500\u2500 build_into_srm\n\u2502   \u251c\u2500\u2500 etc\n\u2502   \u2502   \u251c\u2500\u2500 ssh\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 sshd_config\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ssh_host_ecdsa_key\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ssh_host_ecdsa_key.pub\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ssh_host_ed25519_key\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ssh_host_ed25519_key.pub\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ssh_host_rsa_key\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ssh_host_rsa_key.pub\n\u2502   \u2502   \u2514\u2500\u2500 sysctl.d\n\u2502   \u2502       \u2514\u2500\u2500 99sysrq.conf\n\u2502   \u251c\u2500\u2500 root\n\u2502   \u2502   \u2514\u2500\u2500 .ssh\n\u2502   \u2502       \u2514\u2500\u2500 authorized_keys\n\u2502   \u2514\u2500\u2500 usr\n\u2502       \u2514\u2500\u2500 local\n\u2502           \u2514\u2500\u2500 sbin\n\u2502               \u2514\u2500\u2500 chroot.sh\n\u251c\u2500\u2500 iso_add\n\u2502   \u251c\u2500\u2500 autorun\n\u2502   \u2502   \u2514\u2500\u2500 autorun\n\u2502   \u251c\u2500\u2500 sysresccd\n\u2502   \u2502   \u2514\u2500\u2500 zz_additional_packages.srm\n\u2502   \u2514\u2500\u2500 sysrescue.d\n\u2502       \u2514\u2500\u2500 500-settings.yaml\n\u251c\u2500\u2500 iso_delete\n\u2514\u2500\u2500 iso_patch_and_script\n\n15 directories, 13 files\n</code></pre> <pre><code>\u276f tree -a /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe\n/mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe\n\u251c\u2500\u2500 build_into_srm\n\u2502   \u251c\u2500\u2500 etc\n\u2502   \u2502   \u2514\u2500\u2500 sysctl.d\n\u2502   \u2502       \u2514\u2500\u2500 99sysrq.conf\n\u2502   \u2514\u2500\u2500 usr\n\u2502       \u2514\u2500\u2500 local\n\u2502           \u2514\u2500\u2500 sbin\n\u2502               \u2514\u2500\u2500 chroot.sh\n\u251c\u2500\u2500 iso_add\n\u2502   \u251c\u2500\u2500 autorun\n\u2502   \u2502   \u2514\u2500\u2500 autorun\n\u2502   \u251c\u2500\u2500 sysresccd\n\u2502   \u2502   \u2514\u2500\u2500 zz_additional_packages.srm\n\u2502   \u2514\u2500\u2500 sysrescue.d\n\u2502       \u2514\u2500\u2500 500-settings.yaml\n\u251c\u2500\u2500 iso_delete\n\u2514\u2500\u2500 iso_patch_and_script\n\n12 directories, 5 files\n</code></pre>"},{"location":"rescue_system/#45-iso-and-rescue-partition","title":"4.5. ISO And Rescue Partition","text":"<p>Create an installation medium with above changes:</p> <pre><code>sysrescue-customize \\\n--auto --overwrite \\\n-s /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso \\\n-d /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_custom.iso \\\n-r /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe \\\n-w /mnt/gentoo/etc/gentoo-installation/systemrescuecd/work &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Copy the content of the custom installation medium to the \"rescue\" partition:</p> <pre><code>mkdir /mnt/iso /mnt/gentoo/mnt/rescue &amp;&amp; \\\nmount -o loop,ro /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_custom.iso /mnt/iso &amp;&amp; \\\nmount -o noatime /mnt/gentoo/mapperRescue /mnt/gentoo/mnt/rescue &amp;&amp; \\\nrsync -HAXSacv --delete /mnt/iso/{autorun,sysresccd,sysrescue.d} /mnt/gentoo/mnt/rescue/ &amp;&amp; \\\numount /mnt/iso &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre>"},{"location":"rescue_system/#46-kernel-installation","title":"4.6. Kernel Installation","text":"<p>Create the unified kernel image which will be used to boot the rescue system:</p> <pre><code>echo \"cryptdevice=UUID=$(blkid -s UUID -o value /mnt/gentoo/devRescue):root root=/dev/mapper/root archisobasedir=sysresccd archisolabel=rescue31415fs noautologin loadsrm=y\" &gt; /tmp/my_cmdline &amp;&amp; \\\nobjcopy \\\n--add-section .osrel=\"/usr/lib/os-release\" --change-section-vma .osrel=0x20000 \\\n--add-section .cmdline=\"/tmp/my_cmdline\" --change-section-vma .cmdline=0x30000 \\\n--add-section .linux=\"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/vmlinuz\" --change-section-vma .linux=0x2000000 \\\n--add-section .initrd=\"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/sysresccd.img\" --change-section-vma .initrd=0x3000000 \\\n\"/usr/lib/systemd/boot/efi/linuxx64.efi.stub\" \"/tmp/systemrescuecd.efi\" &amp;&amp; \\\nwhile read -r my_esp; do\nmkdir \"${my_esp/devE/boot\\/e}\" &amp;&amp; \\\nmount -o noatime,dmask=0022,fmask=0133 \"${my_esp}\" \"${my_esp/devE/boot\\/e}\" &amp;&amp; \\\nrsync -av \"/tmp/systemrescuecd.efi\" \"${my_esp/devE/boot\\/e}/\" &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\ndone &lt; &lt;(find /mnt/gentoo/devEfi* -maxdepth 0)\n</code></pre>"},{"location":"selinux/","title":"14. SELinux (optional)","text":"<p>Info</p> <p>This chapter basically follows SELinux/Installation. Currently, I only use SELinux on servers, and only \"mcs\" policy type to be able to better isolate virtual machines from each other.</p>"},{"location":"selinux/#141-enable-selinux","title":"14.1. Enable SELinux","text":"<p>Reduce the number of services by disabling some unneeded ones in order to avoid a few SELinux denials. This may not be desired on \"desktop\" systems.</p> <pre><code>systemctl mask user@.service &amp;&amp; \\\nsystemctl disable systemd-userdbd.socket &amp;&amp; \\\nrsync -a /etc/nsswitch.conf /etc/._cfg0000_nsswitch.conf &amp;&amp; \\\nsed -i 's/^hosts:\\([[:space:]]*\\)mymachines \\(.*\\)$/hosts:\\1\\2/' /etc/._cfg0000_nsswitch.conf &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Setup \"make.conf\":</p> <pre><code>rsync -a /etc/portage/make.conf /etc/portage/._cfg0000_make.conf &amp;&amp; \\\necho -e '\\nPOLICY_TYPES=\"mcs\"' &gt;&gt; /etc/portage/._cfg0000_make.conf &amp;&amp; \\\nsed -i 's/^USE_HARDENED=\"\\(.*\\)\"/USE_HARDENED=\"\\1 -ubac -unconfined\"/' /etc/portage/._cfg0000_make.conf &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>For the switch to a SELinux profile, you have two options depending on the profile currently in use:</p> duxsco:hardened-systemd-merged-usrdefault/linux/amd64/17.1/systemd/merged-usr <p>If you have switched to duxsco:hardened-systemd-merged-usr in section 6.4. (Optional) Hardened Profiles, you can easily \"add\" SELinux features with a simple switch to duxsco:hardened-systemd-merged-usr-selinux:</p> <pre><code>eselect profile set \"duxsco:hardened-systemd-merged-usr-selinux\"\n</code></pre> <p>If you stayed with the profile that came with the stage3 tarball which is most likely \"default/linux/amd64/17.1/systemd/merged-usr\" you can select the SELinux profile with:</p> <pre><code>eselect profile set --force \"default/linux/amd64/17.1/systemd/selinux/merged-usr\"\n</code></pre> <p>These commands are more or less required irrespective of the SELinux profile in use:</p> <pre><code># (Recommended) Use the most recent SELinux policies\necho 'sec-policy/* ~amd64' &gt;&gt; /etc/portage/package.accept_keywords/main &amp;&amp; \\\n\n# (Optional) To get a nice looking html site in /usr/share/doc/selinux-base-&lt;VERSION&gt;/mcs/html:\necho 'sec-policy/selinux-base doc' &gt;&gt; /etc/portage/package.use/main &amp;&amp; \\\n\n# Definitely required:\nFEATURES=\"-selinux\" emerge --oneshot selinux-base &amp;&amp; \\\n\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Configure SELinux:</p> <pre><code>rsync -a /etc/selinux/config /etc/selinux/._cfg0000_config &amp;&amp; \\\nsed -i 's/^SELINUXTYPE=strict$/SELINUXTYPE=mcs/' /etc/selinux/._cfg0000_config &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Update packages:</p> <pre><code>FEATURES=\"-selinux -sesandbox\" emerge --oneshot selinux-base &amp;&amp; \\\nFEATURES=\"-selinux -sesandbox\" emerge --oneshot selinux-dbus &amp;&amp; \\\nFEATURES=\"-selinux -sesandbox\" emerge --oneshot selinux-base-policy &amp;&amp; \\\nemerge -atuDN @world\n</code></pre> <p>Enable auditd logging:</p> <pre><code>systemctl enable auditd.service &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Rebuild the kernel with SELinux support:</p> <pre><code>emerge -at --oneshot \\\n$(qlist -eI sys-kernel/gentoo-kernel-bin &gt;/dev/null &amp;&amp; echo sys-kernel/gentoo-kernel-bin) \\\n$(qlist -eI sys-kernel/gentoo-kernel &gt;/dev/null &amp;&amp; echo sys-kernel/gentoo-kernel) &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Reboot with permissive kernel.</p> <p>Make sure that UBAC gets disabled:</p> <pre><code>bash -c '(\n    cd /usr/share/selinux/mcs &amp;&amp; \\\n    semodule -i base.pp -i $(ls *.pp | grep -v base.pp) &amp;&amp; \\\n    echo -e \"\\e[1;32mSUCCESS\\e[0m\"\n)'\n</code></pre>"},{"location":"selinux/#142-relabel","title":"14.2. Relabel","text":"<p>Relabel the entire system:</p> <pre><code>mkdir /mnt/gentoo &amp;&amp; \\\nmount -o bind / /mnt/gentoo &amp;&amp; \\\nsetfiles -r /mnt/gentoo /etc/selinux/mcs/contexts/files/file_contexts /mnt/gentoo/{dev,home,proc,run,sys,tmp,boot/efi*,var/cache/binpkgs,var/cache/distfiles,var/db/repos/gentoo,var/tmp} &amp;&amp; \\\numount /mnt/gentoo &amp;&amp; \\\nrlpkg -a -r &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Make sure that nothing (except perhaps \".keep\" files) is unlabeled:</p> <pre><code>export tmpdir=\"$(mktemp -d)\" &amp;&amp; \\\nmount --bind / \"$tmpdir\" &amp;&amp; \\\nfind \"$tmpdir\" -context system_u:object_r:unlabeled_t:s0 &amp;&amp; \\\numount \"$tmpdir\" &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>If \"/proc\" was listed by above codeblock you have to relabel to avoid a denial:</p> <pre><code>\u276f cat &lt;&lt;EOF | audit2allow\n[   19.902620] audit: type=1400 audit(1663630933.439:3): avc:  denied  { mounton } for  pid=1062 comm=\"(auditd)\" path=\"/run/systemd/unit-root/proc\" dev=\"dm-3\" ino=67581 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:unlabeled_t:s0 tclass=dir permissive=1\nEOF\n\n\n#============= init_t ==============\nallow init_t unlabeled_t:dir mounton;\n\n# Credits: grift :)\n\u276f export tmpdir=\"$(mktemp -d)\" &amp;&amp; mount --bind / \"$tmpdir\" &amp;&amp; chcon system_u:object_r:proc_t:s0 \"$tmpdir\"/proc &amp;&amp; umount \"$tmpdir\" &amp;&amp; echo -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>In section 10. SSH Server (optional), the SSH port has been changed to 50022. This needs to be considered for no SELinux denials to occur:</p> <pre><code>\u276f semanage port -l | grep -e ssh -e Port\nSELinux Port Type              Proto    Port Number\nssh_port_t                     tcp      22\n\u276f semanage port -a -t ssh_port_t -p tcp 50022\n\u276f semanage port -l | grep -e ssh -e Port\nSELinux Port Type              Proto    Port Number\nssh_port_t                     tcp      50022, 22\n</code></pre>"},{"location":"selinux/#143-users-and-services","title":"14.3. Users and services","text":"<p>Default \"mcs\" SELinux \"login\" and \"user\" settings:</p> <pre><code>\u276f semanage login -l\n\nLogin Name           SELinux User         MLS/MCS Range        Service\n\n__default__          user_u               s0-s0                *\nroot                 root                 s0-s0:c0.c1023       *\n\n\u276f semanage user -l\n\n                Labeling   MLS/       MLS/\nSELinux User    Prefix     MCS Level  MCS Range                      SELinux Roles\n\nroot            sysadm     s0         s0-s0:c0.c1023                 staff_r sysadm_r\nstaff_u         staff      s0         s0-s0:c0.c1023                 staff_r sysadm_r\nsysadm_u        sysadm     s0         s0-s0:c0.c1023                 sysadm_r\nsystem_u        user       s0         s0-s0:c0.c1023                 system_r\nunconfined_u    unconfined s0         s0-s0:c0.c1023                 unconfined_r\nuser_u          user       s0         s0                             user_r\n</code></pre> <p>Add the initial user to the administration SELinux user:</p> <pre><code>semanage login -a -s staff_u david &amp;&amp; \\\nrestorecon -RFv /home/david &amp;&amp; \\\nbash -c 'echo \"%wheel ALL=(ALL) TYPE=sysadm_t ROLE=sysadm_r ALL\" | EDITOR=\"tee\" visudo -f /etc/sudoers.d/wheel &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"'\n</code></pre> <p>Now, we should have:</p> <pre><code>\u276f semanage login -l\n\nLogin Name           SELinux User         MLS/MCS Range        Service\n\n__default__          user_u               s0-s0                *\ndavid                staff_u              s0-s0:c0.c1023       *\nroot                 root                 s0-s0:c0.c1023       *\n</code></pre> <p>Create \"/var/lib/sepolgen/interface_info\" for \"audit2why -R\" to work:</p> <pre><code>sepolgen-ifgen -i /usr/share/selinux/mcs/include/support/ &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre>"},{"location":"selinux/#144-selinux-policies","title":"14.4. SELinux policies","text":"<p>At this point, you can reboot into permissive mode again and use the selinux-policy-creator.sh script.</p>"},{"location":"ssh_server/","title":"10. SSH Server (optional)","text":"<p>Note</p> <p>If you haven't setup SSH for the SystemRescue system you have to create \"/home/david/.ssh/authorized_keys\" manually instead of copying out of \"/etc/gentoo-installation/systemrescuecd/\" as suggested in the following codeblock.</p> <p>Take care of public key authentication:</p> <pre><code>rsync -av --chown=david:david /etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys /home/david/.ssh/ &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Configure the SSH server:</p> <pre><code>rsync -a /etc/ssh/sshd_config /etc/ssh/._cfg0000_sshd_config &amp;&amp; \\\nsed -i \\\n-e 's/^#Port 22$/Port 50022/' \\\n-e 's/^#PermitRootLogin prohibit-password$/PermitRootLogin no/' \\\n-e 's/^#KbdInteractiveAuthentication yes$/KbdInteractiveAuthentication no/' \\\n-e 's/^#X11Forwarding no$/X11Forwarding no/' /etc/ssh/._cfg0000_sshd_config &amp;&amp; \\\ngrep -q \"^PasswordAuthentication no$\" /etc/ssh/._cfg0000_sshd_config &amp;&amp; \\\necho \"\nAuthenticationMethods publickey\n\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org\nHostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com\nMACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com\n\nAllowUsers david\" &gt;&gt; /etc/ssh/._cfg0000_sshd_config &amp;&amp; \\\nssh-keygen -A &amp;&amp; \\\nsshd -t &amp;&amp; \\\nsystemctl --no-reload enable sshd.service &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Note</p> <p>For \"dispatch-conf\" to work for the following change in \"/usr/local/sbin\", you need to execute the following command after creation of \"/usr/local/sbin/._cfg0000_firewall.nft\":</p> <pre><code>dispatch-conf /usr/local/sbin\n</code></pre> <p>Open the SSH port:</p> <pre><code>rsync -a /usr/local/sbin/firewall.nft /usr/local/sbin/._cfg0000_firewall.nft &amp;&amp; \\\nsed -i 's/^#\\([[:space:]]*\\)tcp dport 50022 accept$/\\1tcp dport 50022 accept/' /usr/local/sbin/._cfg0000_firewall.nft &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Write down fingerprints to double check upon initial SSH connection to the Gentoo Linux machine:</p> <pre><code>find /etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\;\n</code></pre>"},{"location":"unified_kernel_image/","title":"9. Unified Kernel Image","text":""},{"location":"unified_kernel_image/#91-non-gentoo-images","title":"9.1. non-Gentoo Images","text":"<p>Install <code>sys-boot/efibootmgr</code>:</p> <pre><code>emerge -at sys-boot/efibootmgr\n</code></pre> <p>Setup ESP(s):</p> <pre><code>while read -r my_esp; do\n# install the EFI boot manager:\n# https://wiki.archlinux.org/title/systemd-boot#Installing_the_EFI_boot_manager\nbootctl --esp-path=\"/boot/${my_esp}\" install &amp;&amp; \\\n\n# create the boot entry\n# https://wiki.gentoo.org/wiki/Efibootmgr#Creating_a_boot_entry\nefibootmgr --create --disk \"/dev/$(lsblk -ndo pkname \"$(readlink -f \"/${my_esp/efi/devEfi}\")\")\" --part 1 --label \"gentoo31415efi ${my_esp}\" --loader '\\EFI\\systemd\\systemd-bootx64.efi' &amp;&amp; \\\n\n# setup systemd-boot\n# https://wiki.gentoo.org/wiki/Systemd-boot#loader.conf\necho -e \"timeout 5\\neditor no\" &gt; \"/boot/${my_esp}/loader/loader.conf\" &amp;&amp; \\\n\n# move the precreated EFI binary of the rescue system into ESP\nmv \"/boot/${my_esp}/systemrescuecd.efi\" \"/boot/${my_esp}/EFI/Linux/\" &amp;&amp; \\\n\n# secure boot sign EFI binaries\nsbctl sign \"/boot/${my_esp}/EFI/systemd/systemd-bootx64.efi\" &amp;&amp; \\\nsbctl sign \"/boot/${my_esp}/EFI/BOOT/BOOTX64.EFI\" &amp;&amp; \\\nsbctl sign \"/boot/${my_esp}/EFI/Linux/systemrescuecd.efi\" &amp;&amp; \\\n\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\ndone &lt; &lt;(grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/boot/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab)\n</code></pre>"},{"location":"unified_kernel_image/#92-cpu-microcode","title":"9.2. CPU Microcode","text":"<p>Microcode updates are not necessary for virtual machines. On bare-metal, however, install \"sys-firmware/intel-microcode\" for Intel CPUs or follow the Gentoo wiki instruction to update the microcode on AMD systems.</p> <pre><code>! grep -q -w \"hypervisor\" &lt;(grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo) &amp;&amp; \\\ngrep -q \"^vendor_id[[:space:]]*:[[:space:]]*GenuineIntel$\" /proc/cpuinfo &amp;&amp; \\\necho \"sys-firmware/intel-microcode intel-ucode\" &gt;&gt; /etc/portage/package.license &amp;&amp; \\\necho \"sys-firmware/intel-microcode hostonly\" &gt;&gt; /etc/portage/package.use/main &amp;&amp; \\\nemerge -at sys-firmware/intel-microcode &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre>"},{"location":"unified_kernel_image/#93-portage-hooks","title":"9.3. Portage Hooks","text":"<p>Setup portage hooks (wiki entry) that take care of unified kernel image creation and secure boot signing:</p> <pre><code>mkdir -p /etc/portage/env/sys-apps /etc/portage/env/sys-kernel &amp;&amp; \\\nrsync -a --numeric-ids --chown=0:0 --chmod=u=rw,go=r /root/portage_hook_kernel /etc/portage/env/sys-kernel/gentoo-kernel &amp;&amp; \\\nrsync -a --numeric-ids --chown=0:0 --chmod=u=rw,go=r /root/portage_hook_kernel /etc/portage/env/sys-kernel/gentoo-kernel-bin &amp;&amp; \\\nrm -f /root/portage_hook_kernel &amp;&amp; \\\necho 'if [[ ${EBUILD_PHASE} == postinst ]]; then\n    while read -r my_esp; do\n        bootctl --esp-path=\"/boot/${my_esp}\" --no-variables --graceful update &amp;&amp; \\\n        sbctl sign \"/boot/${my_esp}/EFI/systemd/systemd-bootx64.efi\" &amp;&amp; \\\n        sbctl sign \"/boot/${my_esp}/EFI/BOOT/BOOTX64.EFI\"\n\n        if [[ $? -ne 0 ]]; then\ncat &lt;&lt;'\\''EOF'\\'' &gt;&amp;2\n\n  ___________________________\n&lt; Failed to Secure Boot sign! &gt;\n  ---------------------------\n         \\   ^__^ \n          \\  (oo)\\_______\n             (__)\\       )\\/\\\n                 ||----w |\n                 ||     ||\n\nEOF\n        fi\n    done &lt; &lt;(grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/boot/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab)\nfi' &gt; /etc/portage/env/sys-apps/systemd &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre>"},{"location":"unified_kernel_image/#94-dracut","title":"9.4. Dracut","text":"<p>Setup sys-kernel/dracut. If you don't wear tin foil hats , you may want to change the line \"mitigations=auto,nosmt\" below (copy&amp;paste one after the other):</p> <pre><code>emerge -at app-crypt/sbsigntools sys-kernel/dracut\n\nsystem_uuid=\"$(blkid -s UUID -o value /mapperSystem)\"\nmy_crypt_root=\"$(blkid -s UUID -o value /devSystem* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s -)\"\nmy_crypt_swap=\"$(blkid -s UUID -o value /devSwap* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s -)\"\n\nunset my_systemd_cryptenroll\n\n# If you intend to use systemd-cryptenroll, define this variable:\n# my_systemd_cryptenroll=\",tpm2-device=auto\"\n\necho \"\n# make a generic image, but use custom kernel command-line parameters\nhostonly=no\nhostonly_cmdline=yes\n\nuse_fstab=yes\ncompress=xz\nshow_modules=yes\n\n# create an unified kernel image\nuefi=yes\n\n# integrate microcode updates\nearly_microcode=yes\n\n# point to the correct UEFI stub loader\nuefi_stub=/usr/lib/systemd/boot/efi/linuxx64.efi.stub\n\n# set files used to secure boot sign\nuefi_secureboot_cert=/usr/share/secureboot/keys/db/db.pem\nuefi_secureboot_key=/usr/share/secureboot/keys/db/db.key\n\n# kernel command-line parameters\nCMDLINE=(\n  ro\n  root=UUID=${system_uuid}\n${my_crypt_root}\n${my_crypt_swap}\n  rd.luks.options=password-echo=no${my_systemd_cryptenroll}\n  rootfstype=btrfs\n  rootflags=subvol=@root\n  mitigations=auto,nosmt\n)\nkernel_cmdline=\\\"\\${CMDLINE[*]}\\\"\nunset CMDLINE\" &gt;&gt; /etc/dracut.conf\n</code></pre>"},{"location":"unified_kernel_image/#95-packages","title":"9.5. Packages","text":"<p>(Optional) Use LTS (longterm) kernels:</p> <pre><code>echo \"\\\n&gt;=sys-fs/btrfs-progs-6.2\n&gt;=sys-kernel/gentoo-kernel-6.2\n&gt;=sys-kernel/gentoo-kernel-bin-6.2\n&gt;=sys-kernel/linux-headers-6.2\n&gt;=virtual/dist-kernel-6.2\" &gt;&gt; /etc/portage/package.mask/main\n</code></pre> <p>Configure packages required for booting:</p> <pre><code>echo \"sys-fs/btrfs-progs ~amd64\nsys-kernel/gentoo-kernel ~amd64\nsys-kernel/gentoo-kernel-bin ~amd64\nsys-kernel/linux-headers ~amd64\nvirtual/dist-kernel ~amd64\" &gt;&gt; /etc/portage/package.accept_keywords/main &amp;&amp; \\\n\n# I prefer to create a \"fresh\" btrfs FS instead of converting\n# reiserfs and ext2/3/4 to btrfs.\necho \"sys-fs/btrfs-progs -convert\" &gt;&gt; /etc/portage/package.use/main &amp;&amp; \\\n\n# Dracut will take care of initramfs creation.\necho \"sys-kernel/gentoo-kernel -initramfs\" &gt;&gt; /etc/portage/package.use/main &amp;&amp; \\\necho \"sys-kernel/gentoo-kernel-bin -initramfs\" &gt;&gt; /etc/portage/package.use/main &amp;&amp; \\\n\n# Accept required licenses.\necho \"sys-kernel/linux-firmware linux-fw-redistributable no-source-code\" &gt;&gt; /etc/portage/package.license\n</code></pre>"},{"location":"unified_kernel_image/#96-kernel-installation","title":"9.6. Kernel Installation","text":"Kernel Upgrade And Old Kernel Cleanup <p>After a kernel upgrade and system reboot, an <code>emerge --depclean</code> will leave certain files and folders on the system which you cannot delete with eclean-kernel:</p> <pre><code>\u276f sudo -i eclean-kernel -n 1\neclean-kernel has met the following issue:\n\n  SystemError('No vmlinuz found. This seems ridiculous, aborting.')\n\nIf you believe that the mentioned issue is a bug, please report it\nto https://github.com/mgorny/eclean-kernel/issues. If possible,\nplease attach the output of 'eclean-kernel --list-kernels' and your\nregular eclean-kernel call with additional '--debug' argument.\n</code></pre> <p>In following example, you have to delete the 5.15.87 kernel files and folders manually:</p> <pre><code>\u276f ls -1 /boot/efi*/EFI/Linux/ /usr/src/ /lib/modules/\n/boot/efia/EFI/Linux/:\ngentoo-5.15.87-gentoo-dist-hardened.efi\ngentoo-5.15.88-gentoo-dist-hardened.efi\nsystemrescuecd.efi\n\n/boot/efib/EFI/Linux/:\ngentoo-5.15.87-gentoo-dist-hardened.efi\ngentoo-5.15.88-gentoo-dist-hardened.efi\nsystemrescuecd.efi\n\n/lib/modules/:\n5.15.87-gentoo-dist-hardened/\n5.15.88-gentoo-dist-hardened/\n\n/usr/src/:\nlinux@\nlinux-5.15.88-gentoo-dist-hardened/\n</code></pre> <p>Install required packages:</p> <pre><code>if [[ -e /devSwapb ]]; then\nemerge -at sys-fs/btrfs-progs sys-fs/mdadm sys-kernel/linux-firmware &amp;&amp; \\\nrsync -a /etc/mdadm.conf /etc/._cfg0000_mdadm.conf &amp;&amp; \\\necho \"\" &gt;&gt; /etc/._cfg0000_mdadm.conf &amp;&amp; \\\nmdadm --detail --scan &gt;&gt; /etc/._cfg0000_mdadm.conf &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\nelse\nemerge -at sys-fs/btrfs-progs sys-kernel/linux-firmware &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\nfi\n</code></pre> <p>For kernel installation, you have two reasonable choices depending on whether you use a hardened profile or not:</p> hardened profilenon-hardened profile <pre><code># This package makes use of \"hardened\" useflag.\nemerge -at sys-kernel/gentoo-kernel\n</code></pre> <pre><code>emerge -at sys-kernel/gentoo-kernel-bin\n</code></pre>"},{"location":"virtual_server/","title":"13. Virtual Server (optional)","text":"<p>Note</p> <p>I connect to libvirtd via TCP and tunnel the connection over SSH, because I want to use my SSH key which is secured on a hardware token, and \"virt-manager\" doesn't seem to support it directly. Thus, I can't use s.th. like <code>qemu+ssh://david@192.168.10.3:50022/system</code>.</p> <p>Tip</p> <p>You might want to consider having \"/var/lib/libvirt\" on a separate btrfs subvolume.</p> <p>I prefer managing installation media downloads and network myself:</p> <pre><code>echo \"\\\napp-emulation/libvirt -virt-network\napp-emulation/qemu -curl\" &gt;&gt; /etc/portage/package.use/main &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Setup the internal network on the VM host:</p> <pre><code>echo '[NetDev]\nName=br0\nKind=bridge' &gt; /etc/systemd/network/br0.netdev &amp;&amp; \\\necho '[Match]\nName=br0\n\n[Network]\nAddress=192.168.110.1/24\nConfigureWithoutCarrier=true' &gt; /etc/systemd/network/br0.network &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>Install \"app-emulation/libvirt\":</p> <pre><code>emerge -av app-emulation/libvirt\n</code></pre> <p>Enable libvirt's TCP transport:</p> <pre><code>systemctl enable libvirtd-tcp.socket &amp;&amp; \\\nsystemctl enable libvirt-guests.service &amp;&amp; \\\necho -e \"\\e[1;32mSUCCESS\\e[0m\"\n</code></pre> <p>After the start of \"libvirtd-tcp.socket\", systemd should listen on TCP port 16509:</p> <pre><code>\u276f lsof -nP -iTCP -sTCP:LISTEN\nCOMMAND    PID            USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nsystemd      1            root   48u  IPv6  50548      0t0  TCP *:16509 (LISTEN)\nsystemd-r 1063 systemd-resolve   12u  IPv4  18306      0t0  TCP *:5355 (LISTEN)\nsystemd-r 1063 systemd-resolve   14u  IPv6  18309      0t0  TCP *:5355 (LISTEN)\nsystemd-r 1063 systemd-resolve   18u  IPv4  18313      0t0  TCP 127.0.0.53:53 (LISTEN)\nsystemd-r 1063 systemd-resolve   20u  IPv4  18315      0t0  TCP 127.0.0.54:53 (LISTEN)\nsshd      1096            root    3u  IPv4  18400      0t0  TCP *:50022 (LISTEN)\nsshd      1096            root    4u  IPv6  18401      0t0  TCP *:50022 (LISTEN)\n</code></pre> <p>Tunnel the connection via SSH with:</p> <pre><code>ssh -NL 56509:127.0.0.1:16509 -p 50022 david@192.168.10.3\n</code></pre> <p>Add this connection in \"virt-manager\" on the client side:</p> <pre><code>qemu+tcp://127.0.0.1:56509/system\n</code></pre>"}]}