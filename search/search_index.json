{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"1.1. Disclaimer \u00b6 Warning Don't blindly copy&paste the commands! Understand what you are going to do and adjust commands if required! I point this out, even though it should go without saying... System Requirements The installation guide builds heavily on Secure Boot and requires TPM 2.0 for Measured Boot . Make sure that the system is in Setup Mode in order to be able to add your custom Secure Boot keys. You can, however, boot without Setup Mode and import the Secure Boot keys later on depending on the hardware in use. For this, you can follow the instructions in section 8.3. Secure Boot Setup . 1.2. Technologies \u00b6 The following installation guide results in a system that is/uses: Secure Boot : EFI binary/binaries in ESP(s) are Secure Boot signed. Measured Boot : systemd-cryptenroll or clevis is used to check the system for manipulations via TPM2 PCRs (Platform Configuration Registers). Fully encrypted : Except ESP(s), all partitions are LUKS encrypted. RAID : If the number of disks is >=2, mdadm and Btrfs based RAID are used for all partitions other than ESP(s). Rescue system based on a customised SystemRescueCD that provides the chroot.sh script to conveniently chroot into your Gentoo installation. 1.3. SSH Connectivity \u00b6 After completion of this installation guide, SSH connections will be (optionally) possible via SSH public key authentication to the: Gentoo Linux system: ssh -p 50022 david@<IP address> Rescue system: ssh -p 50023 root@<IP address> Both boot options are available in the boot menu. 1.4. Disk Layout \u00b6 ESPs each with their own EFI entry are created one for each disk. Except for ESP, Btrfs/mdadm RAID 1 is used for all other partitions with RAID 5, RAID 6 and RAID 10 being further options for swap . Single disk: PC\u2215Laptop \u2514\u2500\u2500 \u2215dev\u2215sda \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 2. LUKS \u2502 \u2514\u2500\u2500 Btrfs (single) \u2502 \u2514\u2500\u2500 rescue \u251c\u2500\u2500 3. LUKS \u2502 \u2514\u2500\u2500 SWAP \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 Btrfs (single) \u2514\u2500\u2500 subvolumes \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @home \u251c\u2500\u2500 @ebuilds \u2514\u2500\u2500 @root Two disks: PC\u2215Laptop\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500 \u2215dev\u2215sda \u2514\u2500\u2500 \u2215dev\u2215sdb \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u2502 \u2514\u2500\u2500 MDADM RAID 1 \u2502 \u2514\u2500\u2500 MDADM RAID 1 \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 Btrfs raid1 \u2514\u2500\u2500 Btrfs raid1 \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u2514\u2500\u2500 @root \u2514\u2500\u2500 @root Three disks: PC\u2215Laptop\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500 \u2215dev\u2215sda \u2514\u2500\u2500 \u2215dev\u2215sdb \u2514\u2500\u2500 \u2215dev\u2215sdc \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u2502 \u2514\u2500\u2500 MDADM RAID 1|5 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5 \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 Btrfs raid1c3 \u2514\u2500\u2500 Btrfs raid1c3 \u2514\u2500\u2500 Btrfs raid1c3 \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u2514\u2500\u2500 @root \u2514\u2500\u2500 @root \u2514\u2500\u2500 @root Four disks: PC\u2215Laptop\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500 \u2215dev\u2215sda \u2514\u2500\u2500 \u2215dev\u2215sdb \u2514\u2500\u2500 \u2215dev\u2215sdc \u2514\u2500\u2500 \u2215dev\u2215sdd \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u2502 \u2514\u2500\u2500 MDADM RAID 1|5|6|10 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5|6|10 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5|6|10 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5|6|10 \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 Btrfs raid1c4 \u2514\u2500\u2500 Btrfs raid1c4 \u2514\u2500\u2500 Btrfs raid1c4 \u2514\u2500\u2500 Btrfs raid1c4 \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u2514\u2500\u2500 @root \u2514\u2500\u2500 @root \u2514\u2500\u2500 @root \u2514\u2500\u2500 @root More disks can be used (see: man mkfs.btrfs | sed -n '/^PROFILES$/,/^[[:space:]]*\u2514/p' ). RAID 10 is only available to setups with an even number of disks. 1.5. LUKS Key Slots \u00b6 On the rescue partition, LUKS key slots are set as follows: 0: Rescue password On all other LUKS volumes, LUKS key slots are set as follows: 0: Fallback password for emergency 1: Measured Boot Option A: TPM 2.0 with optional pin to unlock with systemd-cryptenroll Option B: Shamir Secret Sharing combining TPM2 and Tang pin ( Tang project ) to automatically unlock with Clevis The following steps are basically those in the official Gentoo Linux installation handbook with some customisations added.","title":"1. Introduction"},{"location":"#11-disclaimer","text":"Warning Don't blindly copy&paste the commands! Understand what you are going to do and adjust commands if required! I point this out, even though it should go without saying... System Requirements The installation guide builds heavily on Secure Boot and requires TPM 2.0 for Measured Boot . Make sure that the system is in Setup Mode in order to be able to add your custom Secure Boot keys. You can, however, boot without Setup Mode and import the Secure Boot keys later on depending on the hardware in use. For this, you can follow the instructions in section 8.3. Secure Boot Setup .","title":"1.1. Disclaimer"},{"location":"#12-technologies","text":"The following installation guide results in a system that is/uses: Secure Boot : EFI binary/binaries in ESP(s) are Secure Boot signed. Measured Boot : systemd-cryptenroll or clevis is used to check the system for manipulations via TPM2 PCRs (Platform Configuration Registers). Fully encrypted : Except ESP(s), all partitions are LUKS encrypted. RAID : If the number of disks is >=2, mdadm and Btrfs based RAID are used for all partitions other than ESP(s). Rescue system based on a customised SystemRescueCD that provides the chroot.sh script to conveniently chroot into your Gentoo installation.","title":"1.2. Technologies"},{"location":"#13-ssh-connectivity","text":"After completion of this installation guide, SSH connections will be (optionally) possible via SSH public key authentication to the: Gentoo Linux system: ssh -p 50022 david@<IP address> Rescue system: ssh -p 50023 root@<IP address> Both boot options are available in the boot menu.","title":"1.3. SSH Connectivity"},{"location":"#14-disk-layout","text":"ESPs each with their own EFI entry are created one for each disk. Except for ESP, Btrfs/mdadm RAID 1 is used for all other partitions with RAID 5, RAID 6 and RAID 10 being further options for swap . Single disk: PC\u2215Laptop \u2514\u2500\u2500 \u2215dev\u2215sda \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 2. LUKS \u2502 \u2514\u2500\u2500 Btrfs (single) \u2502 \u2514\u2500\u2500 rescue \u251c\u2500\u2500 3. LUKS \u2502 \u2514\u2500\u2500 SWAP \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 Btrfs (single) \u2514\u2500\u2500 subvolumes \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @home \u251c\u2500\u2500 @ebuilds \u2514\u2500\u2500 @root Two disks: PC\u2215Laptop\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500 \u2215dev\u2215sda \u2514\u2500\u2500 \u2215dev\u2215sdb \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u2502 \u2514\u2500\u2500 MDADM RAID 1 \u2502 \u2514\u2500\u2500 MDADM RAID 1 \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 Btrfs raid1 \u2514\u2500\u2500 Btrfs raid1 \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u2514\u2500\u2500 @root \u2514\u2500\u2500 @root Three disks: PC\u2215Laptop\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500 \u2215dev\u2215sda \u2514\u2500\u2500 \u2215dev\u2215sdb \u2514\u2500\u2500 \u2215dev\u2215sdc \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u2502 \u2514\u2500\u2500 MDADM RAID 1|5 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5 \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 Btrfs raid1c3 \u2514\u2500\u2500 Btrfs raid1c3 \u2514\u2500\u2500 Btrfs raid1c3 \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u2514\u2500\u2500 @root \u2514\u2500\u2500 @root \u2514\u2500\u2500 @root Four disks: PC\u2215Laptop\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2514\u2500\u2500 \u2215dev\u2215sda \u2514\u2500\u2500 \u2215dev\u2215sdb \u2514\u2500\u2500 \u2215dev\u2215sdc \u2514\u2500\u2500 \u2215dev\u2215sdd \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 1. EFI System Partition \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u251c\u2500\u2500 2. MDADM RAID 1 \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 LUKS \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 Btrfs \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u2502 \u2514\u2500\u2500 rescue \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u251c\u2500\u2500 3. LUKS \u2502 \u2514\u2500\u2500 MDADM RAID 1|5|6|10 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5|6|10 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5|6|10 \u2502 \u2514\u2500\u2500 MDADM RAID 1|5|6|10 \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2502 \u2514\u2500\u2500 SWAP \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 4. LUKS (\"system\" partition) \u2514\u2500\u2500 Btrfs raid1c4 \u2514\u2500\u2500 Btrfs raid1c4 \u2514\u2500\u2500 Btrfs raid1c4 \u2514\u2500\u2500 Btrfs raid1c4 \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u2514\u2500\u2500 subvolume \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @binpkgs \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @distfiles \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @home \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u251c\u2500\u2500 @ebuilds \u2514\u2500\u2500 @root \u2514\u2500\u2500 @root \u2514\u2500\u2500 @root \u2514\u2500\u2500 @root More disks can be used (see: man mkfs.btrfs | sed -n '/^PROFILES$/,/^[[:space:]]*\u2514/p' ). RAID 10 is only available to setups with an even number of disks.","title":"1.4. Disk Layout"},{"location":"#15-luks-key-slots","text":"On the rescue partition, LUKS key slots are set as follows: 0: Rescue password On all other LUKS volumes, LUKS key slots are set as follows: 0: Fallback password for emergency 1: Measured Boot Option A: TPM 2.0 with optional pin to unlock with systemd-cryptenroll Option B: Shamir Secret Sharing combining TPM2 and Tang pin ( Tang project ) to automatically unlock with Clevis The following steps are basically those in the official Gentoo Linux installation handbook with some customisations added.","title":"1.5. LUKS Key Slots"},{"location":"chrooting/","text":"Set resolv.conf: cp --dereference /etc/resolv.conf /mnt/gentoo/etc/ Set .bashrc etc.: rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /mnt/gentoo/etc/skel/.bash* /mnt/gentoo/root/ && \\ rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rwX,go = /mnt/gentoo/etc/skel/.ssh /mnt/gentoo/root/ && \\ echo -e 'alias cp=\"cp -i\"\\nalias mv=\"mv -i\"\\nalias rm=\"rm -i\"' >> /mnt/gentoo/root/.bash_aliases && \\ cat <<'EOF' >> /mnt/gentoo/root/.bashrc; echo $? source \"${HOME}/.bash_aliases\" # Raise an alert if something is wrong with btrfs or mdadm if { [[ -f /proc/mdstat ]] && grep -q \"\\[[U_]*_[U_]*\\]\" /proc/mdstat; } || \\ [[ $(find /sys/fs/btrfs -type f -name \"error_stats\" -exec awk '{sum += $2} END {print sum}' {} +) -ne 0 ]]; then echo ' _________________ < Something smells! > ----------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || ' fi EOF Set locale: echo \"C.UTF-8 UTF-8 de_DE.UTF-8 UTF-8 en_US.UTF-8 UTF-8\" > /mnt/gentoo/etc/locale.gen && \\ echo 'LANG=\"de_DE.UTF-8\" LC_COLLATE=\"C.UTF-8\" LC_MESSAGES=\"en_US.UTF-8\"' > /mnt/gentoo/etc/env.d/02locale && \\ chroot /mnt/gentoo /bin/bash -c \"source /etc/profile && locale-gen\" ; echo $? Set MAKEOPTS : ram_size = \" $( dmidecode -t memory | grep -Pio \"^[[:space:]]Size:[[:space:]]+\\K[0-9]*(?=[[:space:]]*GB $ )\" | paste -d '+' -s - | bc ) \" && \\ number_cores = \" $( nproc --all ) \" && \\ [[ $(( number_cores*2 )) -le ${ ram_size } ]] && jobs = \" ${ number_cores } \" || jobs = \" $( bc <<< \" ${ ram_size } / 2\" ) \" && \\ cat <<EOF >> /mnt/gentoo/etc/portage/make.conf; echo $? MAKEOPTS=\"-j${jobs}\" EOF Chroot (copy&paste one after the other): chroot /mnt/gentoo /bin/bash source /etc/profile su - env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" Application of configuration changes starting with chapter 6 Execute dispatch-conf after every code block where a file with prefix ._cfg0000_ has been created.","title":"5. Chrooting"},{"location":"cleanup_and_reboot/","text":"Setup network (copy&paste one after the other): cat <<EOF >> /etc/systemd/network/50-static.network [Match] Name=enp1s0 [Network] Address=192.168.10.2/24 Gateway=192.168.10.1 DNS=192.168.10.1 # https://wiki.archlinux.org/title/IPv6#systemd-networkd_3 LinkLocalAddressing=no IPv6AcceptRA=no EOF systemctl --no-reload enable systemd-networkd.service ln -snf /run/systemd/resolve/resolv.conf /etc/resolv.conf systemctl --no-reload enable systemd-resolved.service stage3 and dev* files: rm -fv /stage3-* /portage-latest.tar.xz* /devEfi* /devRescue /devSystem* /devSwap* /mapperRescue /mapperSwap /mapperSystem ; echo $? exit and reboot (copy&paste one after the other): exit exit exit cd umount -l /mnt/gentoo/dev { /shm,/pts, } umount -R /mnt/gentoo reboot","title":"7. Cleanup And Reboot"},{"location":"disk_setup/","text":"3.1. Wiping Disks \u00b6 disk.sh expects the disks, where you want to install Gentoo Linux on, to be completely empty. If you use SSD(s) I recommend a Secure Erase . Alternatively, you can do a fast wipe the following way given that no LUKS, MDADM, SWAP etc. device is open on the disk: # Change disk name to the one you want to wipe disk = \"/dev/sda\" lsblk -npo kname \" ${ disk } \" | grep \"^ ${ disk } \" | sort -r | while read -r i ; do wipefs -a \" $i \" ; done Tip If you have confidential data stored in a non-encrypted way and don't want to risk the data landing in foreign hands I recommend the use of something like dd , e.g. https://wiki.archlinux.org/title/Securely_wipe_disk ! 3.2. Partitioning And Formating \u00b6 Prepare the disks (copy&paste one after the other): bash /tmp/disk.sh -h # disable bash history set +o history # adjust to your liking bash /tmp/disk.sh -f fallbackfallback -r rescuerescue -d \"/dev/sda /dev/sdb etc.\" -s 12 # enable bash history set -o history disk.sh creates user \"meh\" which will be used later on to act as non-root. 3.3. /mnt/gentoo Content \u00b6 Result of a single disk setup: \u27a4 tree -a /mnt/gentoo/ /mnt/gentoo/ \u251c\u2500\u2500 devEfia -> /dev/sda1 \u251c\u2500\u2500 devRescue -> /dev/sda2 \u251c\u2500\u2500 devSwapa -> /dev/sda3 \u251c\u2500\u2500 devSystema -> /dev/sda4 \u251c\u2500\u2500 mapperRescue -> /dev/mapper/sda2 \u251c\u2500\u2500 mapperSwap -> /dev/mapper/sda3 \u251c\u2500\u2500 mapperSystem -> /dev/mapper/sda4 \u251c\u2500\u2500 portage-latest.tar.xz \u251c\u2500\u2500 portage-latest.tar.xz.gpgsig \u251c\u2500\u2500 stage3-amd64-systemd-20220529T170531Z.tar.xz \u2514\u2500\u2500 stage3-amd64-systemd-20220529T170531Z.tar.xz.asc 0 directories, 13 files Result of the four disk setup: \u27a4 tree -a /mnt/gentoo/ /mnt/gentoo/ \u251c\u2500\u2500 devEfia -> /dev/sda1 \u251c\u2500\u2500 devEfib -> /dev/sdb1 \u251c\u2500\u2500 devEfic -> /dev/sdc1 \u251c\u2500\u2500 devEfid -> /dev/sdd1 \u251c\u2500\u2500 devRescue -> /dev/md0 \u251c\u2500\u2500 devSwapa -> /dev/sda3 \u251c\u2500\u2500 devSwapb -> /dev/sdb3 \u251c\u2500\u2500 devSwapc -> /dev/sdc3 \u251c\u2500\u2500 devSwapd -> /dev/sdd3 \u251c\u2500\u2500 devSystema -> /dev/sda4 \u251c\u2500\u2500 devSystemb -> /dev/sdb4 \u251c\u2500\u2500 devSystemc -> /dev/sdc4 \u251c\u2500\u2500 devSystemd -> /dev/sdd4 \u251c\u2500\u2500 mapperRescue -> /dev/mapper/md0 \u251c\u2500\u2500 mapperSwap -> /dev/md1 \u251c\u2500\u2500 mapperSystem -> /dev/mapper/sda4 \u251c\u2500\u2500 portage-latest.tar.xz \u251c\u2500\u2500 portage-latest.tar.xz.gpgsig \u251c\u2500\u2500 stage3-amd64-systemd-20220529T170531Z.tar.xz \u2514\u2500\u2500 stage3-amd64-systemd-20220529T170531Z.tar.xz.asc 0 directories, 25 files 3.4. Tarball Extraction \u00b6 Info Current stage3-amd64-systemd-*.tar.xz is downloaded by default. Download and extract your stage3 flavour if it fits your needs more, but choose a systemd flavour of stage3, because this is required later on. Check the official handbook for the steps to be taken, especially in regards to verification. Extract stage3 tarball and copy firewall.nft : tar -C /mnt/gentoo/ -xpvf /mnt/gentoo/stage3-*.tar.xz --xattrs-include = '*.*' --numeric-owner && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rwx,go = r /tmp/firewall.nft /mnt/gentoo/usr/local/sbin/ && \\ rsync -a /tmp/ { portage_hook_kernel,localrepo } /mnt/gentoo/root/ && \\ mkdir -p /mnt/gentoo/etc/gentoo-installation ; echo $? Extract portage tarball: mkdir /mnt/gentoo/var/db/repos/gentoo && \\ touch /mnt/gentoo/var/db/repos/gentoo/.keep && \\ mount -o noatime,subvol = @ebuilds /mnt/gentoo/mapperSystem /mnt/gentoo/var/db/repos/gentoo && \\ tar --transform 's/^portage/gentoo/' -C /mnt/gentoo/var/db/repos/ -xvpJf /mnt/gentoo/portage-latest.tar.xz ; echo $? 3.5. Mounting \u00b6 mount -t tmpfs -o noatime,nodev,nosuid,mode = 1777 ,uid = root,gid = root tmpfs /mnt/gentoo/tmp && \\ mount --types proc /proc /mnt/gentoo/proc && \\ mount --rbind /sys /mnt/gentoo/sys && \\ mount --make-rslave /mnt/gentoo/sys && \\ mount --rbind /dev /mnt/gentoo/dev && \\ mount --make-rslave /mnt/gentoo/dev && \\ mount --bind /run /mnt/gentoo/run && \\ mount --make-slave /mnt/gentoo/run && \\ mount -o noatime,subvol = @home /mnt/gentoo/mapperSystem /mnt/gentoo/home && \\ touch /mnt/gentoo/var/cache/binpkgs/.keep && \\ mount -o noatime,subvol = @binpkgs /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/binpkgs && \\ touch /mnt/gentoo/var/cache/distfiles/.keep && \\ mount -o noatime,subvol = @distfiles /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/distfiles ; echo $?","title":"3. Disk Setup"},{"location":"disk_setup/#31-wiping-disks","text":"disk.sh expects the disks, where you want to install Gentoo Linux on, to be completely empty. If you use SSD(s) I recommend a Secure Erase . Alternatively, you can do a fast wipe the following way given that no LUKS, MDADM, SWAP etc. device is open on the disk: # Change disk name to the one you want to wipe disk = \"/dev/sda\" lsblk -npo kname \" ${ disk } \" | grep \"^ ${ disk } \" | sort -r | while read -r i ; do wipefs -a \" $i \" ; done Tip If you have confidential data stored in a non-encrypted way and don't want to risk the data landing in foreign hands I recommend the use of something like dd , e.g. https://wiki.archlinux.org/title/Securely_wipe_disk !","title":"3.1. Wiping Disks"},{"location":"disk_setup/#32-partitioning-and-formating","text":"Prepare the disks (copy&paste one after the other): bash /tmp/disk.sh -h # disable bash history set +o history # adjust to your liking bash /tmp/disk.sh -f fallbackfallback -r rescuerescue -d \"/dev/sda /dev/sdb etc.\" -s 12 # enable bash history set -o history disk.sh creates user \"meh\" which will be used later on to act as non-root.","title":"3.2. Partitioning And Formating"},{"location":"disk_setup/#33-mntgentoo-content","text":"Result of a single disk setup: \u27a4 tree -a /mnt/gentoo/ /mnt/gentoo/ \u251c\u2500\u2500 devEfia -> /dev/sda1 \u251c\u2500\u2500 devRescue -> /dev/sda2 \u251c\u2500\u2500 devSwapa -> /dev/sda3 \u251c\u2500\u2500 devSystema -> /dev/sda4 \u251c\u2500\u2500 mapperRescue -> /dev/mapper/sda2 \u251c\u2500\u2500 mapperSwap -> /dev/mapper/sda3 \u251c\u2500\u2500 mapperSystem -> /dev/mapper/sda4 \u251c\u2500\u2500 portage-latest.tar.xz \u251c\u2500\u2500 portage-latest.tar.xz.gpgsig \u251c\u2500\u2500 stage3-amd64-systemd-20220529T170531Z.tar.xz \u2514\u2500\u2500 stage3-amd64-systemd-20220529T170531Z.tar.xz.asc 0 directories, 13 files Result of the four disk setup: \u27a4 tree -a /mnt/gentoo/ /mnt/gentoo/ \u251c\u2500\u2500 devEfia -> /dev/sda1 \u251c\u2500\u2500 devEfib -> /dev/sdb1 \u251c\u2500\u2500 devEfic -> /dev/sdc1 \u251c\u2500\u2500 devEfid -> /dev/sdd1 \u251c\u2500\u2500 devRescue -> /dev/md0 \u251c\u2500\u2500 devSwapa -> /dev/sda3 \u251c\u2500\u2500 devSwapb -> /dev/sdb3 \u251c\u2500\u2500 devSwapc -> /dev/sdc3 \u251c\u2500\u2500 devSwapd -> /dev/sdd3 \u251c\u2500\u2500 devSystema -> /dev/sda4 \u251c\u2500\u2500 devSystemb -> /dev/sdb4 \u251c\u2500\u2500 devSystemc -> /dev/sdc4 \u251c\u2500\u2500 devSystemd -> /dev/sdd4 \u251c\u2500\u2500 mapperRescue -> /dev/mapper/md0 \u251c\u2500\u2500 mapperSwap -> /dev/md1 \u251c\u2500\u2500 mapperSystem -> /dev/mapper/sda4 \u251c\u2500\u2500 portage-latest.tar.xz \u251c\u2500\u2500 portage-latest.tar.xz.gpgsig \u251c\u2500\u2500 stage3-amd64-systemd-20220529T170531Z.tar.xz \u2514\u2500\u2500 stage3-amd64-systemd-20220529T170531Z.tar.xz.asc 0 directories, 25 files","title":"3.3. /mnt/gentoo Content"},{"location":"disk_setup/#34-tarball-extraction","text":"Info Current stage3-amd64-systemd-*.tar.xz is downloaded by default. Download and extract your stage3 flavour if it fits your needs more, but choose a systemd flavour of stage3, because this is required later on. Check the official handbook for the steps to be taken, especially in regards to verification. Extract stage3 tarball and copy firewall.nft : tar -C /mnt/gentoo/ -xpvf /mnt/gentoo/stage3-*.tar.xz --xattrs-include = '*.*' --numeric-owner && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rwx,go = r /tmp/firewall.nft /mnt/gentoo/usr/local/sbin/ && \\ rsync -a /tmp/ { portage_hook_kernel,localrepo } /mnt/gentoo/root/ && \\ mkdir -p /mnt/gentoo/etc/gentoo-installation ; echo $? Extract portage tarball: mkdir /mnt/gentoo/var/db/repos/gentoo && \\ touch /mnt/gentoo/var/db/repos/gentoo/.keep && \\ mount -o noatime,subvol = @ebuilds /mnt/gentoo/mapperSystem /mnt/gentoo/var/db/repos/gentoo && \\ tar --transform 's/^portage/gentoo/' -C /mnt/gentoo/var/db/repos/ -xvpJf /mnt/gentoo/portage-latest.tar.xz ; echo $?","title":"3.4. Tarball Extraction"},{"location":"disk_setup/#35-mounting","text":"mount -t tmpfs -o noatime,nodev,nosuid,mode = 1777 ,uid = root,gid = root tmpfs /mnt/gentoo/tmp && \\ mount --types proc /proc /mnt/gentoo/proc && \\ mount --rbind /sys /mnt/gentoo/sys && \\ mount --make-rslave /mnt/gentoo/sys && \\ mount --rbind /dev /mnt/gentoo/dev && \\ mount --make-rslave /mnt/gentoo/dev && \\ mount --bind /run /mnt/gentoo/run && \\ mount --make-slave /mnt/gentoo/run && \\ mount -o noatime,subvol = @home /mnt/gentoo/mapperSystem /mnt/gentoo/home && \\ touch /mnt/gentoo/var/cache/binpkgs/.keep && \\ mount -o noatime,subvol = @binpkgs /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/binpkgs && \\ touch /mnt/gentoo/var/cache/distfiles/.keep && \\ mount -o noatime,subvol = @distfiles /mnt/gentoo/mapperSystem /mnt/gentoo/var/cache/distfiles ; echo $?","title":"3.5. Mounting"},{"location":"live-cd_environment/","text":"In the following, I am using the SystemRescueCD , not the official Gentoo Linux installation CD. If not otherwise stated, commands are executed on the remote machine where Gentoo Linux needs to be installed, in the beginning via TTY, later on over SSH. Most of the time, you can copy&paste the whole code block, but understand the commands first and make adjustments (e.g. IP address, disk names) if required. Boot into SystemRescueCD and set the correct keyboard layout: loadkeys de-latin1-nodeadkeys Make sure you have booted with UEFI: [ -d /sys/firmware/efi ] && echo UEFI || echo BIOS Disable sysrq for security sake : sysctl -w kernel.sysrq = 0 Do initial setup (copy&paste one after the other): screen -S install # If no network setup via DHCP done, use nmtui (recommended if DHCP not working) or... ip a add ... ip r add default ... echo nameserver ... > /etc/resolv.conf # Insert iptables rules at correct place for SystemRescueCD to accept SSH clients. # Verify with \"iptables -L -v -n\" iptables -I INPUT 4 -p tcp --dport 22 -j ACCEPT -m conntrack --ctstate NEW # Alternatively, setup /root/.ssh/authorized_keys passwd root Print out fingerprints to double check upon initial SSH connection to the SystemRescueCD system: find /etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; Execute following rsync and ssh command on your local machine (copy&paste one after the other): # Copy installation files to remote machine. Adjust port and IP. rsync -e \"ssh -o VisualHostKey=yes\" -av --numeric-ids --chown = 0 :0 { bin/ { portage_hook_kernel,disk.sh,fetch_files.sh,firewall.nft,firewall.sh } ,localrepo } root@XXX:/tmp/ # From local machine, login into the remote machine ssh root@... Resume screen : screen -d -r install (Optional) Lock the screen on the remote machine by typing the following command on its keyboard ( not over SSH ): # If you have set /root/.ssh/authorized_keys in the previous step # and haven't executed \"passwd\" make sure to do it now for \"vlock\" to work... passwd root # Execute \"vlock\" without any flags first. # If relogin doesn't work you can switch tty and set password again. # If relogin succeeds execute vlock with flag \"-a\" to lock all tty. vlock -a Set date if system time is not correct: ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ # replace \"MMDDhhmmYYYY\" with UTC time date --utc MMDDhhmmYYYY Update hardware clock: ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ hwclock --systohc --utc","title":"2. Live-CD Environment"},{"location":"other_gentoo_linux_repos/","text":"https://github.com/duxsco?tab=repositories&q=gentoo-","title":"10. Other Gentoo Linux repos"},{"location":"post-boot_configuration/","text":"8.1. Systemd Configuration \u00b6 Some configuration needs to be done after systemd has been started. Do some initial configuration (copy&paste one after the other): systemd-firstboot --prompt --setup-machine-id systemctl preset-all Re-enable services you need if they have been disabled by above second command. Setup localisation : /bin/bash -c ' localectl set-locale LANG=\"de_DE.UTF-8\" LC_COLLATE=\"C.UTF-8\" LC_MESSAGES=\"en_US.UTF-8\" && \\ localectl status && \\ env-update && source /etc/profile; echo $? ' Setup timedatectl: /bin/bash -c ' timedatectl set-timezone Europe/Berlin && \\ if ! grep -q -w \"hypervisor\" <(grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo); then rsync -av /etc/systemd/timesyncd.conf /etc/systemd/._cfg0000_timesyncd.conf && \\ sed -i -e \"s/#NTP=/NTP=0.de.pool.ntp.org 1.de.pool.ntp.org 2.de.pool.ntp.org 3.de.pool.ntp.org/\" -e \"s/#FallbackNTP=.*/FallbackNTP=0.europe.pool.ntp.org 1.europe.pool.ntp.org 2.europe.pool.ntp.org 3.europe.pool.ntp.org/\" /etc/systemd/._cfg0000_timesyncd.conf && \\ timedatectl set-ntp true echo $? fi && \\ timedatectl; echo $? ' Setup nftables: /bin/bash -c ' emerge net-firewall/nftables && \\ rsync -a /etc/conf.d/nftables /etc/conf.d/._cfg0000_nftables && \\ sed -i \"s/^SAVE_ON_STOP=\\\"yes\\\"$/SAVE_ON_STOP=\\\"no\\\"/\" /etc/conf.d/._cfg0000_nftables && \\ /usr/local/sbin/firewall.nft && \\ nft list ruleset > /var/lib/nftables/rules-save && \\ systemctl enable nftables-restore; echo $? ' 8.2. Unbound \u00b6 Setup unbound: /bin/bash -c ' echo \"net-dns/unbound ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge net-dns/unbound && \\ ( su -s /bin/sh -c \"/usr/sbin/unbound-anchor -a /etc/unbound/var/root-anchors.txt\" unbound || true ) && \\ rsync -a /etc/unbound/unbound.conf /etc/unbound/._cfg0000_unbound.conf && \\ sed -i \\ -e \"s|\\([[:space:]]*\\)# \\(hide-identity: \\)no|\\1\\2yes|\" \\ -e \"s|\\([[:space:]]*\\)# \\(hide-version: \\)no|\\1\\2yes|\" \\ -e \"s|\\([[:space:]]*\\)# \\(harden-short-bufsize: yes\\)|\\1\\2|\" \\ -e \"s|\\([[:space:]]*\\)# \\(harden-large-queries: \\)no|\\1\\2yes|\" \\ -e \"s|\\([[:space:]]*\\)# \\(harden-glue: yes\\)|\\1\\2|\" \\ -e \"s|\\([[:space:]]*\\)# \\(harden-dnssec-stripped: yes\\)|\\1\\2|\" \\ -e \"s|\\([[:space:]]*\\)# \\(harden-below-nxdomain: yes\\)|\\1\\2|\" \\ -e \"s|\\([[:space:]]*\\)# \\(harden-referral-path: \\)no|\\1\\2yes|\" \\ -e \"s|\\([[:space:]]*\\)# \\(qname-minimisation: yes\\)|\\1\\2|\" \\ -e \"s|\\([[:space:]]*\\)# \\(qname-minimisation-strict: no\\)|\\1\\2|\" \\ -e \"s|\\([[:space:]]*\\)# \\(use-caps-for-id: \\)no|\\1\\2yes|\" \\ -e \"s|\\([[:space:]]*\\)# \\(minimal-responses: yes\\)|\\1\\2|\" \\ -e \"s|\\([[:space:]]*\\)# \\(auto-trust-anchor-file: \\\"/etc/unbound/var/root-anchors.txt\\\"\\)|\\1\\2|\" \\ /etc/unbound/._cfg0000_unbound.conf; echo $? ' (Optional) Use DNS-over-TLS ( recommended DNS servers ): /bin/bash -c ' rsync -a /etc/unbound/unbound.conf /etc/unbound/._cfg0000_unbound.conf && \\ sed -i \"s|\\([[:space:]]*\\)# \\(tls-cert-bundle: \\)\\\"\\\"|\\1\\2\\\"/etc/ssl/certs/4042bcee.0\\\"|\" /etc/unbound/._cfg0000_unbound.conf && \\ cat <<EOF >> /etc/unbound/._cfg0000_unbound.conf; echo $? forward-zone: name: \".\" forward-tls-upstream: yes forward-first: no forward-addr: 2001:678:e68:f000::@853#dot.ffmuc.net forward-addr: 2001:678:ed0:f000::@853#dot.ffmuc.net forward-addr: 5.1.66.255@853#dot.ffmuc.net forward-addr: 185.150.99.255@853#dot.ffmuc.net EOF ' I assume that certificates used for DNS-over-TLS are issued by Let's Encrypt . Thus, I only allow this single root CA: \u27a4 echo | openssl s_client -servername dot.ffmuc.net dot.ffmuc.net:853 2>&1 | sed -n '/^Certificate chain/,/^---/p' Certificate chain 0 s:CN = ffmuc.net i:C = US, O = Let's Encrypt, CN = R3 1 s:C = US, O = Let's Encrypt, CN = R3 i:C = US, O = Internet Security Research Group, CN = ISRG Root X1 2 s:C = US, O = Internet Security Research Group, CN = ISRG Root X1 i:O = Digital Signature Trust Co., CN = DST Root CA X3 --- \u27a4 openssl x509 -noout -hash -subject -issuer -in /etc/ssl/certs/4042bcee.0 4042bcee subject=C = US, O = Internet Security Research Group, CN = ISRG Root X1 issuer=C = US, O = Internet Security Research Group, CN = ISRG Root X1 Sample configuration: \u276f bash -c 'grep -v -e \"^[[:space:]]*#\" -e \"^[[:space:]]*$\" /etc/unbound/unbound.conf' server: verbosity: 1 hide-identity: yes hide-version: yes harden-short-bufsize: yes harden-large-queries: yes harden-glue: yes harden-dnssec-stripped: yes harden-below-nxdomain: yes harden-referral-path: yes qname-minimisation: yes qname-minimisation-strict: no use-caps-for-id: yes minimal-responses: yes auto-trust-anchor-file: \"/etc/unbound/var/root-anchors.txt\" tls-cert-bundle: \"/etc/ssl/certs/4042bcee.0\" python: dynlib: remote-control: forward-zone: name: \".\" forward-tls-upstream: yes forward-first: no forward-addr: 2001 :678:e68:f000::@853#dot.ffmuc.net forward-addr: 2001 :678:ed0:f000::@853#dot.ffmuc.net forward-addr: 5 .1.66.255@853#dot.ffmuc.net forward-addr: 185 .150.99.255@853#dot.ffmuc.net Enable and start unbound service: /bin/bash -c ' systemctl disable systemd-resolved.service && \\ systemctl stop systemd-resolved.service && \\ systemctl enable unbound.service && \\ rm -f /etc/resolv.conf && \\ echo -e \"nameserver ::1\\nnameserver 127.0.0.1\" > /etc/resolv.conf && \\ systemctl start unbound.service; echo $? ' Test DNS resolving ( link ). 8.3. Secure Boot Setup \u00b6 If efi-updatevar failed in one of the previous sections , you can import Secure Boot files the following way. First, boot into the Gentoo Linux and save necessary files in DER form: /bin/bash -c ' ( ! mountpoint --quiet /efia && \\ mount /efia || true ) && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/db.crt -out /efia/db.der && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/KEK.crt -out /efia/KEK.der && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/PK.crt -out /efia/PK.der; echo $? ' Reboot into UEFI Firmware Settings and import db.der , KEK.der and PK.der . Thereafter, enable Secure Boot. Upon successful boot with Secure Boot enabled, you can delete db.der , KEK.der and PK.der in /efia . To check whether Secure Boot is enabled execute: mokutil --sb-state 8.4. Measured Boot \u00b6 You have two options for Measured Boot : systemd-cryptenroll : I prefer this on local systems where I have access to tty and can take care of (optional) pin prompts which are supported with systemd >=251. With pins, you don't have the problem of your laptop, for example, getting stolen and auto-unlocking upon boot. Furthermore, I experienced faster boot with systemd-cryptenroll than with clevis due to the use of PBKDF2 (with secure keys), and you don't have to use the app-crypt/clevis package from (unofficial) guru overlay . clevis : I prefer this on remote systems, e.g. a server in colocation, where I can take care of auto-unlock via TPM 2.0 and Tang pin. Use either systemd-cryptenroll or clevis in the following. 8.4.1.a) systemd-cryptenroll \u00b6 Install app-crypt/tpm2-tools : echo \"=app-crypt/tpm2-tools-5.2-r1 ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -av tpm2-tools Add support for TPM to dracut and systemd: /bin/bash -c ' sed -i \"s/\\(sys-apps\\/systemd \\)/\\1 tpm /\" /etc/portage/package.use/main && \\ echo \\' add_dracutmodules += \" tpm2-tss \" \\' >> /etc/dracut.conf ; echo $? ' Enable newer version with required bug fixes and features: echo \"=sys-apps/systemd-251.2 ~amd64\" >> /etc/portage/package.accept_keywords/main Update and make sure sys-apps/systemd got updated: emerge -atuDN @world Make sure that TPM 2.0 devices (should only be one) are recognised: systemd-cryptenroll --tpm2-device = list Make sure that the PCRs you are going to use have a valid hash and don't contain only zeroes: tpm2_pcrread sha256 Create new LUKS keyslots on all swap and system partitions. # I only use PCR7 as recommended in the first sentence after following table: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2 # # \"--tpm2-with-pin=yes\" is optional: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#--tpm2-with-pin=BOOL # systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sda3 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sda4 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sdb3 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sdb4 # etc. Remove overlay directory containing app-crypt/clevis : rm -rf /root/localrepo Reboot your system! 8.4.1.b) clevis \u00b6 If you don't have a DHCP server avaiable to the new system, add the following network settings to the CMDLINE array variable in /etc/dracut.conf : ip=192.168.10.2::192.168.10.1:255.255.255.0:micro:enp1s0:off Install dev-vcs/git : emerge -at dev-vcs/git Install app-crypt/clevis : emerge -1 app-eselect/eselect-repository && \\ eselect repository create localrepo && \\ sed -i '/^location[[:space:]]*=[[:space:]]*\\/var\\/db\\/repos\\/localrepo$/a auto-sync = false' /etc/portage/repos.conf/eselect-repo.conf && \\ rsync -a /root/localrepo /var/db/repos/ && \\ rm -rf /root/localrepo && \\ echo \"app-crypt/clevis ~amd64 dev-libs/jose ~amd64 dev-libs/luksmeta ~amd64 app-crypt/tpm2-tools ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -at app-crypt/clevis Make sure that the PCRs you are going to use have a valid hash and don't contain only zeroes: tpm2_pcrread sha256 Bind all swap and system LUKS volumes. # I only use PCR7 as recommended in the first sentence after following table: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2 # clevis luks bind -d /dev/sda3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sda4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sdb3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sdb4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' # etc. Show results: clevis luks list -d /dev/sda3 clevis luks list -d /dev/sda4 clevis luks list -d /dev/sdb3 clevis luks list -d /dev/sdb4 # etc. 8.4.2. Rebuild Unified Kernel Image \u00b6 Rebuild the unified kernel image: emerge -at sys-kernel/gentoo-kernel-bin 8.5. Package Cleanup \u00b6 Remove extraneous packages (should be only app-editors/nano , app-eselect/eselect-repository , app-misc/yq and app-portage/cpuid2cpuflags ): emerge --depclean -a","title":"8. Post-Boot Configuration"},{"location":"post-boot_configuration/#81-systemd-configuration","text":"Some configuration needs to be done after systemd has been started. Do some initial configuration (copy&paste one after the other): systemd-firstboot --prompt --setup-machine-id systemctl preset-all Re-enable services you need if they have been disabled by above second command. Setup localisation : /bin/bash -c ' localectl set-locale LANG=\"de_DE.UTF-8\" LC_COLLATE=\"C.UTF-8\" LC_MESSAGES=\"en_US.UTF-8\" && \\ localectl status && \\ env-update && source /etc/profile; echo $? ' Setup timedatectl: /bin/bash -c ' timedatectl set-timezone Europe/Berlin && \\ if ! grep -q -w \"hypervisor\" <(grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo); then rsync -av /etc/systemd/timesyncd.conf /etc/systemd/._cfg0000_timesyncd.conf && \\ sed -i -e \"s/#NTP=/NTP=0.de.pool.ntp.org 1.de.pool.ntp.org 2.de.pool.ntp.org 3.de.pool.ntp.org/\" -e \"s/#FallbackNTP=.*/FallbackNTP=0.europe.pool.ntp.org 1.europe.pool.ntp.org 2.europe.pool.ntp.org 3.europe.pool.ntp.org/\" /etc/systemd/._cfg0000_timesyncd.conf && \\ timedatectl set-ntp true echo $? fi && \\ timedatectl; echo $? ' Setup nftables: /bin/bash -c ' emerge net-firewall/nftables && \\ rsync -a /etc/conf.d/nftables /etc/conf.d/._cfg0000_nftables && \\ sed -i \"s/^SAVE_ON_STOP=\\\"yes\\\"$/SAVE_ON_STOP=\\\"no\\\"/\" /etc/conf.d/._cfg0000_nftables && \\ /usr/local/sbin/firewall.nft && \\ nft list ruleset > /var/lib/nftables/rules-save && \\ systemctl enable nftables-restore; echo $? '","title":"8.1. Systemd Configuration"},{"location":"post-boot_configuration/#82-unbound","text":"Setup unbound: /bin/bash -c ' echo \"net-dns/unbound ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge net-dns/unbound && \\ ( su -s /bin/sh -c \"/usr/sbin/unbound-anchor -a /etc/unbound/var/root-anchors.txt\" unbound || true ) && \\ rsync -a /etc/unbound/unbound.conf /etc/unbound/._cfg0000_unbound.conf && \\ sed -i \\ -e \"s|\\([[:space:]]*\\)# \\(hide-identity: \\)no|\\1\\2yes|\" \\ -e \"s|\\([[:space:]]*\\)# \\(hide-version: \\)no|\\1\\2yes|\" \\ -e \"s|\\([[:space:]]*\\)# \\(harden-short-bufsize: yes\\)|\\1\\2|\" \\ -e \"s|\\([[:space:]]*\\)# \\(harden-large-queries: \\)no|\\1\\2yes|\" \\ -e \"s|\\([[:space:]]*\\)# \\(harden-glue: yes\\)|\\1\\2|\" \\ -e \"s|\\([[:space:]]*\\)# \\(harden-dnssec-stripped: yes\\)|\\1\\2|\" \\ -e \"s|\\([[:space:]]*\\)# \\(harden-below-nxdomain: yes\\)|\\1\\2|\" \\ -e \"s|\\([[:space:]]*\\)# \\(harden-referral-path: \\)no|\\1\\2yes|\" \\ -e \"s|\\([[:space:]]*\\)# \\(qname-minimisation: yes\\)|\\1\\2|\" \\ -e \"s|\\([[:space:]]*\\)# \\(qname-minimisation-strict: no\\)|\\1\\2|\" \\ -e \"s|\\([[:space:]]*\\)# \\(use-caps-for-id: \\)no|\\1\\2yes|\" \\ -e \"s|\\([[:space:]]*\\)# \\(minimal-responses: yes\\)|\\1\\2|\" \\ -e \"s|\\([[:space:]]*\\)# \\(auto-trust-anchor-file: \\\"/etc/unbound/var/root-anchors.txt\\\"\\)|\\1\\2|\" \\ /etc/unbound/._cfg0000_unbound.conf; echo $? ' (Optional) Use DNS-over-TLS ( recommended DNS servers ): /bin/bash -c ' rsync -a /etc/unbound/unbound.conf /etc/unbound/._cfg0000_unbound.conf && \\ sed -i \"s|\\([[:space:]]*\\)# \\(tls-cert-bundle: \\)\\\"\\\"|\\1\\2\\\"/etc/ssl/certs/4042bcee.0\\\"|\" /etc/unbound/._cfg0000_unbound.conf && \\ cat <<EOF >> /etc/unbound/._cfg0000_unbound.conf; echo $? forward-zone: name: \".\" forward-tls-upstream: yes forward-first: no forward-addr: 2001:678:e68:f000::@853#dot.ffmuc.net forward-addr: 2001:678:ed0:f000::@853#dot.ffmuc.net forward-addr: 5.1.66.255@853#dot.ffmuc.net forward-addr: 185.150.99.255@853#dot.ffmuc.net EOF ' I assume that certificates used for DNS-over-TLS are issued by Let's Encrypt . Thus, I only allow this single root CA: \u27a4 echo | openssl s_client -servername dot.ffmuc.net dot.ffmuc.net:853 2>&1 | sed -n '/^Certificate chain/,/^---/p' Certificate chain 0 s:CN = ffmuc.net i:C = US, O = Let's Encrypt, CN = R3 1 s:C = US, O = Let's Encrypt, CN = R3 i:C = US, O = Internet Security Research Group, CN = ISRG Root X1 2 s:C = US, O = Internet Security Research Group, CN = ISRG Root X1 i:O = Digital Signature Trust Co., CN = DST Root CA X3 --- \u27a4 openssl x509 -noout -hash -subject -issuer -in /etc/ssl/certs/4042bcee.0 4042bcee subject=C = US, O = Internet Security Research Group, CN = ISRG Root X1 issuer=C = US, O = Internet Security Research Group, CN = ISRG Root X1 Sample configuration: \u276f bash -c 'grep -v -e \"^[[:space:]]*#\" -e \"^[[:space:]]*$\" /etc/unbound/unbound.conf' server: verbosity: 1 hide-identity: yes hide-version: yes harden-short-bufsize: yes harden-large-queries: yes harden-glue: yes harden-dnssec-stripped: yes harden-below-nxdomain: yes harden-referral-path: yes qname-minimisation: yes qname-minimisation-strict: no use-caps-for-id: yes minimal-responses: yes auto-trust-anchor-file: \"/etc/unbound/var/root-anchors.txt\" tls-cert-bundle: \"/etc/ssl/certs/4042bcee.0\" python: dynlib: remote-control: forward-zone: name: \".\" forward-tls-upstream: yes forward-first: no forward-addr: 2001 :678:e68:f000::@853#dot.ffmuc.net forward-addr: 2001 :678:ed0:f000::@853#dot.ffmuc.net forward-addr: 5 .1.66.255@853#dot.ffmuc.net forward-addr: 185 .150.99.255@853#dot.ffmuc.net Enable and start unbound service: /bin/bash -c ' systemctl disable systemd-resolved.service && \\ systemctl stop systemd-resolved.service && \\ systemctl enable unbound.service && \\ rm -f /etc/resolv.conf && \\ echo -e \"nameserver ::1\\nnameserver 127.0.0.1\" > /etc/resolv.conf && \\ systemctl start unbound.service; echo $? ' Test DNS resolving ( link ).","title":"8.2. Unbound"},{"location":"post-boot_configuration/#83-secure-boot-setup","text":"If efi-updatevar failed in one of the previous sections , you can import Secure Boot files the following way. First, boot into the Gentoo Linux and save necessary files in DER form: /bin/bash -c ' ( ! mountpoint --quiet /efia && \\ mount /efia || true ) && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/db.crt -out /efia/db.der && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/KEK.crt -out /efia/KEK.der && \\ openssl x509 -outform der -in /etc/gentoo-installation/secureboot/PK.crt -out /efia/PK.der; echo $? ' Reboot into UEFI Firmware Settings and import db.der , KEK.der and PK.der . Thereafter, enable Secure Boot. Upon successful boot with Secure Boot enabled, you can delete db.der , KEK.der and PK.der in /efia . To check whether Secure Boot is enabled execute: mokutil --sb-state","title":"8.3. Secure Boot Setup"},{"location":"post-boot_configuration/#84-measured-boot","text":"You have two options for Measured Boot : systemd-cryptenroll : I prefer this on local systems where I have access to tty and can take care of (optional) pin prompts which are supported with systemd >=251. With pins, you don't have the problem of your laptop, for example, getting stolen and auto-unlocking upon boot. Furthermore, I experienced faster boot with systemd-cryptenroll than with clevis due to the use of PBKDF2 (with secure keys), and you don't have to use the app-crypt/clevis package from (unofficial) guru overlay . clevis : I prefer this on remote systems, e.g. a server in colocation, where I can take care of auto-unlock via TPM 2.0 and Tang pin. Use either systemd-cryptenroll or clevis in the following.","title":"8.4. Measured Boot"},{"location":"post-boot_configuration/#841a-systemd-cryptenroll","text":"Install app-crypt/tpm2-tools : echo \"=app-crypt/tpm2-tools-5.2-r1 ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -av tpm2-tools Add support for TPM to dracut and systemd: /bin/bash -c ' sed -i \"s/\\(sys-apps\\/systemd \\)/\\1 tpm /\" /etc/portage/package.use/main && \\ echo \\' add_dracutmodules += \" tpm2-tss \" \\' >> /etc/dracut.conf ; echo $? ' Enable newer version with required bug fixes and features: echo \"=sys-apps/systemd-251.2 ~amd64\" >> /etc/portage/package.accept_keywords/main Update and make sure sys-apps/systemd got updated: emerge -atuDN @world Make sure that TPM 2.0 devices (should only be one) are recognised: systemd-cryptenroll --tpm2-device = list Make sure that the PCRs you are going to use have a valid hash and don't contain only zeroes: tpm2_pcrread sha256 Create new LUKS keyslots on all swap and system partitions. # I only use PCR7 as recommended in the first sentence after following table: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2 # # \"--tpm2-with-pin=yes\" is optional: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#--tpm2-with-pin=BOOL # systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sda3 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sda4 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sdb3 systemd-cryptenroll --tpm2-device = auto --tpm2-pcrs = 7 --tpm2-with-pin = yes /dev/sdb4 # etc. Remove overlay directory containing app-crypt/clevis : rm -rf /root/localrepo Reboot your system!","title":"8.4.1.a) systemd-cryptenroll"},{"location":"post-boot_configuration/#841b-clevis","text":"If you don't have a DHCP server avaiable to the new system, add the following network settings to the CMDLINE array variable in /etc/dracut.conf : ip=192.168.10.2::192.168.10.1:255.255.255.0:micro:enp1s0:off Install dev-vcs/git : emerge -at dev-vcs/git Install app-crypt/clevis : emerge -1 app-eselect/eselect-repository && \\ eselect repository create localrepo && \\ sed -i '/^location[[:space:]]*=[[:space:]]*\\/var\\/db\\/repos\\/localrepo$/a auto-sync = false' /etc/portage/repos.conf/eselect-repo.conf && \\ rsync -a /root/localrepo /var/db/repos/ && \\ rm -rf /root/localrepo && \\ echo \"app-crypt/clevis ~amd64 dev-libs/jose ~amd64 dev-libs/luksmeta ~amd64 app-crypt/tpm2-tools ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -at app-crypt/clevis Make sure that the PCRs you are going to use have a valid hash and don't contain only zeroes: tpm2_pcrread sha256 Bind all swap and system LUKS volumes. # I only use PCR7 as recommended in the first sentence after following table: # https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.7.3.10.2.2 # clevis luks bind -d /dev/sda3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sda4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sdb3 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' clevis luks bind -d /dev/sdb4 sss '{\"t\": 2, \"pins\": {\"tpm2\": {\"pcr_bank\":\"sha256\",\"pcr_ids\":\"7\"}, \"tang\": {\"url\": \"http://tang.local\"}}}' # etc. Show results: clevis luks list -d /dev/sda3 clevis luks list -d /dev/sda4 clevis luks list -d /dev/sdb3 clevis luks list -d /dev/sdb4 # etc.","title":"8.4.1.b) clevis"},{"location":"post-boot_configuration/#842-rebuild-unified-kernel-image","text":"Rebuild the unified kernel image: emerge -at sys-kernel/gentoo-kernel-bin","title":"8.4.2. Rebuild Unified Kernel Image"},{"location":"post-boot_configuration/#85-package-cleanup","text":"Remove extraneous packages (should be only app-editors/nano , app-eselect/eselect-repository , app-misc/yq and app-portage/cpuid2cpuflags ): emerge --depclean -a","title":"8.5. Package Cleanup"},{"location":"rescue_system/","text":"Info A feature request has been opened to get the rescue system support \"measured boot\". While we are still on SystemRescueCD and not in chroot, download and customise the SystemRescueCD .iso file. 4.1. Downloads And Verification \u00b6 Prepare the working directory: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ chown meh:meh /mnt/gentoo/etc/gentoo-installation/systemrescuecd ; echo $? Import Gnupg public key: su -l meh -c \" mkdir --mode=0700 /tmp/gpgHomeDir && \\ curl -fsSL --proto '=https' --tlsv1.3 https://www.system-rescue.org/security/signing-keys/gnupg-pubkey-fdupoux-20210704-v001.pem | gpg --homedir /tmp/gpgHomeDir --import && \\ gpg --homedir /tmp/gpgHomeDir --import-ownertrust <<<'62989046EB5C7E985ECDF5DD3B0FEA9BE13CA3C9:6:' && \\ gpgconf --homedir /tmp/gpgHomeDir --kill all; echo $? \" Download .iso and .asc file: rescue_system_version = \" $( su -l meh -c \"curl -fsS --proto '=https' --tlsv1.3 https://gitlab.com/systemrescue/systemrescue-sources/-/raw/main/VERSION\" ) \" && \\ su -l meh -c \" curl --continue-at - -L --proto '=https' --tlsv1.2 --ciphers 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso \\\"https://sourceforge.net/projects/systemrescuecd/files/sysresccd-x86/ ${ rescue_system_version } /systemrescue- ${ rescue_system_version } -amd64.iso/download?use_mirror=netcologne\\\" && \\ curl -fsSL --proto '=https' --tlsv1.3 --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc \\\"https://www.system-rescue.org/releases/ ${ rescue_system_version } /systemrescue- ${ rescue_system_version } -amd64.iso.asc\\\" \" ; echo $? Verify the .iso file: su -l meh -c \" gpg --homedir /tmp/gpgHomeDir --verify /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso && \\ gpgconf --homedir /tmp/gpgHomeDir --kill all \" && \\ chown -R 0 :0 /mnt/gentoo/etc/gentoo-installation/systemrescuecd ; echo $? 4.2. Configuration \u00b6 Create folder structure: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/ { recipe/ { iso_delete,iso_add/ { autorun,sysresccd,sysrescue.d } ,iso_patch_and_script,build_into_srm/ { etc/ { ssh,sysctl.d } ,usr/local/sbin }} ,work } I you want to be able to access Gentoo Linux as well as the rescue system via SSH do (copy&paste one after the other): mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh # add your ssh public keys to # /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys # set correct modes chmod u = rwx,g = rx,o = /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root chmod -R u = rwX,go = /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh Configure OpenSSH if you decided to setup public key authentication in the previous step: rsync -a /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ # do some ssh server hardening sed -i \\ -e 's/^#Port 22$/Port 50023/' \\ -e 's/^#PasswordAuthentication yes/PasswordAuthentication no/' \\ -e 's/^#X11Forwarding no$/X11Forwarding no/' /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ grep -q \"^KbdInteractiveAuthentication no $ \" /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ echo \" AuthenticationMethods publickey KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com\" >> /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ # create ssh_host_* files in build_into_srm/etc/ssh/ ssh-keygen -A -f /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm && \\ diff /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config Disable magic SysRq key for security sake : echo \"kernel.sysrq = 0\" > /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/sysctl.d/99sysrq.conf Copy chroot.sh created by disk.sh : rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rwx,go = r /tmp/chroot.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/usr/local/sbin/ Create settings YAML (copy&paste one after the other): # disable bash history set +o history # replace \"MyPassWord123\" with the password you want to use to login via TTY on SystemRescueCD crypt_pass = \" $( python3 -c 'import crypt; print(crypt.crypt(\"MyPassWord123\", crypt.mksalt(crypt.METHOD_SHA512)))' ) \" # enable bash history set -o history # set default settings cat <<EOF > /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysrescue.d/500-settings.yaml --- global: copytoram: true checksum: true nofirewall: true loadsrm: true setkmap: de-latin1-nodeadkeys dostartx: false dovnc: false rootshell: /bin/bash rootcryptpass: '${crypt_pass}' autorun: ar_disable: false ar_nowait: true ar_nodel: false ar_ignorefail: false EOF # Delete variable unset crypt_pass Create firewall rules: # set firewall rules upon bootup. rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /tmp/firewall.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/autorun/autorun Write down fingerprints to double check upon initial SSH connection to the SystemRescueCD system: find /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; Integrate additional packages: pacman -Sy clevis libpwquality luksmeta sbsigntools tpm2-tools && \\ cowpacman2srm /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysresccd/zz_additional_packages.srm ; echo $? 4.3. Folder Structure \u00b6 \u27a4 tree -a /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe \u251c\u2500\u2500 build_into_srm \u2502 \u251c\u2500\u2500 etc \u2502 \u2502 \u251c\u2500\u2500 ssh \u2502 \u2502 \u2502 \u251c\u2500\u2500 sshd_config \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_dsa_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_dsa_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ecdsa_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ecdsa_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ed25519_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ed25519_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_rsa_key \u2502 \u2502 \u2502 \u2514\u2500\u2500 ssh_host_rsa_key.pub \u2502 \u2502 \u2514\u2500\u2500 sysctl.d \u2502 \u2502 \u2514\u2500\u2500 99sysrq.conf \u2502 \u251c\u2500\u2500 root \u2502 \u2502 \u2514\u2500\u2500 .ssh \u2502 \u2502 \u2514\u2500\u2500 authorized_keys \u2502 \u2514\u2500\u2500 usr \u2502 \u2514\u2500\u2500 local \u2502 \u2514\u2500\u2500 sbin \u2502 \u2514\u2500\u2500 chroot.sh \u251c\u2500\u2500 iso_add \u2502 \u251c\u2500\u2500 autorun \u2502 \u2502 \u2514\u2500\u2500 autorun \u2502 \u251c\u2500\u2500 sysresccd \u2502 \u2502 \u2514\u2500\u2500 zz_additional_packages.srm \u2502 \u2514\u2500\u2500 sysrescue.d \u2502 \u2514\u2500\u2500 500 -settings.yaml \u251c\u2500\u2500 iso_delete \u2514\u2500\u2500 iso_patch_and_script 15 directories, 15 files 4.4. ISO And Rescue Partition \u00b6 Create customised ISO: sysrescue-customize --auto --overwrite -s /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso -d /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_ssh.iso -r /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe -w /mnt/gentoo/etc/gentoo-installation/systemrescuecd/work Copy ISO files to the rescue partition: mkdir /mnt/iso /mnt/gentoo/mnt/rescue && \\ mount -o loop,ro /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_ssh.iso /mnt/iso && \\ mount -o noatime /mnt/gentoo/mapperRescue /mnt/gentoo/mnt/rescue && \\ rsync -HAXSacv --delete /mnt/iso/ { autorun,sysresccd,sysrescue.d } /mnt/gentoo/mnt/rescue/ && \\ umount /mnt/iso ; echo $? 4.5 Kernel Installation \u00b6 Setup the unified kernel image: echo \"cryptdevice=UUID= $( blkid -s UUID -o value /mnt/gentoo/devRescue ) :root root=/dev/mapper/root archisobasedir=sysresccd archisolabel=rescue31415fs noautologin loadsrm=y\" > /tmp/my_cmdline && \\ objcopy \\ --add-section .osrel = \"/usr/lib/os-release\" --change-section-vma .osrel = 0x20000 \\ --add-section .cmdline = \"/tmp/my_cmdline\" --change-section-vma .cmdline = 0x30000 \\ --add-section .linux = \"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/vmlinuz\" --change-section-vma .linux = 0x2000000 \\ --add-section .initrd = \"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/sysresccd.img\" --change-section-vma .initrd = 0x3000000 \\ \"/usr/lib/systemd/boot/efi/linuxx64.efi.stub\" \"/tmp/systemrescuecd.efi\" && \\ while read -r my_esp ; do mkdir \" ${ my_esp /devE/e } \" && \\ mount -o noatime,dmask = 0022 ,fmask = 0133 \" ${ my_esp } \" \" ${ my_esp /devE/e } \" && \\ rsync -av \"/tmp/systemrescuecd.efi\" \" ${ my_esp /devE/e } /\" echo $? done < < ( find /mnt/gentoo/devEfi* -maxdepth 0 )","title":"4. Rescue System"},{"location":"rescue_system/#41-downloads-and-verification","text":"Prepare the working directory: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd && \\ chown meh:meh /mnt/gentoo/etc/gentoo-installation/systemrescuecd ; echo $? Import Gnupg public key: su -l meh -c \" mkdir --mode=0700 /tmp/gpgHomeDir && \\ curl -fsSL --proto '=https' --tlsv1.3 https://www.system-rescue.org/security/signing-keys/gnupg-pubkey-fdupoux-20210704-v001.pem | gpg --homedir /tmp/gpgHomeDir --import && \\ gpg --homedir /tmp/gpgHomeDir --import-ownertrust <<<'62989046EB5C7E985ECDF5DD3B0FEA9BE13CA3C9:6:' && \\ gpgconf --homedir /tmp/gpgHomeDir --kill all; echo $? \" Download .iso and .asc file: rescue_system_version = \" $( su -l meh -c \"curl -fsS --proto '=https' --tlsv1.3 https://gitlab.com/systemrescue/systemrescue-sources/-/raw/main/VERSION\" ) \" && \\ su -l meh -c \" curl --continue-at - -L --proto '=https' --tlsv1.2 --ciphers 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso \\\"https://sourceforge.net/projects/systemrescuecd/files/sysresccd-x86/ ${ rescue_system_version } /systemrescue- ${ rescue_system_version } -amd64.iso/download?use_mirror=netcologne\\\" && \\ curl -fsSL --proto '=https' --tlsv1.3 --output /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc \\\"https://www.system-rescue.org/releases/ ${ rescue_system_version } /systemrescue- ${ rescue_system_version } -amd64.iso.asc\\\" \" ; echo $? Verify the .iso file: su -l meh -c \" gpg --homedir /tmp/gpgHomeDir --verify /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso.asc /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso && \\ gpgconf --homedir /tmp/gpgHomeDir --kill all \" && \\ chown -R 0 :0 /mnt/gentoo/etc/gentoo-installation/systemrescuecd ; echo $?","title":"4.1. Downloads And Verification"},{"location":"rescue_system/#42-configuration","text":"Create folder structure: mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/ { recipe/ { iso_delete,iso_add/ { autorun,sysresccd,sysrescue.d } ,iso_patch_and_script,build_into_srm/ { etc/ { ssh,sysctl.d } ,usr/local/sbin }} ,work } I you want to be able to access Gentoo Linux as well as the rescue system via SSH do (copy&paste one after the other): mkdir -p /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh # add your ssh public keys to # /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys # set correct modes chmod u = rwx,g = rx,o = /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root chmod -R u = rwX,go = /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh Configure OpenSSH if you decided to setup public key authentication in the previous step: rsync -a /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ # do some ssh server hardening sed -i \\ -e 's/^#Port 22$/Port 50023/' \\ -e 's/^#PasswordAuthentication yes/PasswordAuthentication no/' \\ -e 's/^#X11Forwarding no$/X11Forwarding no/' /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ grep -q \"^KbdInteractiveAuthentication no $ \" /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ echo \" AuthenticationMethods publickey KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com\" >> /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config && \\ # create ssh_host_* files in build_into_srm/etc/ssh/ ssh-keygen -A -f /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm && \\ diff /etc/ssh/sshd_config /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/sshd_config Disable magic SysRq key for security sake : echo \"kernel.sysrq = 0\" > /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/sysctl.d/99sysrq.conf Copy chroot.sh created by disk.sh : rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rwx,go = r /tmp/chroot.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/usr/local/sbin/ Create settings YAML (copy&paste one after the other): # disable bash history set +o history # replace \"MyPassWord123\" with the password you want to use to login via TTY on SystemRescueCD crypt_pass = \" $( python3 -c 'import crypt; print(crypt.crypt(\"MyPassWord123\", crypt.mksalt(crypt.METHOD_SHA512)))' ) \" # enable bash history set -o history # set default settings cat <<EOF > /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysrescue.d/500-settings.yaml --- global: copytoram: true checksum: true nofirewall: true loadsrm: true setkmap: de-latin1-nodeadkeys dostartx: false dovnc: false rootshell: /bin/bash rootcryptpass: '${crypt_pass}' autorun: ar_disable: false ar_nowait: true ar_nodel: false ar_ignorefail: false EOF # Delete variable unset crypt_pass Create firewall rules: # set firewall rules upon bootup. rsync -av --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /tmp/firewall.sh /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/autorun/autorun Write down fingerprints to double check upon initial SSH connection to the SystemRescueCD system: find /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; Integrate additional packages: pacman -Sy clevis libpwquality luksmeta sbsigntools tpm2-tools && \\ cowpacman2srm /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe/iso_add/sysresccd/zz_additional_packages.srm ; echo $?","title":"4.2. Configuration"},{"location":"rescue_system/#43-folder-structure","text":"\u27a4 tree -a /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe \u251c\u2500\u2500 build_into_srm \u2502 \u251c\u2500\u2500 etc \u2502 \u2502 \u251c\u2500\u2500 ssh \u2502 \u2502 \u2502 \u251c\u2500\u2500 sshd_config \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_dsa_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_dsa_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ecdsa_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ecdsa_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ed25519_key \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_ed25519_key.pub \u2502 \u2502 \u2502 \u251c\u2500\u2500 ssh_host_rsa_key \u2502 \u2502 \u2502 \u2514\u2500\u2500 ssh_host_rsa_key.pub \u2502 \u2502 \u2514\u2500\u2500 sysctl.d \u2502 \u2502 \u2514\u2500\u2500 99sysrq.conf \u2502 \u251c\u2500\u2500 root \u2502 \u2502 \u2514\u2500\u2500 .ssh \u2502 \u2502 \u2514\u2500\u2500 authorized_keys \u2502 \u2514\u2500\u2500 usr \u2502 \u2514\u2500\u2500 local \u2502 \u2514\u2500\u2500 sbin \u2502 \u2514\u2500\u2500 chroot.sh \u251c\u2500\u2500 iso_add \u2502 \u251c\u2500\u2500 autorun \u2502 \u2502 \u2514\u2500\u2500 autorun \u2502 \u251c\u2500\u2500 sysresccd \u2502 \u2502 \u2514\u2500\u2500 zz_additional_packages.srm \u2502 \u2514\u2500\u2500 sysrescue.d \u2502 \u2514\u2500\u2500 500 -settings.yaml \u251c\u2500\u2500 iso_delete \u2514\u2500\u2500 iso_patch_and_script 15 directories, 15 files","title":"4.3. Folder Structure"},{"location":"rescue_system/#44-iso-and-rescue-partition","text":"Create customised ISO: sysrescue-customize --auto --overwrite -s /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue.iso -d /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_ssh.iso -r /mnt/gentoo/etc/gentoo-installation/systemrescuecd/recipe -w /mnt/gentoo/etc/gentoo-installation/systemrescuecd/work Copy ISO files to the rescue partition: mkdir /mnt/iso /mnt/gentoo/mnt/rescue && \\ mount -o loop,ro /mnt/gentoo/etc/gentoo-installation/systemrescuecd/systemrescue_ssh.iso /mnt/iso && \\ mount -o noatime /mnt/gentoo/mapperRescue /mnt/gentoo/mnt/rescue && \\ rsync -HAXSacv --delete /mnt/iso/ { autorun,sysresccd,sysrescue.d } /mnt/gentoo/mnt/rescue/ && \\ umount /mnt/iso ; echo $?","title":"4.4. ISO And Rescue Partition"},{"location":"rescue_system/#45-kernel-installation","text":"Setup the unified kernel image: echo \"cryptdevice=UUID= $( blkid -s UUID -o value /mnt/gentoo/devRescue ) :root root=/dev/mapper/root archisobasedir=sysresccd archisolabel=rescue31415fs noautologin loadsrm=y\" > /tmp/my_cmdline && \\ objcopy \\ --add-section .osrel = \"/usr/lib/os-release\" --change-section-vma .osrel = 0x20000 \\ --add-section .cmdline = \"/tmp/my_cmdline\" --change-section-vma .cmdline = 0x30000 \\ --add-section .linux = \"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/vmlinuz\" --change-section-vma .linux = 0x2000000 \\ --add-section .initrd = \"/mnt/gentoo/mnt/rescue/sysresccd/boot/x86_64/sysresccd.img\" --change-section-vma .initrd = 0x3000000 \\ \"/usr/lib/systemd/boot/efi/linuxx64.efi.stub\" \"/tmp/systemrescuecd.efi\" && \\ while read -r my_esp ; do mkdir \" ${ my_esp /devE/e } \" && \\ mount -o noatime,dmask = 0022 ,fmask = 0133 \" ${ my_esp } \" \" ${ my_esp /devE/e } \" && \\ rsync -av \"/tmp/systemrescuecd.efi\" \" ${ my_esp /devE/e } /\" echo $? done < < ( find /mnt/gentoo/devEfi* -maxdepth 0 )","title":"4.5 Kernel Installation"},{"location":"selinux/","text":"9.1. Enable SELinux \u00b6 Currently, I only use SELinux on servers, and only mcs policy type to be able to \"isolate\" virtual machines from each other. echo 'POLICY_TYPES=\"mcs\"' >> /etc/portage/make.conf eselect profile set --force 18 # should be \"[18] default/linux/amd64/17.1/systemd/selinux (exp)\" FEATURES = \"-selinux\" emerge -1 selinux-base sed -i 's/^SELINUXTYPE=strict$/SELINUXTYPE=mcs/' /etc/selinux/config FEATURES = \"-selinux -sesandbox\" emerge -1 selinux-base FEATURES = \"-selinux -sesandbox\" emerge -1 selinux-base-policy emerge -avuDN @world Enable logging: systemctl enable auditd.service Rebuild the kernel with SELinux support: emerge -at sys-kernel/gentoo-kernel-bin 9.2. Relabel \u00b6 Relabel the entire system : mkdir /mnt/gentoo mount -o bind / /mnt/gentoo setfiles -r /mnt/gentoo /etc/selinux/mcs/contexts/files/file_contexts /mnt/gentoo/ { dev,home,proc,run,sys,tmp,efi*,var/cache/binpkgs,var/cache/distfiles,var/db/repos/gentoo,var/tmp } umount /mnt/gentoo rlpkg -a -r In the custom Gentoo Linux installation , the SSH port has been changed to 50022. This needs to be considered for no SELinux denials to occur: \u27a4 semanage port -l | grep -e ssh -e Port SELinux Port Type Proto Port Number ssh_port_t tcp 22 \u27a4 semanage port -a -t ssh_port_t -p tcp 50022 \u27a4 semanage port -l | grep -e ssh -e Port SELinux Port Type Proto Port Number ssh_port_t tcp 50022 , 22 9.3. SELinux policies \u00b6 The following log entries were retrieved over a serial connection while booting the test VM into enforcing mode. 9.3.1. Exclusion of dontaudit denials \u00b6 The following audit logs don't contain those dontaudit ones. # [ 40.783704] audit: type=1400 audit(1659801628.356:3): avc: denied { read } for pid=3418 comm=\"10-gentoo-path\" name=\"profile.env\" dev=\"dm-2\" ino=2237658 scontext=system_u:system_r:systemd_generator_t:s0 tcontext=system_u:object_r:etc_runtime_t:s0 tclass=file permissive=0 \u276f find / -inum 2237658 /etc/profile.env \u276f semanage fcontext -l | grep '/etc/profile\\\\\\.env' | column -t /etc/profile \\. env regular file system_u:object_r:etc_runtime_t:s0 \u276f sesearch -A -s systemd_generator_t -c file -p read | grep etc allow systemd_generator_t etc_t:file { getattr ioctl lock map open read } ; allow systemd_generator_t lvm_etc_t:file { getattr ioctl lock map open read } ; \u276f semanage fcontext -m -f f -t etc_t '/etc/profile\\.env' \u276f restorecon -RFv /etc/profile.env Relabeled /etc/profile.env from system_u:object_r:etc_runtime_t:s0 to system_u:object_r:etc_t:s0 \u276f cat <<EOF | audit2allow [ 38.215380] audit: type=1400 audit(1659803032.739:3): avc: denied { create } for pid=1 comm=\"systemd\" name=\"io.systemd.NameServiceSwitch\" scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:systemd_userdbd_runtime_t:s0 tclass=lnk_file permissive=0 # [ 38.218433] systemd[1]: systemd-userdbd.socket: Failed to create symlink /run/systemd/userdb/io.systemd.Multiplexer \u2192 /run/systemd/userdb/io.systemd.NameServiceSwitch, ignoring: Permission denied # [ 38.223036] systemd[1]: systemd-userdbd.socket: Failed to create symlink /run/systemd/userdb/io.systemd.Multiplexer \u2192 /run/systemd/userdb/io.systemd.DropIn, ignoring: Permission denied [ 38.223037] audit: type=1400 audit(1659803032.749:4): avc: denied { create } for pid=1 comm=\"systemd\" name=\"io.systemd.DropIn\" scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:systemd_userdbd_runtime_t:s0 tclass=lnk_file permissive=0 EOF #============= init_t ============== allow init_t systemd_userdbd_runtime_t:lnk_file create ; \u276f selocal -a \"allow init_t systemd_userdbd_runtime_t:lnk_file create;\" -c my_000000 \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 38.348743] audit: type=1400 audit(1659804660.863:3): avc: denied { mounton } for pid=3192 comm=\"(-userdbd)\" path=\"/run/systemd/unit-root/proc\" dev=\"dm-0\" ino=67034 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:unlabeled_t:s0 tclass=dir permissive=0 EOF #============= init_t ============== allow init_t unlabeled_t:dir mounton ; \u276f selocal -a \"allow init_t unlabeled_t:dir mounton;\" -c my_000001 \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 38.650222] audit: type=1400 audit(1659806737.170:3): avc: denied { write } for pid=3391 comm=\"systemd-udevd\" name=\"systemd-udevd.service\" dev=\"cgroup2\" ino=2051 scontext=system_u:system_r:udev_t:s0 tcontext=system_u:object_r:cgroup_t:s0 tclass=dir permissive=0 [ 39.204268] audit: type=1400 audit(1659808040.666:3): avc: denied { add_name } for pid=3290 comm=\"systemd-udevd\" name=\"udev\" scontext=system_u:system_r:udev_t:s0 tcontext=system_u:object_r:cgroup_t:s0 tclass=dir permissive=0 [ 39.817148] audit: type=1400 audit(1659809598.336:3): avc: denied { create } for pid=3405 comm=\"systemd-udevd\" name=\"udev\" scontext=system_u:system_r:udev_t:s0 tcontext=system_u:object_r:cgroup_t:s0 tclass=dir permissive=0 [ 41.510248] audit: type=1400 audit(1659810088.010:3): avc: denied { write } for pid=3202 comm=\"systemd-udevd\" name=\"cgroup.procs\" dev=\"cgroup2\" ino=2086 scontext=system_u:system_r:udev_t:s0 tcontext=system_u:object_r:cgroup_t:s0 tclass=file permissive=0 EOF #============= udev_t ============== #!!!! This avc is allowed in the current policy allow udev_t cgroup_t:dir { add_name create write } ; allow udev_t cgroup_t:file write ; \u276f selocal -a \"allow udev_t cgroup_t:dir { add_name create write };\" -c my_000002_dir \u276f selocal -a \"allow udev_t cgroup_t:file write;\" -c my_000002_file \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 39.016492] audit: type=1400 audit(1659813497.523:3): avc: denied { read } for pid=3405 comm=\"systemd-udevd\" name=\"network\" dev=\"tmpfs\" ino=78 scontext=system_u:system_r:udev_t:s0 tcontext=system_u:object_r:init_runtime_t:s0 tclass=dir permissive=0 EOF #============= udev_t ============== allow udev_t init_runtime_t:dir read ; \u276f selocal -a \"allow udev_t init_runtime_t:dir read;\" -c my_000003 \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 39.725495] audit: type=1400 audit(1659818788.233:3): avc: denied { getattr } for pid=3318 comm=\"mdadm\" path=\"/run/udev\" dev=\"tmpfs\" ino=71 scontext=system_u:system_r:mdadm_t:s0 tcontext=system_u:object_r:udev_runtime_t:s0 tclass=dir permissive=0 EOF #============= mdadm_t ============== allow mdadm_t udev_runtime_t:dir getattr ; \u276f selocal -a \"allow mdadm_t udev_runtime_t:dir getattr;\" -c my_000004 \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 39.729566] audit: type=1400 audit(1659818788.233:4): avc: denied { search } for pid=3318 comm=\"mdadm\" name=\"block\" dev=\"debugfs\" ino=29 scontext=system_u:system_r:mdadm_t:s0 tcontext=system_u:object_r:debugfs_t:s0 tclass=dir permissive=0 [ 39.732824] audit: type=1400 audit(1659818788.233:5): avc: denied { search } for pid=3318 comm=\"mdadm\" name=\"bdi\" dev=\"debugfs\" ino=22 scontext=system_u:system_r:mdadm_t:s0 tcontext=system_u:object_r:debugfs_t:s0 tclass=dir permissive=0 EOF #============= mdadm_t ============== allow mdadm_t debugfs_t:dir search ; \u276f selocal -a \"allow mdadm_t debugfs_t:dir search;\" -c my_000005 \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 39.069622] audit: type=1400 audit(1659889748.730:3): avc: denied { getattr } for pid=26 comm=\"kdevtmpfs\" path=\"/fb0\" dev=\"devtmpfs\" ino=152 scontext=system_u:system_r:kernel_t:s0 tcontext=system_u:object_r:framebuf_device_t:s0 tclass=chr_file permissive=0 EOF #============= kernel_t ============== allow kernel_t framebuf_device_t:chr_file getattr ; \u276f selocal -a \"allow kernel_t framebuf_device_t:chr_file getattr;\" -c my_000006 \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 39.408676] audit: type=1400 audit(1659890472.969:3): avc: denied { setattr } for pid=26 comm=\"kdevtmpfs\" name=\"fb0\" dev=\"devtmpfs\" ino=152 scontext=system_u:system_r:kernel_t:s0 tcontext=system_u:object_r:framebuf_device_t:s0 tclass=chr_file permissive=0 [ 39.411761] audit: type=1400 audit(1659890472.969:4): avc: denied { unlink } for pid=26 comm=\"kdevtmpfs\" name=\"fb0\" dev=\"devtmpfs\" ino=152 scontext=system_u:system_r:kernel_t:s0 tcontext=system_u:object_r:framebuf_device_t:s0 tclass=chr_file permissive=0 EOF #============= kernel_t ============== allow kernel_t framebuf_device_t:chr_file { setattr unlink } ; \u276f selocal -a \"allow kernel_t framebuf_device_t:chr_file { setattr unlink };\" -c my_000007 \u276f selocal -b -L # [ 38.924284] audit: type=1400 audit(1659892115.476:7): avc: denied { getattr } for pid=3351 comm=\"loadkeys\" path=\"/root\" dev=\"dm-2\" ino=67027 scontext=system_u:system_r:udev_t:s0 tcontext=system_u:object_r:default_t:s0 tclass=dir permissive=0 # fcontext under \"strict\" # semanage fcontext -l | grep \"^/root\" \u276f my_fcontext = \"/root directory root:object_r:user_home_dir_t /root/((www)|(web)|(public_html))(/.*)?/\\.htaccess regular file root:object_r:httpd_user_htaccess_t /root/((www)|(web)|(public_html))(/.*)?/logs(/.*)? all files root:object_r:httpd_user_ra_content_t /root/((www)|(web)|(public_html))(/.+)? all files root:object_r:httpd_user_content_t /root/((www)|(web)|(public_html))/cgi-bin(/.+)? all files root:object_r:httpd_user_script_exec_t /root/.+ all files root:object_r:user_home_t /root/Documents(/.*)? all files root:object_r:xdg_documents_t /root/DovecotMail(/.*)? all files root:object_r:mail_home_rw_t /root/Downloads(/.*)? all files root:object_r:xdg_downloads_t /root/Maildir(/.*)? all files root:object_r:mail_home_rw_t /root/Music(/.*)? all files root:object_r:xdg_music_t /root/Pictures(/.*)? all files root:object_r:xdg_pictures_t /root/Videos(/.*)? all files root:object_r:xdg_videos_t /root/\\.cache(/.*)? all files root:object_r:xdg_cache_t /root/\\.config(/.*)? all files root:object_r:xdg_config_t /root/\\.config/git(/.*)? all files root:object_r:git_xdg_config_t /root/\\.config/systemd(/.*)? all files root:object_r:systemd_conf_home_t /root/\\.config/tmux(/.*)? regular file root:object_r:screen_home_t /root/\\.dbus(/.*)? all files root:object_r:session_dbusd_home_t /root/\\.default_contexts regular file system_u:object_r:default_context_t /root/\\.esmtp_queue regular file root:object_r:mail_home_t /root/\\.forward[^/]* regular file root:object_r:mail_home_t /root/\\.gitconfig regular file root:object_r:git_xdg_config_t /root/\\.gnupg(/.+)? all files root:object_r:gpg_secret_t /root/\\.gnupg/S\\.gpg-agent.* socket root:object_r:gpg_agent_tmp_t /root/\\.gnupg/S\\.scdaemon socket root:object_r:gpg_agent_tmp_t /root/\\.gnupg/crls\\.d(/.+)? all files root:object_r:dirmngr_home_t /root/\\.gnupg/log-socket socket root:object_r:gpg_agent_tmp_t /root/\\.k5login regular file root:object_r:krb5_home_t /root/\\.local(/.*)? all files root:object_r:xdg_data_t /root/\\.local/bin(/.*)? all files root:object_r:user_bin_t /root/\\.local/share/systemd(/.*)? all files root:object_r:systemd_data_home_t /root/\\.maildir(/.*)? all files root:object_r:mail_home_rw_t /root/\\.mailrc regular file root:object_r:mail_home_t /root/\\.msmtprc regular file root:object_r:mail_home_t /root/\\.pki(/.*)? all files root:object_r:user_cert_t /root/\\.screen(/.*)? all files root:object_r:screen_home_t /root/\\.screenrc regular file root:object_r:screen_home_t /root/\\.ssh(/.*)? all files root:object_r:ssh_home_t /root/\\.tmux\\.conf regular file root:object_r:screen_home_t /root/bin(/.*)? all files root:object_r:user_bin_t /root/dead\\.letter regular file root:object_r:mail_home_t /root/public_git(/.*)? all files root:object_r:git_user_content_t\" \u276f while read -r line ; do case $( awk '{print $2}' <<< \" ${ line } \" ) in regular ) file_type = \"f\" ;; directory ) file_type = \"d\" ;; character ) file_type = \"c\" ;; block ) file_type = \"b\" ;; socket ) file_type = \"s\" ;; symbolic ) file_type = \"l\" ;; named ) file_type = \"p\" ;; all ) file_type = \"a\" ;; esac selinux_user = \" $( awk -F ':' '{print $(NF-2)}' <<< \" ${ line } \" | awk '{print $NF}' ) \" selinux_type = \" $( awk -F ':' '{print $NF}' <<< \" ${ line } \" ) \" path = \" $( awk '{print $1}' <<< \" ${ line } \" ) \" semanage fcontext -a -f \" ${ file_type } \" -s \" ${ selinux_user } \" -t \" ${ selinux_type } \" \" ${ path } \" || \\ semanage fcontext -m -f \" ${ file_type } \" -s \" ${ selinux_user } \" -t \" ${ selinux_type } \" \" ${ path } \" done <<< \" ${ my_fcontext } \" \u276f restorecon -RFv /root \u276f cat <<EOF | audit2allow [ 40.218232] audit: type=1400 audit(1659904082.793:3): avc: denied { read write } for pid=1 comm=\"systemd\" name=\"rfkill\" dev=\"devtmpfs\" ino=178 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:wireless_device_t:s0 tclass=chr_file permissive=0 [ 39.054725] audit: type=1400 audit(1659906160.603:3): avc: denied { open } for pid=1 comm=\"systemd\" path=\"/dev/rfkill\" dev=\"devtmpfs\" ino=178 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:wireless_device_t:s0 tclass=chr_file permissive=0 EOF #============= init_t ============== allow init_t wireless_device_t:chr_file { open read write } ; \u276f selocal -a \"allow init_t wireless_device_t:chr_file { open read write };\" -c my_000008 \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 39.048851] audit: type=1400 audit(1659906509.586:3): avc: denied { execute } for pid=3175 comm=\"(bootctl)\" name=\"bootctl\" dev=\"dm-1\" ino=2234398 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:bootloader_exec_t:s0 tclass=file permissive=0 [ 39.132364] audit: type=1400 audit(1659907055.619:3): avc: denied { read open } for pid=3167 comm=\"(bootctl)\" path=\"/usr/bin/bootctl\" dev=\"dm-3\" ino=2234398 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:bootloader_exec_t:s0 tclass=file permissive=0 [ 39.413367] audit: type=1400 audit(1659908226.933:3): avc: denied { execute_no_trans } for pid=3470 comm=\"(bootctl)\" path=\"/usr/bin/bootctl\" dev=\"dm-0\" ino=2234398 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:bootloader_exec_t:s0 tclass=file permissive=0 [ 40.029697] audit: type=1400 audit(1659908634.563:3): avc: denied { map } for pid=3473 comm=\"bootctl\" path=\"/usr/bin/bootctl\" dev=\"dm-0\" ino=2234398 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:bootloader_exec_t:s0 tclass=file permissive=0 EOF #============= init_t ============== allow init_t bootloader_exec_t:file { execute execute_no_trans map open read } ; \u276f selocal -a \"allow init_t bootloader_exec_t:file { execute execute_no_trans map open read };\" -c my_000009 \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 40.774118] audit: type=1400 audit(1659904083.350:6): avc: denied { getattr } for pid=3282 comm=\"systemd-tmpfile\" path=\"/var/cache/eix\" dev=\"dm-0\" ino=76668 scontext=system_u:system_r:systemd_tmpfiles_t:s0 tcontext=system_u:object_r:portage_cache_t:s0 tclass=dir permissive=0 [ 40.779591] audit: type=1400 audit(1659904083.350:7): avc: denied { read } for pid=3282 comm=\"systemd-tmpfile\" name=\"eix\" dev=\"dm-0\" ino=76668 scontext=system_u:system_r:systemd_tmpfiles_t:s0 tcontext=system_u:object_r:portage_cache_t:s0 tclass=dir permissive=0 EOF #============= systemd_tmpfiles_t ============== #!!!! This avc can be allowed using the boolean 'systemd_tmpfiles_manage_all' allow systemd_tmpfiles_t portage_cache_t:dir { getattr read } ; \u276f setsebool -P systemd_tmpfiles_manage_all on \u276f cat <<EOF | audit2allow [ 40.289519] audit: type=1400 audit(1659909973.819:3): avc: denied { mounton } for pid=3379 comm=\"(resolved)\" path=\"/run/systemd/unit-root/run/systemd/resolve\" dev=\"tmpfs\" ino=1544 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:systemd_resolved_runtime_t:s0 tclass=dir permissive=0 EOF #============= init_t ============== #!!!! This avc can be allowed using the boolean 'init_mounton_non_security' allow init_t systemd_resolved_runtime_t:dir mounton ; \u276f setsebool -P init_mounton_non_security on # [ 39.984771] audit: type=1400 audit(1659910969.506:3): avc: denied { getattr } for pid=3292 comm=\"nft\" path=\"/var/lib/nftables/rules-save\" dev=\"dm-0\" ino=2333394 scontext=system_u:system_r:iptables_t:s0 tcontext=system_u:object_r:var_lib_t:s0 tclass=file permissive=0 \u276f semanage fcontext -l | grep -i \"/var/lib\" | grep tables | column -t /var/lib/ip6?tables ( /.* ) ? all files system_u:object_r:initrc_tmp_t:s0 \u276f semanage fcontext -a -f a -s system_u -t initrc_tmp_t '/var/lib/nftables(/[^\\.].*)?' \u276f restorecon -RFv /var/lib/nftables Relabeled /var/lib/nftables from system_u:object_r:var_lib_t:s0 to system_u:object_r:initrc_tmp_t:s0 Relabeled /var/lib/nftables/rules-save from system_u:object_r:var_lib_t:s0 to system_u:object_r:initrc_tmp_t:s0 \u276f cat <<EOF | audit2allow [ 40.155132] audit: type=1400 audit(1659912307.676:3): avc: denied { read } for pid=3318 comm=\"systemd-network\" name=\"network\" dev=\"tmpfs\" ino=78 scontext=system_u:system_r:systemd_networkd_t:s0 tcontext=system_u:object_r:init_runtime_t:s0 tclass=dir permissive=0 [ 40.558773] audit: type=1400 audit(1659912839.089:3): avc: denied { getattr } for pid=3309 comm=\"systemd-network\" path=\"/run/systemd/network/90-enp1s0.network\" dev=\"tmpfs\" ino=80 scontext=system_u:system_r:systemd_networkd_t:s0 tcontext=system_u:object_r:init_runtime_t:s0 tclass=file permissive=0 [ 49.671301] audit: type=1400 audit(1660397172.236:3): avc: denied { read } for pid=3507 comm=\"systemd-network\" name=\"90-enp1s0.network\" dev=\"tmpfs\" ino=80 scontext=system_u:system_r:systemd_networkd_t:s0 tcontext=system_u:object_r:init_runtime_t:s0 tclass=file permissive=0 [ 40.820487] audit: type=1400 audit(1660397629.459:3): avc: denied { open } for pid=3305 comm=\"systemd-network\" path=\"/run/systemd/network/90-enp1s0.network\" dev=\"tmpfs\" ino=79 scontext=system_u:system_r:systemd_networkd_t:s0 tcontext=system_u:object_r:init_runtime_t:s0 tclass=file permissive=0 [ 40.436302] audit: type=1400 audit(1660398037.003:3): avc: denied { ioctl } for pid=3304 comm=\"systemd-network\" path=\"/run/systemd/network/90-enp1s0.network\" dev=\"tmpfs\" ino=79 ioctlcmd=0x5401 scontext=system_u:system_r:systemd_networkd_t:s0 tcontext=system_u:object_r:init_runtime_t:s0 tclass=file permissive=0 EOF #============= systemd_networkd_t ============== allow systemd_networkd_t init_runtime_t:dir read ; allow systemd_networkd_t init_runtime_t:file { getattr ioctl open read } ; \u276f selocal -a \"allow systemd_networkd_t init_runtime_t:dir read;\" -c my_000010_dir \u276f selocal -a \"allow systemd_networkd_t init_runtime_t:file { getattr ioctl open read };\" -c my_000010_file \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 41.110108] audit: type=1400 audit(1660400958.629:3): avc: denied { relabelto } for pid=3318 comm=\"(unbound)\" name=\"/\" dev=\"tmpfs\" ino=1 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:named_conf_t:s0 tclass=dir permissive=0 [ 40.552975] audit: type=1400 audit(1660402251.079:3): avc: denied { write } for pid=3407 comm=\"(unbound)\" name=\"/\" dev=\"tmpfs\" ino=1 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:named_conf_t:s0 tclass=dir permissive=0 [ 40.297757] audit: type=1400 audit(1660402820.809:3): avc: denied { add_name } for pid=3306 comm=\"(unbound)\" name=\"log\" scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:named_conf_t:s0 tclass=dir permissive=0 [ 39.927797] audit: type=1400 audit(1660403248.466:3): avc: denied { create } for pid=3415 comm=\"(unbound)\" name=\"log\" scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:named_conf_t:s0 tclass=file permissive=0 [ 39.828873] audit: type=1400 audit(1660403547.326:3): avc: denied { create } for pid=3316 comm=\"(unbound)\" name=\"systemd\" scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:named_conf_t:s0 tclass=dir permissive=0 EOF #============= init_t ============== allow init_t named_conf_t:dir { add_name create relabelto write } ; allow init_t named_conf_t:file create ; \u276f selocal -a \"allow init_t named_conf_t:dir { add_name create relabelto write };\" -c my_000011_dir \u276f selocal -a \"allow init_t named_conf_t:file create;\" -c my_000011_file \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 56.466014] audit: type=1400 audit(1660417565.086:3): avc: denied { watch watch_reads } for pid=3813 comm=\"(agetty)\" path=\"/dev/tty1\" dev=\"devtmpfs\" ino=20 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:tty_device_t:s0 tclass=chr_file permissive=0 [ 56.603505] audit: type=1400 audit(1660417565.226:10): avc: denied { watch watch_reads } for pid=3821 comm=\"(agetty)\" path=\"/dev/ttyS0\" dev=\"devtmpfs\" ino=96 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:tty_device_t:s0 tclass=chr_file permissive=0 [ 56.479764] audit: type=1400 audit(1660417565.103:5): avc: denied { setattr } for pid=1 comm=\"systemd\" name=\"ttyS0\" dev=\"devtmpfs\" ino=96 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:tty_device_t:s0 tclass=chr_file permissive=0 EOF #============= init_t ============== allow init_t tty_device_t:chr_file { setattr watch watch_reads } ; \u276f selocal -a \"allow init_t tty_device_t:chr_file { setattr watch watch_reads };\" -c my_000012 \u276f selocal -b -L 9.3.2. Inclusion of dontaudit denials \u00b6 At this point, a login is still not possible. So, a look has to be taken at those dontaudit denials: semodule --disable_dontaudit --build TODO","title":"9. SELinux (WIP)"},{"location":"selinux/#91-enable-selinux","text":"Currently, I only use SELinux on servers, and only mcs policy type to be able to \"isolate\" virtual machines from each other. echo 'POLICY_TYPES=\"mcs\"' >> /etc/portage/make.conf eselect profile set --force 18 # should be \"[18] default/linux/amd64/17.1/systemd/selinux (exp)\" FEATURES = \"-selinux\" emerge -1 selinux-base sed -i 's/^SELINUXTYPE=strict$/SELINUXTYPE=mcs/' /etc/selinux/config FEATURES = \"-selinux -sesandbox\" emerge -1 selinux-base FEATURES = \"-selinux -sesandbox\" emerge -1 selinux-base-policy emerge -avuDN @world Enable logging: systemctl enable auditd.service Rebuild the kernel with SELinux support: emerge -at sys-kernel/gentoo-kernel-bin","title":"9.1. Enable SELinux"},{"location":"selinux/#92-relabel","text":"Relabel the entire system : mkdir /mnt/gentoo mount -o bind / /mnt/gentoo setfiles -r /mnt/gentoo /etc/selinux/mcs/contexts/files/file_contexts /mnt/gentoo/ { dev,home,proc,run,sys,tmp,efi*,var/cache/binpkgs,var/cache/distfiles,var/db/repos/gentoo,var/tmp } umount /mnt/gentoo rlpkg -a -r In the custom Gentoo Linux installation , the SSH port has been changed to 50022. This needs to be considered for no SELinux denials to occur: \u27a4 semanage port -l | grep -e ssh -e Port SELinux Port Type Proto Port Number ssh_port_t tcp 22 \u27a4 semanage port -a -t ssh_port_t -p tcp 50022 \u27a4 semanage port -l | grep -e ssh -e Port SELinux Port Type Proto Port Number ssh_port_t tcp 50022 , 22","title":"9.2. Relabel"},{"location":"selinux/#93-selinux-policies","text":"The following log entries were retrieved over a serial connection while booting the test VM into enforcing mode.","title":"9.3. SELinux policies"},{"location":"selinux/#931-exclusion-of-dontaudit-denials","text":"The following audit logs don't contain those dontaudit ones. # [ 40.783704] audit: type=1400 audit(1659801628.356:3): avc: denied { read } for pid=3418 comm=\"10-gentoo-path\" name=\"profile.env\" dev=\"dm-2\" ino=2237658 scontext=system_u:system_r:systemd_generator_t:s0 tcontext=system_u:object_r:etc_runtime_t:s0 tclass=file permissive=0 \u276f find / -inum 2237658 /etc/profile.env \u276f semanage fcontext -l | grep '/etc/profile\\\\\\.env' | column -t /etc/profile \\. env regular file system_u:object_r:etc_runtime_t:s0 \u276f sesearch -A -s systemd_generator_t -c file -p read | grep etc allow systemd_generator_t etc_t:file { getattr ioctl lock map open read } ; allow systemd_generator_t lvm_etc_t:file { getattr ioctl lock map open read } ; \u276f semanage fcontext -m -f f -t etc_t '/etc/profile\\.env' \u276f restorecon -RFv /etc/profile.env Relabeled /etc/profile.env from system_u:object_r:etc_runtime_t:s0 to system_u:object_r:etc_t:s0 \u276f cat <<EOF | audit2allow [ 38.215380] audit: type=1400 audit(1659803032.739:3): avc: denied { create } for pid=1 comm=\"systemd\" name=\"io.systemd.NameServiceSwitch\" scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:systemd_userdbd_runtime_t:s0 tclass=lnk_file permissive=0 # [ 38.218433] systemd[1]: systemd-userdbd.socket: Failed to create symlink /run/systemd/userdb/io.systemd.Multiplexer \u2192 /run/systemd/userdb/io.systemd.NameServiceSwitch, ignoring: Permission denied # [ 38.223036] systemd[1]: systemd-userdbd.socket: Failed to create symlink /run/systemd/userdb/io.systemd.Multiplexer \u2192 /run/systemd/userdb/io.systemd.DropIn, ignoring: Permission denied [ 38.223037] audit: type=1400 audit(1659803032.749:4): avc: denied { create } for pid=1 comm=\"systemd\" name=\"io.systemd.DropIn\" scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:systemd_userdbd_runtime_t:s0 tclass=lnk_file permissive=0 EOF #============= init_t ============== allow init_t systemd_userdbd_runtime_t:lnk_file create ; \u276f selocal -a \"allow init_t systemd_userdbd_runtime_t:lnk_file create;\" -c my_000000 \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 38.348743] audit: type=1400 audit(1659804660.863:3): avc: denied { mounton } for pid=3192 comm=\"(-userdbd)\" path=\"/run/systemd/unit-root/proc\" dev=\"dm-0\" ino=67034 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:unlabeled_t:s0 tclass=dir permissive=0 EOF #============= init_t ============== allow init_t unlabeled_t:dir mounton ; \u276f selocal -a \"allow init_t unlabeled_t:dir mounton;\" -c my_000001 \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 38.650222] audit: type=1400 audit(1659806737.170:3): avc: denied { write } for pid=3391 comm=\"systemd-udevd\" name=\"systemd-udevd.service\" dev=\"cgroup2\" ino=2051 scontext=system_u:system_r:udev_t:s0 tcontext=system_u:object_r:cgroup_t:s0 tclass=dir permissive=0 [ 39.204268] audit: type=1400 audit(1659808040.666:3): avc: denied { add_name } for pid=3290 comm=\"systemd-udevd\" name=\"udev\" scontext=system_u:system_r:udev_t:s0 tcontext=system_u:object_r:cgroup_t:s0 tclass=dir permissive=0 [ 39.817148] audit: type=1400 audit(1659809598.336:3): avc: denied { create } for pid=3405 comm=\"systemd-udevd\" name=\"udev\" scontext=system_u:system_r:udev_t:s0 tcontext=system_u:object_r:cgroup_t:s0 tclass=dir permissive=0 [ 41.510248] audit: type=1400 audit(1659810088.010:3): avc: denied { write } for pid=3202 comm=\"systemd-udevd\" name=\"cgroup.procs\" dev=\"cgroup2\" ino=2086 scontext=system_u:system_r:udev_t:s0 tcontext=system_u:object_r:cgroup_t:s0 tclass=file permissive=0 EOF #============= udev_t ============== #!!!! This avc is allowed in the current policy allow udev_t cgroup_t:dir { add_name create write } ; allow udev_t cgroup_t:file write ; \u276f selocal -a \"allow udev_t cgroup_t:dir { add_name create write };\" -c my_000002_dir \u276f selocal -a \"allow udev_t cgroup_t:file write;\" -c my_000002_file \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 39.016492] audit: type=1400 audit(1659813497.523:3): avc: denied { read } for pid=3405 comm=\"systemd-udevd\" name=\"network\" dev=\"tmpfs\" ino=78 scontext=system_u:system_r:udev_t:s0 tcontext=system_u:object_r:init_runtime_t:s0 tclass=dir permissive=0 EOF #============= udev_t ============== allow udev_t init_runtime_t:dir read ; \u276f selocal -a \"allow udev_t init_runtime_t:dir read;\" -c my_000003 \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 39.725495] audit: type=1400 audit(1659818788.233:3): avc: denied { getattr } for pid=3318 comm=\"mdadm\" path=\"/run/udev\" dev=\"tmpfs\" ino=71 scontext=system_u:system_r:mdadm_t:s0 tcontext=system_u:object_r:udev_runtime_t:s0 tclass=dir permissive=0 EOF #============= mdadm_t ============== allow mdadm_t udev_runtime_t:dir getattr ; \u276f selocal -a \"allow mdadm_t udev_runtime_t:dir getattr;\" -c my_000004 \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 39.729566] audit: type=1400 audit(1659818788.233:4): avc: denied { search } for pid=3318 comm=\"mdadm\" name=\"block\" dev=\"debugfs\" ino=29 scontext=system_u:system_r:mdadm_t:s0 tcontext=system_u:object_r:debugfs_t:s0 tclass=dir permissive=0 [ 39.732824] audit: type=1400 audit(1659818788.233:5): avc: denied { search } for pid=3318 comm=\"mdadm\" name=\"bdi\" dev=\"debugfs\" ino=22 scontext=system_u:system_r:mdadm_t:s0 tcontext=system_u:object_r:debugfs_t:s0 tclass=dir permissive=0 EOF #============= mdadm_t ============== allow mdadm_t debugfs_t:dir search ; \u276f selocal -a \"allow mdadm_t debugfs_t:dir search;\" -c my_000005 \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 39.069622] audit: type=1400 audit(1659889748.730:3): avc: denied { getattr } for pid=26 comm=\"kdevtmpfs\" path=\"/fb0\" dev=\"devtmpfs\" ino=152 scontext=system_u:system_r:kernel_t:s0 tcontext=system_u:object_r:framebuf_device_t:s0 tclass=chr_file permissive=0 EOF #============= kernel_t ============== allow kernel_t framebuf_device_t:chr_file getattr ; \u276f selocal -a \"allow kernel_t framebuf_device_t:chr_file getattr;\" -c my_000006 \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 39.408676] audit: type=1400 audit(1659890472.969:3): avc: denied { setattr } for pid=26 comm=\"kdevtmpfs\" name=\"fb0\" dev=\"devtmpfs\" ino=152 scontext=system_u:system_r:kernel_t:s0 tcontext=system_u:object_r:framebuf_device_t:s0 tclass=chr_file permissive=0 [ 39.411761] audit: type=1400 audit(1659890472.969:4): avc: denied { unlink } for pid=26 comm=\"kdevtmpfs\" name=\"fb0\" dev=\"devtmpfs\" ino=152 scontext=system_u:system_r:kernel_t:s0 tcontext=system_u:object_r:framebuf_device_t:s0 tclass=chr_file permissive=0 EOF #============= kernel_t ============== allow kernel_t framebuf_device_t:chr_file { setattr unlink } ; \u276f selocal -a \"allow kernel_t framebuf_device_t:chr_file { setattr unlink };\" -c my_000007 \u276f selocal -b -L # [ 38.924284] audit: type=1400 audit(1659892115.476:7): avc: denied { getattr } for pid=3351 comm=\"loadkeys\" path=\"/root\" dev=\"dm-2\" ino=67027 scontext=system_u:system_r:udev_t:s0 tcontext=system_u:object_r:default_t:s0 tclass=dir permissive=0 # fcontext under \"strict\" # semanage fcontext -l | grep \"^/root\" \u276f my_fcontext = \"/root directory root:object_r:user_home_dir_t /root/((www)|(web)|(public_html))(/.*)?/\\.htaccess regular file root:object_r:httpd_user_htaccess_t /root/((www)|(web)|(public_html))(/.*)?/logs(/.*)? all files root:object_r:httpd_user_ra_content_t /root/((www)|(web)|(public_html))(/.+)? all files root:object_r:httpd_user_content_t /root/((www)|(web)|(public_html))/cgi-bin(/.+)? all files root:object_r:httpd_user_script_exec_t /root/.+ all files root:object_r:user_home_t /root/Documents(/.*)? all files root:object_r:xdg_documents_t /root/DovecotMail(/.*)? all files root:object_r:mail_home_rw_t /root/Downloads(/.*)? all files root:object_r:xdg_downloads_t /root/Maildir(/.*)? all files root:object_r:mail_home_rw_t /root/Music(/.*)? all files root:object_r:xdg_music_t /root/Pictures(/.*)? all files root:object_r:xdg_pictures_t /root/Videos(/.*)? all files root:object_r:xdg_videos_t /root/\\.cache(/.*)? all files root:object_r:xdg_cache_t /root/\\.config(/.*)? all files root:object_r:xdg_config_t /root/\\.config/git(/.*)? all files root:object_r:git_xdg_config_t /root/\\.config/systemd(/.*)? all files root:object_r:systemd_conf_home_t /root/\\.config/tmux(/.*)? regular file root:object_r:screen_home_t /root/\\.dbus(/.*)? all files root:object_r:session_dbusd_home_t /root/\\.default_contexts regular file system_u:object_r:default_context_t /root/\\.esmtp_queue regular file root:object_r:mail_home_t /root/\\.forward[^/]* regular file root:object_r:mail_home_t /root/\\.gitconfig regular file root:object_r:git_xdg_config_t /root/\\.gnupg(/.+)? all files root:object_r:gpg_secret_t /root/\\.gnupg/S\\.gpg-agent.* socket root:object_r:gpg_agent_tmp_t /root/\\.gnupg/S\\.scdaemon socket root:object_r:gpg_agent_tmp_t /root/\\.gnupg/crls\\.d(/.+)? all files root:object_r:dirmngr_home_t /root/\\.gnupg/log-socket socket root:object_r:gpg_agent_tmp_t /root/\\.k5login regular file root:object_r:krb5_home_t /root/\\.local(/.*)? all files root:object_r:xdg_data_t /root/\\.local/bin(/.*)? all files root:object_r:user_bin_t /root/\\.local/share/systemd(/.*)? all files root:object_r:systemd_data_home_t /root/\\.maildir(/.*)? all files root:object_r:mail_home_rw_t /root/\\.mailrc regular file root:object_r:mail_home_t /root/\\.msmtprc regular file root:object_r:mail_home_t /root/\\.pki(/.*)? all files root:object_r:user_cert_t /root/\\.screen(/.*)? all files root:object_r:screen_home_t /root/\\.screenrc regular file root:object_r:screen_home_t /root/\\.ssh(/.*)? all files root:object_r:ssh_home_t /root/\\.tmux\\.conf regular file root:object_r:screen_home_t /root/bin(/.*)? all files root:object_r:user_bin_t /root/dead\\.letter regular file root:object_r:mail_home_t /root/public_git(/.*)? all files root:object_r:git_user_content_t\" \u276f while read -r line ; do case $( awk '{print $2}' <<< \" ${ line } \" ) in regular ) file_type = \"f\" ;; directory ) file_type = \"d\" ;; character ) file_type = \"c\" ;; block ) file_type = \"b\" ;; socket ) file_type = \"s\" ;; symbolic ) file_type = \"l\" ;; named ) file_type = \"p\" ;; all ) file_type = \"a\" ;; esac selinux_user = \" $( awk -F ':' '{print $(NF-2)}' <<< \" ${ line } \" | awk '{print $NF}' ) \" selinux_type = \" $( awk -F ':' '{print $NF}' <<< \" ${ line } \" ) \" path = \" $( awk '{print $1}' <<< \" ${ line } \" ) \" semanage fcontext -a -f \" ${ file_type } \" -s \" ${ selinux_user } \" -t \" ${ selinux_type } \" \" ${ path } \" || \\ semanage fcontext -m -f \" ${ file_type } \" -s \" ${ selinux_user } \" -t \" ${ selinux_type } \" \" ${ path } \" done <<< \" ${ my_fcontext } \" \u276f restorecon -RFv /root \u276f cat <<EOF | audit2allow [ 40.218232] audit: type=1400 audit(1659904082.793:3): avc: denied { read write } for pid=1 comm=\"systemd\" name=\"rfkill\" dev=\"devtmpfs\" ino=178 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:wireless_device_t:s0 tclass=chr_file permissive=0 [ 39.054725] audit: type=1400 audit(1659906160.603:3): avc: denied { open } for pid=1 comm=\"systemd\" path=\"/dev/rfkill\" dev=\"devtmpfs\" ino=178 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:wireless_device_t:s0 tclass=chr_file permissive=0 EOF #============= init_t ============== allow init_t wireless_device_t:chr_file { open read write } ; \u276f selocal -a \"allow init_t wireless_device_t:chr_file { open read write };\" -c my_000008 \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 39.048851] audit: type=1400 audit(1659906509.586:3): avc: denied { execute } for pid=3175 comm=\"(bootctl)\" name=\"bootctl\" dev=\"dm-1\" ino=2234398 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:bootloader_exec_t:s0 tclass=file permissive=0 [ 39.132364] audit: type=1400 audit(1659907055.619:3): avc: denied { read open } for pid=3167 comm=\"(bootctl)\" path=\"/usr/bin/bootctl\" dev=\"dm-3\" ino=2234398 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:bootloader_exec_t:s0 tclass=file permissive=0 [ 39.413367] audit: type=1400 audit(1659908226.933:3): avc: denied { execute_no_trans } for pid=3470 comm=\"(bootctl)\" path=\"/usr/bin/bootctl\" dev=\"dm-0\" ino=2234398 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:bootloader_exec_t:s0 tclass=file permissive=0 [ 40.029697] audit: type=1400 audit(1659908634.563:3): avc: denied { map } for pid=3473 comm=\"bootctl\" path=\"/usr/bin/bootctl\" dev=\"dm-0\" ino=2234398 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:bootloader_exec_t:s0 tclass=file permissive=0 EOF #============= init_t ============== allow init_t bootloader_exec_t:file { execute execute_no_trans map open read } ; \u276f selocal -a \"allow init_t bootloader_exec_t:file { execute execute_no_trans map open read };\" -c my_000009 \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 40.774118] audit: type=1400 audit(1659904083.350:6): avc: denied { getattr } for pid=3282 comm=\"systemd-tmpfile\" path=\"/var/cache/eix\" dev=\"dm-0\" ino=76668 scontext=system_u:system_r:systemd_tmpfiles_t:s0 tcontext=system_u:object_r:portage_cache_t:s0 tclass=dir permissive=0 [ 40.779591] audit: type=1400 audit(1659904083.350:7): avc: denied { read } for pid=3282 comm=\"systemd-tmpfile\" name=\"eix\" dev=\"dm-0\" ino=76668 scontext=system_u:system_r:systemd_tmpfiles_t:s0 tcontext=system_u:object_r:portage_cache_t:s0 tclass=dir permissive=0 EOF #============= systemd_tmpfiles_t ============== #!!!! This avc can be allowed using the boolean 'systemd_tmpfiles_manage_all' allow systemd_tmpfiles_t portage_cache_t:dir { getattr read } ; \u276f setsebool -P systemd_tmpfiles_manage_all on \u276f cat <<EOF | audit2allow [ 40.289519] audit: type=1400 audit(1659909973.819:3): avc: denied { mounton } for pid=3379 comm=\"(resolved)\" path=\"/run/systemd/unit-root/run/systemd/resolve\" dev=\"tmpfs\" ino=1544 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:systemd_resolved_runtime_t:s0 tclass=dir permissive=0 EOF #============= init_t ============== #!!!! This avc can be allowed using the boolean 'init_mounton_non_security' allow init_t systemd_resolved_runtime_t:dir mounton ; \u276f setsebool -P init_mounton_non_security on # [ 39.984771] audit: type=1400 audit(1659910969.506:3): avc: denied { getattr } for pid=3292 comm=\"nft\" path=\"/var/lib/nftables/rules-save\" dev=\"dm-0\" ino=2333394 scontext=system_u:system_r:iptables_t:s0 tcontext=system_u:object_r:var_lib_t:s0 tclass=file permissive=0 \u276f semanage fcontext -l | grep -i \"/var/lib\" | grep tables | column -t /var/lib/ip6?tables ( /.* ) ? all files system_u:object_r:initrc_tmp_t:s0 \u276f semanage fcontext -a -f a -s system_u -t initrc_tmp_t '/var/lib/nftables(/[^\\.].*)?' \u276f restorecon -RFv /var/lib/nftables Relabeled /var/lib/nftables from system_u:object_r:var_lib_t:s0 to system_u:object_r:initrc_tmp_t:s0 Relabeled /var/lib/nftables/rules-save from system_u:object_r:var_lib_t:s0 to system_u:object_r:initrc_tmp_t:s0 \u276f cat <<EOF | audit2allow [ 40.155132] audit: type=1400 audit(1659912307.676:3): avc: denied { read } for pid=3318 comm=\"systemd-network\" name=\"network\" dev=\"tmpfs\" ino=78 scontext=system_u:system_r:systemd_networkd_t:s0 tcontext=system_u:object_r:init_runtime_t:s0 tclass=dir permissive=0 [ 40.558773] audit: type=1400 audit(1659912839.089:3): avc: denied { getattr } for pid=3309 comm=\"systemd-network\" path=\"/run/systemd/network/90-enp1s0.network\" dev=\"tmpfs\" ino=80 scontext=system_u:system_r:systemd_networkd_t:s0 tcontext=system_u:object_r:init_runtime_t:s0 tclass=file permissive=0 [ 49.671301] audit: type=1400 audit(1660397172.236:3): avc: denied { read } for pid=3507 comm=\"systemd-network\" name=\"90-enp1s0.network\" dev=\"tmpfs\" ino=80 scontext=system_u:system_r:systemd_networkd_t:s0 tcontext=system_u:object_r:init_runtime_t:s0 tclass=file permissive=0 [ 40.820487] audit: type=1400 audit(1660397629.459:3): avc: denied { open } for pid=3305 comm=\"systemd-network\" path=\"/run/systemd/network/90-enp1s0.network\" dev=\"tmpfs\" ino=79 scontext=system_u:system_r:systemd_networkd_t:s0 tcontext=system_u:object_r:init_runtime_t:s0 tclass=file permissive=0 [ 40.436302] audit: type=1400 audit(1660398037.003:3): avc: denied { ioctl } for pid=3304 comm=\"systemd-network\" path=\"/run/systemd/network/90-enp1s0.network\" dev=\"tmpfs\" ino=79 ioctlcmd=0x5401 scontext=system_u:system_r:systemd_networkd_t:s0 tcontext=system_u:object_r:init_runtime_t:s0 tclass=file permissive=0 EOF #============= systemd_networkd_t ============== allow systemd_networkd_t init_runtime_t:dir read ; allow systemd_networkd_t init_runtime_t:file { getattr ioctl open read } ; \u276f selocal -a \"allow systemd_networkd_t init_runtime_t:dir read;\" -c my_000010_dir \u276f selocal -a \"allow systemd_networkd_t init_runtime_t:file { getattr ioctl open read };\" -c my_000010_file \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 41.110108] audit: type=1400 audit(1660400958.629:3): avc: denied { relabelto } for pid=3318 comm=\"(unbound)\" name=\"/\" dev=\"tmpfs\" ino=1 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:named_conf_t:s0 tclass=dir permissive=0 [ 40.552975] audit: type=1400 audit(1660402251.079:3): avc: denied { write } for pid=3407 comm=\"(unbound)\" name=\"/\" dev=\"tmpfs\" ino=1 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:named_conf_t:s0 tclass=dir permissive=0 [ 40.297757] audit: type=1400 audit(1660402820.809:3): avc: denied { add_name } for pid=3306 comm=\"(unbound)\" name=\"log\" scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:named_conf_t:s0 tclass=dir permissive=0 [ 39.927797] audit: type=1400 audit(1660403248.466:3): avc: denied { create } for pid=3415 comm=\"(unbound)\" name=\"log\" scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:named_conf_t:s0 tclass=file permissive=0 [ 39.828873] audit: type=1400 audit(1660403547.326:3): avc: denied { create } for pid=3316 comm=\"(unbound)\" name=\"systemd\" scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:named_conf_t:s0 tclass=dir permissive=0 EOF #============= init_t ============== allow init_t named_conf_t:dir { add_name create relabelto write } ; allow init_t named_conf_t:file create ; \u276f selocal -a \"allow init_t named_conf_t:dir { add_name create relabelto write };\" -c my_000011_dir \u276f selocal -a \"allow init_t named_conf_t:file create;\" -c my_000011_file \u276f selocal -b -L \u276f cat <<EOF | audit2allow [ 56.466014] audit: type=1400 audit(1660417565.086:3): avc: denied { watch watch_reads } for pid=3813 comm=\"(agetty)\" path=\"/dev/tty1\" dev=\"devtmpfs\" ino=20 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:tty_device_t:s0 tclass=chr_file permissive=0 [ 56.603505] audit: type=1400 audit(1660417565.226:10): avc: denied { watch watch_reads } for pid=3821 comm=\"(agetty)\" path=\"/dev/ttyS0\" dev=\"devtmpfs\" ino=96 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:tty_device_t:s0 tclass=chr_file permissive=0 [ 56.479764] audit: type=1400 audit(1660417565.103:5): avc: denied { setattr } for pid=1 comm=\"systemd\" name=\"ttyS0\" dev=\"devtmpfs\" ino=96 scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:tty_device_t:s0 tclass=chr_file permissive=0 EOF #============= init_t ============== allow init_t tty_device_t:chr_file { setattr watch watch_reads } ; \u276f selocal -a \"allow init_t tty_device_t:chr_file { setattr watch watch_reads };\" -c my_000012 \u276f selocal -b -L","title":"9.3.1. Exclusion of dontaudit denials"},{"location":"selinux/#932-inclusion-of-dontaudit-denials","text":"At this point, a login is still not possible. So, a look has to be taken at those dontaudit denials: semodule --disable_dontaudit --build TODO","title":"9.3.2. Inclusion of dontaudit denials"},{"location":"system_setup/","text":"6.1. Portage Setup \u00b6 Make dispatch-conf show diffs in color and use vimdiff for merging: rsync -a /etc/dispatch-conf.conf /etc/._cfg0000_dispatch-conf.conf && \\ sed -i \\ -e \"s/diff=\\\"diff -Nu '%s' '%s'\\\"/diff=\\\"diff --color=always -Nu '%s' '%s'\\\"/\" \\ -e \"s/merge=\\\"sdiff --suppress-common-lines --output='%s' '%s' '%s'\\\"/merge=\\\"vimdiff -c'saveas %s' -c next -c'setlocal noma readonly' -c prev '%s' '%s'\\\"/\" \\ /etc/._cfg0000_dispatch-conf.conf Install to be able to configure /etc/portage/make.conf : emerge -1 app-portage/cpuid2cpuflags Configure portage (copy&paste one after the other): rsync -a /etc/portage/make.conf /etc/portage/._cfg0000_make.conf # If you use distcc, beware of: # https://wiki.gentoo.org/wiki/Distcc#-march.3Dnative # # You could resolve \"-march=native\" with app-misc/resolve-march-native sed -i 's/COMMON_FLAGS=\"-O2 -pipe\"/COMMON_FLAGS=\"-march=native -O2 -pipe\"/' /etc/portage/._cfg0000_make.conf cat <<'EOF' >> /etc/portage/._cfg0000_make.conf EMERGE_DEFAULT_OPTS=\"--buildpkg --buildpkg-exclude '*/*-bin sys-kernel/* virtual/*' --noconfmem --with-bdeps=y --complete-graph=y\" L10N=\"de\" LINGUAS=\"${L10N}\" GENTOO_MIRRORS=\"https://ftp-stud.hs-esslingen.de/pub/Mirrors/gentoo/ https://ftp.fau.de/gentoo/ https://ftp.tu-ilmenau.de/mirror/gentoo/\" FETCHCOMMAND=\"curl --fail --silent --show-error --location --proto '=https' --tlsv1.2 --ciphers 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' --retry 2 --connect-timeout 60 -o \\\"\\${DISTDIR}/\\${FILE}\\\" \\\"\\${URI}\\\"\" RESUMECOMMAND=\"${FETCHCOMMAND} --continue-at -\" USE_HARDENED=\"pie -sslv3 -suid verify-sig\" USE=\"${USE_HARDENED} fish-completion\" EOF echo \"*/* $( cpuid2cpuflags ) \" > /etc/portage/package.use/00cpu-flags (Optional) Change GENTOO_MIRRORS in /etc/portage/make.conf (copy&paste one after the other): # Install app-misc/yq ACCEPT_KEYWORDS = ~amd64 emerge -1 app-misc/yq # Get a list of country codes and names: curl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | xq -r '.mirrors.mirrorgroup[] | \"\\(.[\"@country\"]) \\(.[\"@countryname\"])\"' | sort -k2.2 # Choose your countries the mirrors should be located in: country = '\"AU\",\"BE\",\"BR\",\"CA\",\"CH\",\"CL\",\"CN\",\"CZ\",\"DE\",\"DK\",\"ES\",\"FR\",\"GR\",\"HK\",\"IL\",\"IT\",\"JP\",\"KR\",\"KZ\",\"LU\",\"NA\",\"NC\",\"NL\",\"PH\",\"PL\",\"PT\",\"RO\",\"RU\",\"SG\",\"SK\",\"TR\",\"TW\",\"UK\",\"US\",\"ZA\"' # Get a list of mirrors available over IPv4/IPv6 dual-stack in the countries of your choice with TLSv1.3 support curl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | xq -r \".mirrors.mirrorgroup[] | select([.\\\"@country\\\"] | inside([ ${ country } ])) | .mirror | if type==\\\"array\\\" then .[] else . end | .uri | if type==\\\"array\\\" then .[] else . end | select(.\\\"@protocol\\\" == \\\"http\\\" and .\\\"@ipv4\\\" == \\\"y\\\" and .\\\"@ipv6\\\" == \\\"y\\\" and (.\\\"#text\\\" | startswith(\\\"https://\\\"))) | .\\\"#text\\\"\" | while read -r i ; do if curl -fs --proto '=https' --tlsv1.3 -I \" ${ i } \" >/dev/null ; then echo \" ${ i } \" fi done I prefer English manpages and ignore above L10N setting for sys-apps/man-pages . Makes using Stackoverflow easier \ud83d\ude09. echo \"sys-apps/man-pages -l10n_de\" >> /etc/portage/package.use/main Install app-portage/eix : emerge -at app-portage/eix Execute eix-sync : eix-sync Read Gentoo news items: eselect news list # eselect news read 1 # eselect news read 2 # etc. Update system: touch /etc/sysctl.conf && \\ echo \"sys-apps/systemd cryptsetup gnuefi\" >> /etc/portage/package.use/main && \\ emerge -atuDN @world 6.2. Non-Root User Creation \u00b6 Create a non-root user and set a password you can use with English keyboard layout for now. You can set a secure password after rebooting and taking care of localisation. useradd -m -G wheel -s /bin/bash david && \\ chmod u = rwx,og = /home/david && \\ echo -e 'alias cp=\"cp -i\"\\nalias mv=\"mv -i\"\\nalias rm=\"rm -i\"' >> /home/david/.bash_aliases && \\ chown david:david /home/david/.bash_aliases && \\ echo 'source \"${HOME}/.bash_aliases\"' >> /home/david/.bashrc && \\ passwd david (Optional) Create your authorized_keys : rsync -av --chown = david:david /etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys /home/david/.ssh/ Setup sudo: echo \"app-admin/sudo -sendmail\" >> /etc/portage/package.use/main && \\ emerge app-admin/sudo && \\ echo \"%wheel ALL=(ALL) ALL\" | EDITOR = \"tee\" visudo -f /etc/sudoers.d/wheel ; echo $? Setup vim: USE = \"-verify-sig\" emerge -1 dev-libs/libsodium && \\ emerge -1 dev-libs/libsodium app-editors/vim app-vim/molokai && \\ emerge --select --noreplace app-editors/vim app-vim/molokai && \\ sed -i 's/^USE=\"\\([^\"]*\\)\"$/USE=\"\\1 vim-syntax\"/' /etc/portage/make.conf && \\ echo \"filetype plugin on filetype indent on set number set paste syntax on colorscheme molokai\" | tee -a /root/.vimrc >> /home/david/.vimrc && \\ chown david:david /home/david/.vimrc && \\ eselect editor set vi && \\ eselect vi set vim && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" ; echo $? 6.3. Configuration Of /etc/fstab \u00b6 Setup /etc/fstab: SWAP_UUID = \" $( blkid -s UUID -o value /mapperSwap ) \" && \\ SYSTEM_UUID = \" $( blkid -s UUID -o value /mapperSystem ) \" && \\ echo \"\" >> /etc/fstab && \\ echo \" $( find /devEfi* -maxdepth 0 | while read -r i ; do echo \"UUID= $( blkid -s UUID -o value \" $i \" ) ${ i /devE/e } vfat noatime,dmask=0022,fmask=0133 0 0\" done) UUID= ${ SWAP_UUID } none swap sw 0 0 UUID= ${ SYSTEM_UUID } / btrfs noatime,subvol=@root 0 0 UUID= ${ SYSTEM_UUID } /home btrfs noatime,subvol=@home 0 0 UUID= ${ SYSTEM_UUID } /var/cache/binpkgs btrfs noatime,subvol=@binpkgs 0 0 UUID= ${ SYSTEM_UUID } /var/cache/distfiles btrfs noatime,subvol=@distfiles 0 0 UUID= ${ SYSTEM_UUID } /var/db/repos/gentoo btrfs noatime,subvol=@ebuilds 0 0 \" | column -o \" \" -t >> /etc/fstab ; echo $? 6.4. Secure Boot \u00b6 Credits: https://www.funtoo.org/Secure_Boot https://www.rodsbooks.com/efi-bootloaders/secureboot.html https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot In order to add your custom keys Setup Mode must have been enabled in your UEFI Firmware Settings before booting into SystemRescueCD. But, you can install Secure Boot files later on if you missed enabling Setup Mode . In the following, however, you have to generate Secure Boot files either way. Install required tools on your system: echo \"sys-boot/mokutil ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -at app-crypt/efitools app-crypt/sbsigntools sys-boot/mokutil Create Secure Boot keys and certificates: mkdir --mode = 0700 /etc/gentoo-installation/secureboot && \\ pushd /etc/gentoo-installation/secureboot && \\ # Create the keys openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=PK/\" -keyout PK.key -out PK.crt -days 7300 -nodes -sha256 && \\ openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=KEK/\" -keyout KEK.key -out KEK.crt -days 7300 -nodes -sha256 && \\ openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=db/\" -keyout db.key -out db.crt -days 7300 -nodes -sha256 && \\ # Prepare installation in EFI uuid = \" $( uuidgen --random ) \" && \\ cert-to-efi-sig-list -g \" ${ uuid } \" PK.crt PK.esl && \\ cert-to-efi-sig-list -g \" ${ uuid } \" KEK.crt KEK.esl && \\ cert-to-efi-sig-list -g \" ${ uuid } \" db.crt db.esl && \\ sign-efi-sig-list -k PK.key -c PK.crt PK PK.esl PK.auth && \\ sign-efi-sig-list -k PK.key -c PK.crt KEK KEK.esl KEK.auth && \\ sign-efi-sig-list -k KEK.key -c KEK.crt db db.esl db.auth && \\ popd ; echo $? If the following commands don't work you have to install db.auth , KEK.auth and PK.auth over the UEFI Firmware Settings upon reboot after the completion of this installation guide. Further information can be found at the end of this installation guide. Beware that the following commands delete all existing keys. pushd /etc/gentoo-installation/secureboot && \\ # Make them mutable chattr -i /sys/firmware/efi/efivars/ { PK,KEK,db,dbx } * && \\ # Install keys into EFI (PK last as it will enable Custom Mode locking out further unsigned changes) efi-updatevar -f db.auth db && \\ efi-updatevar -f KEK.auth KEK && \\ efi-updatevar -f PK.auth PK && \\ # Make them immutable chattr +i /sys/firmware/efi/efivars/ { PK,KEK,db,dbx } * && \\ popd ; echo $? 6.5. Kernel Installation \u00b6 Install sys-boot/efibootmgr : emerge -at sys-boot/efibootmgr Setup ESP(s): while read -r my_esp ; do bootctl --esp-path = \"/ ${ my_esp } \" install && \\ efibootmgr -b \" $( efibootmgr -v | grep -Po \"^Boot\\K[0-9]+(?=\\*[[:space:]]+Linux Boot Manager[[:space:]]+)\" ) \" -B && \\ efibootmgr --create --disk \"/dev/ $( lsblk -ndo pkname \" $( readlink -f \"/ ${ my_esp /efi/devEfi } \" ) \" ) \" --part 1 --label \"gentoo31415efi ${ my_esp } \" --loader '\\EFI\\systemd\\systemd-bootx64.efi' && \\ echo -e \"timeout 10\\neditor no\" > \"/ ${ my_esp } /loader/loader.conf\" && \\ mv \"/ ${ my_esp } /systemrescuecd.efi\" \"/ ${ my_esp } /EFI/Linux/\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/ ${ my_esp } /EFI/systemd/systemd-bootx64.efi\" \"/ ${ my_esp } /EFI/systemd/systemd-bootx64.efi\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/ ${ my_esp } /EFI/BOOT/BOOTX64.EFI\" \"/ ${ my_esp } /EFI/BOOT/BOOTX64.EFI\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/ ${ my_esp } /EFI/Linux/systemrescuecd.efi\" \"/ ${ my_esp } /EFI/Linux/systemrescuecd.efi\" echo $? done < < ( grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab ) Microcode updates are not necessary for virtual machines. Otherwise, install sys-firmware/intel-microcode if you have an Intel CPU. Or, follow the Gentoo wiki instruction to update the microcode on AMD systems. ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ grep -q \"^vendor_id[[:space:]]*:[[:space:]]*GenuineIntel $ \" /proc/cpuinfo && \\ echo \"sys-firmware/intel-microcode intel-ucode\" >> /etc/portage/package.license && \\ echo \"sys-firmware/intel-microcode hostonly\" >> /etc/portage/package.use/main && \\ emerge -at sys-firmware/intel-microcode ; echo $? Setup portage hook: mkdir -p /etc/portage/env/sys-apps /etc/portage/env/sys-firmware /etc/portage/env/sys-kernel && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-firmware/intel-microcode && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/gentoo-kernel-bin && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/linux-firmware && \\ rm -f /root/portage_hook_kernel && \\ echo 'if [[ ${EBUILD_PHASE} == postinst ]]; then while read -r my_esp; do bootctl --esp-path=\"/${my_esp}\" --no-variables --graceful update && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/${my_esp}/EFI/systemd/systemd-bootx64.efi\" \"/${my_esp}/EFI/systemd/systemd-bootx64.efi\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/${my_esp}/EFI/BOOT/BOOTX64.EFI\" \"/${my_esp}/EFI/BOOT/BOOTX64.EFI\" if [[ $? -ne 0 ]]; then cat <<EOF ___________________________ < Failed to Secure Boot sign! > --------------------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\\\ ||----w | || || EOF fi done < <(grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab) fi' > /etc/portage/env/sys-apps/systemd ; echo $? Setup sys-kernel/dracut (copy&paste one after the other): emerge -at sys-kernel/dracut system_uuid = \" $( blkid -s UUID -o value /mapperSystem ) \" my_crypt_root = \" $( blkid -s UUID -o value /devSystem* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s - ) \" my_crypt_swap = \" $( blkid -s UUID -o value /devSwap* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s - ) \" # If you intend to use systemd-cryptenroll, define this variable: # my_systemd_cryptenroll=\",tpm2-device=auto\" cat <<EOF >> /etc/dracut.conf hostonly=no hostonly_cmdline=yes use_fstab=yes #compress=xz show_modules=yes uefi=yes early_microcode=yes uefi_stub=/usr/lib/systemd/boot/efi/linuxx64.efi.stub uefi_secureboot_cert=/etc/gentoo-installation/secureboot/db.crt uefi_secureboot_key=/etc/gentoo-installation/secureboot/db.key CMDLINE=( ro root=UUID=${system_uuid} ${my_crypt_root} ${my_crypt_swap} rd.luks.options=password-echo=no${my_systemd_cryptenroll} rootfstype=btrfs rootflags=subvol=@root mitigations=auto,nosmt ) kernel_cmdline=\"\\${CMDLINE[*]}\" unset CMDLINE EOF Install tools required for booting: install_lts_kernel = \"true\" && \\ echo \"sys-fs/btrfs-progs ~amd64 sys-kernel/gentoo-kernel-bin ~amd64 sys-kernel/linux-headers ~amd64 virtual/dist-kernel ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ if [[ ${ install_lts_kernel } == true ]] ; then cat <<EOF >> /etc/portage/package.mask/main >=sys-fs/btrfs-progs-5.16 >=sys-kernel/gentoo-kernel-bin-5.16 >=sys-kernel/linux-headers-5.16 >=virtual/dist-kernel-5.16 EOF fi && \\ echo \"sys-fs/btrfs-progs -convert\" >> /etc/portage/package.use/main && \\ echo \"sys-kernel/gentoo-kernel-bin -initramfs\" >> /etc/portage/package.use/main && \\ echo \"sys-kernel/linux-firmware linux-fw-redistributable no-source-code\" >> /etc/portage/package.license && \\ emerge -at sys-fs/btrfs-progs $(if [[ -e /devSwapb ]] ; then echo -n \"sys-fs/mdadm\" ; fi) sys-kernel/linux-firmware Install the kernel : emerge -at sys-kernel/gentoo-kernel-bin 6.6. Additional Packages \u00b6 Set /etc/hosts : rsync -a /etc/hosts /etc/._cfg0000_hosts && \\ sed -i 's/localhost$/localhost micro/' /etc/._cfg0000_hosts (Optional) Enable ssh service: systemctl --no-reload enable sshd.service starship: # If you have insufficient ressources, you may want to \"emerge -1 dev-lang/rust-bin\" beforehand. echo \"app-shells/starship ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge app-shells/starship && \\ mkdir --mode = 0700 /home/david/.config /root/.config && \\ touch /home/david/.config/starship.toml && \\ chown -R david:david /home/david/.config && \\ cat <<'EOF' | tee /root/.config/starship.toml > /home/david/.config/starship.toml; echo $? [hostname] ssh_only = false format = \"[$hostname](bold red) \" EOF fish shell: echo \"=dev-libs/libpcre2- $( qatom -F \"%{PVR}\" \" $( portageq best_visible / dev-libs/libpcre2 ) \" ) pcre32\" >> /etc/portage/package.use/main && \\ echo \"app-shells/fish ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge app-shells/fish && \\ echo ' # Use fish in place of bash # keep this line at the bottom of ~/.bashrc if [[ -z ${chrooted} ]]; then if [[ -x /bin/fish ]]; then SHELL=/bin/fish exec /bin/fish fi elif [[ -z ${chrooted_su} ]]; then export chrooted_su=true source /etc/profile && su --login --whitelist-environment=chrooted,chrooted_su else env-update && source /etc/profile && export PS1=\"(chroot) $PS1\" fi' >> /root/.bashrc && \\ echo ' # Use fish in place of bash # keep this line at the bottom of ~/.bashrc if [[ -x /bin/fish ]]; then SHELL=/bin/fish exec /bin/fish fi' >> /home/david/.bashrc ; echo $? root setup: /bin/fish -c fish_update_completions non-root setup: su -l david -c \"/bin/fish -c fish_update_completions\" Enable aliases and starship (copy&paste one after the other): su - exit su - david exit sed -i 's/^end$/ source \"$HOME\\/.bash_aliases\"\\n starship init fish | source\\nend/' /root/.config/fish/config.fish sed -i 's/^end$/ source \"$HOME\\/.bash_aliases\"\\n starship init fish | source\\nend/' /home/david/.config/fish/config.fish nerd fonts: emerge media-libs/fontconfig && \\ su -l david -c \"curl --proto '=https' --tlsv1.3 -fsSL -o /tmp/FiraCode.zip https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/FiraCode.zip\" && \\ b2sum -c <<< \"81f1dce1c7724a838fc5c61886902db576f3d1e8a18d4ba077772e045e3aea9a97e424b6fcd92a40a419f3ba160b3cad09609812c5496709f4b6a52c2b7269e6 /tmp/FiraCode.zip\" && \\ mkdir /tmp/FiraCode && \\ unzip -d /tmp/FiraCode /tmp/FiraCode.zip && \\ rm -f /tmp/FiraCode/*Windows* /tmp/FiraCode/Fura* && \\ mkdir /usr/share/fonts/nerd-firacode && \\ rsync -a --chown = 0 :0 --chmod = a = r /tmp/FiraCode/*.otf /usr/share/fonts/nerd-firacode/ ; echo $? Download the Nerd Font Symbols Preset , verify the content and install. If you have sys-fs/mdadm installed: [[ -e /devSwapb ]] && \\ rsync -a /etc/mdadm.conf /etc/._cfg0000_mdadm.conf && \\ echo \"\" >> /etc/._cfg0000_mdadm.conf && \\ mdadm --detail --scan >> /etc/._cfg0000_mdadm.conf ; echo $? ssh: rsync -a /etc/ssh/sshd_config /etc/ssh/._cfg0000_sshd_config && \\ sed -i \\ -e 's/^#Port 22$/Port 50022/' \\ -e 's/^#PermitRootLogin prohibit-password$/PermitRootLogin no/' \\ -e 's/^#KbdInteractiveAuthentication yes$/KbdInteractiveAuthentication no/' \\ -e 's/^#X11Forwarding no$/X11Forwarding no/' /etc/ssh/._cfg0000_sshd_config && \\ grep -q \"^PasswordAuthentication no $ \" /etc/ssh/._cfg0000_sshd_config && \\ echo \" AuthenticationMethods publickey KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com AllowUsers david\" >> /etc/ssh/._cfg0000_sshd_config && \\ ssh-keygen -A && \\ sshd -t ; echo $? Write down fingerprints to double check upon initial SSH connection to the Gentoo Linux machine: find /etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; Setup client SSH config: echo \"AddKeysToAgent no KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com HashKnownHosts no StrictHostKeyChecking ask VisualHostKey yes\" > /home/david/.ssh/config && \\ chown david:david /home/david/.ssh/config ; echo $? Disable sysrq for security sake : echo \"kernel.sysrq = 0\" > /etc/sysctl.d/99sysrq.conf misc tools: emerge -at app-misc/screen app-portage/gentoolkit","title":"6. System Setup"},{"location":"system_setup/#61-portage-setup","text":"Make dispatch-conf show diffs in color and use vimdiff for merging: rsync -a /etc/dispatch-conf.conf /etc/._cfg0000_dispatch-conf.conf && \\ sed -i \\ -e \"s/diff=\\\"diff -Nu '%s' '%s'\\\"/diff=\\\"diff --color=always -Nu '%s' '%s'\\\"/\" \\ -e \"s/merge=\\\"sdiff --suppress-common-lines --output='%s' '%s' '%s'\\\"/merge=\\\"vimdiff -c'saveas %s' -c next -c'setlocal noma readonly' -c prev '%s' '%s'\\\"/\" \\ /etc/._cfg0000_dispatch-conf.conf Install to be able to configure /etc/portage/make.conf : emerge -1 app-portage/cpuid2cpuflags Configure portage (copy&paste one after the other): rsync -a /etc/portage/make.conf /etc/portage/._cfg0000_make.conf # If you use distcc, beware of: # https://wiki.gentoo.org/wiki/Distcc#-march.3Dnative # # You could resolve \"-march=native\" with app-misc/resolve-march-native sed -i 's/COMMON_FLAGS=\"-O2 -pipe\"/COMMON_FLAGS=\"-march=native -O2 -pipe\"/' /etc/portage/._cfg0000_make.conf cat <<'EOF' >> /etc/portage/._cfg0000_make.conf EMERGE_DEFAULT_OPTS=\"--buildpkg --buildpkg-exclude '*/*-bin sys-kernel/* virtual/*' --noconfmem --with-bdeps=y --complete-graph=y\" L10N=\"de\" LINGUAS=\"${L10N}\" GENTOO_MIRRORS=\"https://ftp-stud.hs-esslingen.de/pub/Mirrors/gentoo/ https://ftp.fau.de/gentoo/ https://ftp.tu-ilmenau.de/mirror/gentoo/\" FETCHCOMMAND=\"curl --fail --silent --show-error --location --proto '=https' --tlsv1.2 --ciphers 'ECDHE+AESGCM+AES256:ECDHE+CHACHA20:ECDHE+AESGCM+AES128' --retry 2 --connect-timeout 60 -o \\\"\\${DISTDIR}/\\${FILE}\\\" \\\"\\${URI}\\\"\" RESUMECOMMAND=\"${FETCHCOMMAND} --continue-at -\" USE_HARDENED=\"pie -sslv3 -suid verify-sig\" USE=\"${USE_HARDENED} fish-completion\" EOF echo \"*/* $( cpuid2cpuflags ) \" > /etc/portage/package.use/00cpu-flags (Optional) Change GENTOO_MIRRORS in /etc/portage/make.conf (copy&paste one after the other): # Install app-misc/yq ACCEPT_KEYWORDS = ~amd64 emerge -1 app-misc/yq # Get a list of country codes and names: curl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | xq -r '.mirrors.mirrorgroup[] | \"\\(.[\"@country\"]) \\(.[\"@countryname\"])\"' | sort -k2.2 # Choose your countries the mirrors should be located in: country = '\"AU\",\"BE\",\"BR\",\"CA\",\"CH\",\"CL\",\"CN\",\"CZ\",\"DE\",\"DK\",\"ES\",\"FR\",\"GR\",\"HK\",\"IL\",\"IT\",\"JP\",\"KR\",\"KZ\",\"LU\",\"NA\",\"NC\",\"NL\",\"PH\",\"PL\",\"PT\",\"RO\",\"RU\",\"SG\",\"SK\",\"TR\",\"TW\",\"UK\",\"US\",\"ZA\"' # Get a list of mirrors available over IPv4/IPv6 dual-stack in the countries of your choice with TLSv1.3 support curl -fsSL --proto '=https' --tlsv1.3 https://api.gentoo.org/mirrors/distfiles.xml | xq -r \".mirrors.mirrorgroup[] | select([.\\\"@country\\\"] | inside([ ${ country } ])) | .mirror | if type==\\\"array\\\" then .[] else . end | .uri | if type==\\\"array\\\" then .[] else . end | select(.\\\"@protocol\\\" == \\\"http\\\" and .\\\"@ipv4\\\" == \\\"y\\\" and .\\\"@ipv6\\\" == \\\"y\\\" and (.\\\"#text\\\" | startswith(\\\"https://\\\"))) | .\\\"#text\\\"\" | while read -r i ; do if curl -fs --proto '=https' --tlsv1.3 -I \" ${ i } \" >/dev/null ; then echo \" ${ i } \" fi done I prefer English manpages and ignore above L10N setting for sys-apps/man-pages . Makes using Stackoverflow easier \ud83d\ude09. echo \"sys-apps/man-pages -l10n_de\" >> /etc/portage/package.use/main Install app-portage/eix : emerge -at app-portage/eix Execute eix-sync : eix-sync Read Gentoo news items: eselect news list # eselect news read 1 # eselect news read 2 # etc. Update system: touch /etc/sysctl.conf && \\ echo \"sys-apps/systemd cryptsetup gnuefi\" >> /etc/portage/package.use/main && \\ emerge -atuDN @world","title":"6.1. Portage Setup"},{"location":"system_setup/#62-non-root-user-creation","text":"Create a non-root user and set a password you can use with English keyboard layout for now. You can set a secure password after rebooting and taking care of localisation. useradd -m -G wheel -s /bin/bash david && \\ chmod u = rwx,og = /home/david && \\ echo -e 'alias cp=\"cp -i\"\\nalias mv=\"mv -i\"\\nalias rm=\"rm -i\"' >> /home/david/.bash_aliases && \\ chown david:david /home/david/.bash_aliases && \\ echo 'source \"${HOME}/.bash_aliases\"' >> /home/david/.bashrc && \\ passwd david (Optional) Create your authorized_keys : rsync -av --chown = david:david /etc/gentoo-installation/systemrescuecd/recipe/build_into_srm/root/.ssh/authorized_keys /home/david/.ssh/ Setup sudo: echo \"app-admin/sudo -sendmail\" >> /etc/portage/package.use/main && \\ emerge app-admin/sudo && \\ echo \"%wheel ALL=(ALL) ALL\" | EDITOR = \"tee\" visudo -f /etc/sudoers.d/wheel ; echo $? Setup vim: USE = \"-verify-sig\" emerge -1 dev-libs/libsodium && \\ emerge -1 dev-libs/libsodium app-editors/vim app-vim/molokai && \\ emerge --select --noreplace app-editors/vim app-vim/molokai && \\ sed -i 's/^USE=\"\\([^\"]*\\)\"$/USE=\"\\1 vim-syntax\"/' /etc/portage/make.conf && \\ echo \"filetype plugin on filetype indent on set number set paste syntax on colorscheme molokai\" | tee -a /root/.vimrc >> /home/david/.vimrc && \\ chown david:david /home/david/.vimrc && \\ eselect editor set vi && \\ eselect vi set vim && \\ env-update && source /etc/profile && export PS1 = \"(chroot) $PS1 \" ; echo $?","title":"6.2. Non-Root User Creation"},{"location":"system_setup/#63-configuration-of-etcfstab","text":"Setup /etc/fstab: SWAP_UUID = \" $( blkid -s UUID -o value /mapperSwap ) \" && \\ SYSTEM_UUID = \" $( blkid -s UUID -o value /mapperSystem ) \" && \\ echo \"\" >> /etc/fstab && \\ echo \" $( find /devEfi* -maxdepth 0 | while read -r i ; do echo \"UUID= $( blkid -s UUID -o value \" $i \" ) ${ i /devE/e } vfat noatime,dmask=0022,fmask=0133 0 0\" done) UUID= ${ SWAP_UUID } none swap sw 0 0 UUID= ${ SYSTEM_UUID } / btrfs noatime,subvol=@root 0 0 UUID= ${ SYSTEM_UUID } /home btrfs noatime,subvol=@home 0 0 UUID= ${ SYSTEM_UUID } /var/cache/binpkgs btrfs noatime,subvol=@binpkgs 0 0 UUID= ${ SYSTEM_UUID } /var/cache/distfiles btrfs noatime,subvol=@distfiles 0 0 UUID= ${ SYSTEM_UUID } /var/db/repos/gentoo btrfs noatime,subvol=@ebuilds 0 0 \" | column -o \" \" -t >> /etc/fstab ; echo $?","title":"6.3. Configuration Of /etc/fstab"},{"location":"system_setup/#64-secure-boot","text":"Credits: https://www.funtoo.org/Secure_Boot https://www.rodsbooks.com/efi-bootloaders/secureboot.html https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot In order to add your custom keys Setup Mode must have been enabled in your UEFI Firmware Settings before booting into SystemRescueCD. But, you can install Secure Boot files later on if you missed enabling Setup Mode . In the following, however, you have to generate Secure Boot files either way. Install required tools on your system: echo \"sys-boot/mokutil ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge -at app-crypt/efitools app-crypt/sbsigntools sys-boot/mokutil Create Secure Boot keys and certificates: mkdir --mode = 0700 /etc/gentoo-installation/secureboot && \\ pushd /etc/gentoo-installation/secureboot && \\ # Create the keys openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=PK/\" -keyout PK.key -out PK.crt -days 7300 -nodes -sha256 && \\ openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=KEK/\" -keyout KEK.key -out KEK.crt -days 7300 -nodes -sha256 && \\ openssl req -new -x509 -newkey rsa:3072 -subj \"/CN=db/\" -keyout db.key -out db.crt -days 7300 -nodes -sha256 && \\ # Prepare installation in EFI uuid = \" $( uuidgen --random ) \" && \\ cert-to-efi-sig-list -g \" ${ uuid } \" PK.crt PK.esl && \\ cert-to-efi-sig-list -g \" ${ uuid } \" KEK.crt KEK.esl && \\ cert-to-efi-sig-list -g \" ${ uuid } \" db.crt db.esl && \\ sign-efi-sig-list -k PK.key -c PK.crt PK PK.esl PK.auth && \\ sign-efi-sig-list -k PK.key -c PK.crt KEK KEK.esl KEK.auth && \\ sign-efi-sig-list -k KEK.key -c KEK.crt db db.esl db.auth && \\ popd ; echo $? If the following commands don't work you have to install db.auth , KEK.auth and PK.auth over the UEFI Firmware Settings upon reboot after the completion of this installation guide. Further information can be found at the end of this installation guide. Beware that the following commands delete all existing keys. pushd /etc/gentoo-installation/secureboot && \\ # Make them mutable chattr -i /sys/firmware/efi/efivars/ { PK,KEK,db,dbx } * && \\ # Install keys into EFI (PK last as it will enable Custom Mode locking out further unsigned changes) efi-updatevar -f db.auth db && \\ efi-updatevar -f KEK.auth KEK && \\ efi-updatevar -f PK.auth PK && \\ # Make them immutable chattr +i /sys/firmware/efi/efivars/ { PK,KEK,db,dbx } * && \\ popd ; echo $?","title":"6.4. Secure Boot"},{"location":"system_setup/#65-kernel-installation","text":"Install sys-boot/efibootmgr : emerge -at sys-boot/efibootmgr Setup ESP(s): while read -r my_esp ; do bootctl --esp-path = \"/ ${ my_esp } \" install && \\ efibootmgr -b \" $( efibootmgr -v | grep -Po \"^Boot\\K[0-9]+(?=\\*[[:space:]]+Linux Boot Manager[[:space:]]+)\" ) \" -B && \\ efibootmgr --create --disk \"/dev/ $( lsblk -ndo pkname \" $( readlink -f \"/ ${ my_esp /efi/devEfi } \" ) \" ) \" --part 1 --label \"gentoo31415efi ${ my_esp } \" --loader '\\EFI\\systemd\\systemd-bootx64.efi' && \\ echo -e \"timeout 10\\neditor no\" > \"/ ${ my_esp } /loader/loader.conf\" && \\ mv \"/ ${ my_esp } /systemrescuecd.efi\" \"/ ${ my_esp } /EFI/Linux/\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/ ${ my_esp } /EFI/systemd/systemd-bootx64.efi\" \"/ ${ my_esp } /EFI/systemd/systemd-bootx64.efi\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/ ${ my_esp } /EFI/BOOT/BOOTX64.EFI\" \"/ ${ my_esp } /EFI/BOOT/BOOTX64.EFI\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/ ${ my_esp } /EFI/Linux/systemrescuecd.efi\" \"/ ${ my_esp } /EFI/Linux/systemrescuecd.efi\" echo $? done < < ( grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab ) Microcode updates are not necessary for virtual machines. Otherwise, install sys-firmware/intel-microcode if you have an Intel CPU. Or, follow the Gentoo wiki instruction to update the microcode on AMD systems. ! grep -q -w \"hypervisor\" < ( grep \"^flags[[:space:]]*:[[:space:]]*\" /proc/cpuinfo ) && \\ grep -q \"^vendor_id[[:space:]]*:[[:space:]]*GenuineIntel $ \" /proc/cpuinfo && \\ echo \"sys-firmware/intel-microcode intel-ucode\" >> /etc/portage/package.license && \\ echo \"sys-firmware/intel-microcode hostonly\" >> /etc/portage/package.use/main && \\ emerge -at sys-firmware/intel-microcode ; echo $? Setup portage hook: mkdir -p /etc/portage/env/sys-apps /etc/portage/env/sys-firmware /etc/portage/env/sys-kernel && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-firmware/intel-microcode && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/gentoo-kernel-bin && \\ rsync -a --numeric-ids --chown = 0 :0 --chmod = u = rw,go = r /root/portage_hook_kernel /etc/portage/env/sys-kernel/linux-firmware && \\ rm -f /root/portage_hook_kernel && \\ echo 'if [[ ${EBUILD_PHASE} == postinst ]]; then while read -r my_esp; do bootctl --esp-path=\"/${my_esp}\" --no-variables --graceful update && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/${my_esp}/EFI/systemd/systemd-bootx64.efi\" \"/${my_esp}/EFI/systemd/systemd-bootx64.efi\" && \\ sbsign --key /etc/gentoo-installation/secureboot/db.key --cert /etc/gentoo-installation/secureboot/db.crt --output \"/${my_esp}/EFI/BOOT/BOOTX64.EFI\" \"/${my_esp}/EFI/BOOT/BOOTX64.EFI\" if [[ $? -ne 0 ]]; then cat <<EOF ___________________________ < Failed to Secure Boot sign! > --------------------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\\\ ||----w | || || EOF fi done < <(grep -Po \"^UUID=[0-9A-F]{4}-[0-9A-F]{4}[[:space:]]+/\\Kefi[a-z](?=[[:space:]]+vfat[[:space:]]+)\" /etc/fstab) fi' > /etc/portage/env/sys-apps/systemd ; echo $? Setup sys-kernel/dracut (copy&paste one after the other): emerge -at sys-kernel/dracut system_uuid = \" $( blkid -s UUID -o value /mapperSystem ) \" my_crypt_root = \" $( blkid -s UUID -o value /devSystem* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s - ) \" my_crypt_swap = \" $( blkid -s UUID -o value /devSwap* | sed 's/^/rd.luks.uuid=/' | paste -d \" \" -s - ) \" # If you intend to use systemd-cryptenroll, define this variable: # my_systemd_cryptenroll=\",tpm2-device=auto\" cat <<EOF >> /etc/dracut.conf hostonly=no hostonly_cmdline=yes use_fstab=yes #compress=xz show_modules=yes uefi=yes early_microcode=yes uefi_stub=/usr/lib/systemd/boot/efi/linuxx64.efi.stub uefi_secureboot_cert=/etc/gentoo-installation/secureboot/db.crt uefi_secureboot_key=/etc/gentoo-installation/secureboot/db.key CMDLINE=( ro root=UUID=${system_uuid} ${my_crypt_root} ${my_crypt_swap} rd.luks.options=password-echo=no${my_systemd_cryptenroll} rootfstype=btrfs rootflags=subvol=@root mitigations=auto,nosmt ) kernel_cmdline=\"\\${CMDLINE[*]}\" unset CMDLINE EOF Install tools required for booting: install_lts_kernel = \"true\" && \\ echo \"sys-fs/btrfs-progs ~amd64 sys-kernel/gentoo-kernel-bin ~amd64 sys-kernel/linux-headers ~amd64 virtual/dist-kernel ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ if [[ ${ install_lts_kernel } == true ]] ; then cat <<EOF >> /etc/portage/package.mask/main >=sys-fs/btrfs-progs-5.16 >=sys-kernel/gentoo-kernel-bin-5.16 >=sys-kernel/linux-headers-5.16 >=virtual/dist-kernel-5.16 EOF fi && \\ echo \"sys-fs/btrfs-progs -convert\" >> /etc/portage/package.use/main && \\ echo \"sys-kernel/gentoo-kernel-bin -initramfs\" >> /etc/portage/package.use/main && \\ echo \"sys-kernel/linux-firmware linux-fw-redistributable no-source-code\" >> /etc/portage/package.license && \\ emerge -at sys-fs/btrfs-progs $(if [[ -e /devSwapb ]] ; then echo -n \"sys-fs/mdadm\" ; fi) sys-kernel/linux-firmware Install the kernel : emerge -at sys-kernel/gentoo-kernel-bin","title":"6.5. Kernel Installation"},{"location":"system_setup/#66-additional-packages","text":"Set /etc/hosts : rsync -a /etc/hosts /etc/._cfg0000_hosts && \\ sed -i 's/localhost$/localhost micro/' /etc/._cfg0000_hosts (Optional) Enable ssh service: systemctl --no-reload enable sshd.service starship: # If you have insufficient ressources, you may want to \"emerge -1 dev-lang/rust-bin\" beforehand. echo \"app-shells/starship ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge app-shells/starship && \\ mkdir --mode = 0700 /home/david/.config /root/.config && \\ touch /home/david/.config/starship.toml && \\ chown -R david:david /home/david/.config && \\ cat <<'EOF' | tee /root/.config/starship.toml > /home/david/.config/starship.toml; echo $? [hostname] ssh_only = false format = \"[$hostname](bold red) \" EOF fish shell: echo \"=dev-libs/libpcre2- $( qatom -F \"%{PVR}\" \" $( portageq best_visible / dev-libs/libpcre2 ) \" ) pcre32\" >> /etc/portage/package.use/main && \\ echo \"app-shells/fish ~amd64\" >> /etc/portage/package.accept_keywords/main && \\ emerge app-shells/fish && \\ echo ' # Use fish in place of bash # keep this line at the bottom of ~/.bashrc if [[ -z ${chrooted} ]]; then if [[ -x /bin/fish ]]; then SHELL=/bin/fish exec /bin/fish fi elif [[ -z ${chrooted_su} ]]; then export chrooted_su=true source /etc/profile && su --login --whitelist-environment=chrooted,chrooted_su else env-update && source /etc/profile && export PS1=\"(chroot) $PS1\" fi' >> /root/.bashrc && \\ echo ' # Use fish in place of bash # keep this line at the bottom of ~/.bashrc if [[ -x /bin/fish ]]; then SHELL=/bin/fish exec /bin/fish fi' >> /home/david/.bashrc ; echo $? root setup: /bin/fish -c fish_update_completions non-root setup: su -l david -c \"/bin/fish -c fish_update_completions\" Enable aliases and starship (copy&paste one after the other): su - exit su - david exit sed -i 's/^end$/ source \"$HOME\\/.bash_aliases\"\\n starship init fish | source\\nend/' /root/.config/fish/config.fish sed -i 's/^end$/ source \"$HOME\\/.bash_aliases\"\\n starship init fish | source\\nend/' /home/david/.config/fish/config.fish nerd fonts: emerge media-libs/fontconfig && \\ su -l david -c \"curl --proto '=https' --tlsv1.3 -fsSL -o /tmp/FiraCode.zip https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/FiraCode.zip\" && \\ b2sum -c <<< \"81f1dce1c7724a838fc5c61886902db576f3d1e8a18d4ba077772e045e3aea9a97e424b6fcd92a40a419f3ba160b3cad09609812c5496709f4b6a52c2b7269e6 /tmp/FiraCode.zip\" && \\ mkdir /tmp/FiraCode && \\ unzip -d /tmp/FiraCode /tmp/FiraCode.zip && \\ rm -f /tmp/FiraCode/*Windows* /tmp/FiraCode/Fura* && \\ mkdir /usr/share/fonts/nerd-firacode && \\ rsync -a --chown = 0 :0 --chmod = a = r /tmp/FiraCode/*.otf /usr/share/fonts/nerd-firacode/ ; echo $? Download the Nerd Font Symbols Preset , verify the content and install. If you have sys-fs/mdadm installed: [[ -e /devSwapb ]] && \\ rsync -a /etc/mdadm.conf /etc/._cfg0000_mdadm.conf && \\ echo \"\" >> /etc/._cfg0000_mdadm.conf && \\ mdadm --detail --scan >> /etc/._cfg0000_mdadm.conf ; echo $? ssh: rsync -a /etc/ssh/sshd_config /etc/ssh/._cfg0000_sshd_config && \\ sed -i \\ -e 's/^#Port 22$/Port 50022/' \\ -e 's/^#PermitRootLogin prohibit-password$/PermitRootLogin no/' \\ -e 's/^#KbdInteractiveAuthentication yes$/KbdInteractiveAuthentication no/' \\ -e 's/^#X11Forwarding no$/X11Forwarding no/' /etc/ssh/._cfg0000_sshd_config && \\ grep -q \"^PasswordAuthentication no $ \" /etc/ssh/._cfg0000_sshd_config && \\ echo \" AuthenticationMethods publickey KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com AllowUsers david\" >> /etc/ssh/._cfg0000_sshd_config && \\ ssh-keygen -A && \\ sshd -t ; echo $? Write down fingerprints to double check upon initial SSH connection to the Gentoo Linux machine: find /etc/ssh/ -type f -name \"ssh_host*\\.pub\" -exec ssh-keygen -vlf {} \\; Setup client SSH config: echo \"AddKeysToAgent no KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org HostKeyAlgorithms ssh-ed25519 Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com HashKnownHosts no StrictHostKeyChecking ask VisualHostKey yes\" > /home/david/.ssh/config && \\ chown david:david /home/david/.ssh/config ; echo $? Disable sysrq for security sake : echo \"kernel.sysrq = 0\" > /etc/sysctl.d/99sysrq.conf misc tools: emerge -at app-misc/screen app-portage/gentoolkit","title":"6.6. Additional Packages"}]}